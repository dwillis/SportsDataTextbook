# Beeswarm plots

A beeswarm plot is sometimes called a column scatterplot. It's an effective way to show how individual things -- teams, players, etc. -- are distributed along a numberline. The column is a grouping -- say positions in basketball -- and the dots are players, and the dots cluster where the numbers are more common. So think of it like a histogram mixed with a scatterplot crossed with a bar chart. 

An example will help.

First things first: Install ggbeeswarm with `install.packages("ggbeeswarm")`

Like ggalt and ggrepel, ggbeeswarm adds a couple new geoms to ggplot. We'll need to load it, the tidyverse and, for later, ggrepel.

```{r}
#| warning: false
#| message: false
library(tidyverse)
library(ggbeeswarm)
library(ggrepel)
```

Another bit of setup: we need to set the seed for the random number generator. The library "jitters" the dots in the beeswarm randomly. If we don't set the seed, we'll get different results each time. Setting the seed means we get the same look. 

```{r}
set.seed(1234)
```

So let's look at last year's women's basketball team as a group of shooters. The team didn't have the kind of success that was envisioned -- we know that -- but what kind of a problem is it going to be that we're returning one regular starter (Diamond Miller) from it? 

```{r}
#| warning: false
#| message: false
#| results: asis
#| echo: false
library(downloadthis)
library(glue)

dllink <- download_link(
  link = "https://dwillis.github.io/sports-data-files/players21.csv",
  button_label = "Download csv file",
  button_type = "danger",
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)

glue("<pre><p><strong>For this walkthrough:</strong></p><p>{dllink}</p></pre>")
```

First we'll load our player data.

```{r}
players <- read_csv("data/wbb_players_2022.csv")
```

We know this data has a lot of players who didn't play, so let's get rid of them.

```{r}
activeplayers <- players %>% filter(mp>0) 
```

Now let's ask what makes a good shooter? The best measure, in my book, is True Shooting Percentage. It's a combination of weighted field goal shooting -- to account for three pointers -- and free throws. Let's calculate that and add it to our data.

```{r}
activeplayers <- activeplayers %>% mutate(tspct=pts/(2*(fga+0.44*fta)))
```

If we include *all* players, we'll have too many dots. So let's narrow it down. A decent tool for cutoffs? Field goal attempts. Let's get a quick look at them.

```{r}
summary(activeplayers$fga)
```

The median number of shots is 99, but we only really care about good ones. So let's use 197 attempts -- the third quartile -- as our cutoff. 

```{r}
shooters <- activeplayers %>% filter(fga > 197)
```

Now we've got enough for a beeswarm plot. It works very much like you would expect -- the group value is the x, the number is the y. We're going to beeswarm by position, and the dots will be true shooting percentage.

```{r}
ggplot() + geom_beeswarm(data=shooters, aes(x=position, y=tspct), color="grey")
```

You can see that there's a lot fewer centers who have attempted more than 152 shots than guards, but then there's a lot more guards in college basketball than anything else. In the guards column, note that fat width of the swarm is between .5 and .6. So that means most guards who shoot more than 197 shots end up in that area. They're the average shooter at that level. You can see, some are better, some are worse. 

So where are the Maryland players in that mix? 

We'll filter players on Maryland who meet our criteria. 

```{r}
umd <- activeplayers %>% 
  filter(team == "Maryland") %>% 
  filter(fga>197) %>% 
  arrange(desc(tspct))
```

Seven Cornhuskers took more than 197 shots. Number returning this season? Two.

But how good are they as true shooters?  

When you add another beeswarm, we need to pass another element in -- we need to tell it if we're grouping on the x value. Not sure why, but you'll get a warning if you don't. 

```{r}
ggplot() + 
  geom_beeswarm(
    data=shooters, 
    groupOnX=TRUE, 
    aes(x=position, y=tspct), color="grey") + 
  geom_beeswarm(
    data=umd, 
    groupOnX=TRUE, 
    aes(x=position, y=tspct), color="red")
```
One very good guard, and some good forwards. Who are they?

This is where we can use ggrepel. Let's add a text layer and label the dots. 

```{r}
ggplot() + 
  geom_beeswarm(
    data=shooters, 
    groupOnX=TRUE, 
    aes(x=position, y=tspct), color="grey") + 
  geom_beeswarm(
    data=umd, 
    groupOnX=TRUE, 
    aes(x=position, y=tspct), color="red") +
  geom_text_repel(
    data=umd, 
    aes(x=position, y=tspct, label=player))
```

So Katie Benzan was our best shooter by true shooting percentage. Most of the rest were at or above average shooters for that volume of shooting, but Miller and Sellers are the returnees, and both were near average. 

## A few other options

The ggbeeswarm library has a couple of variations on the geom_beeswarm that may work better for your application. They are `geom_quasirandom` and `geom_jitter`. 

There's not a lot to change from our example to see what they do. 

```{r}
ggplot() + 
  geom_quasirandom(
    data=shooters, 
    groupOnX=TRUE, 
    aes(x=position, y=tspct), color="grey") + 
  geom_quasirandom(
    data=umd, 
    groupOnX=TRUE, 
    aes(x=position, y=tspct), color="red") +
  geom_text_repel(
    data=umd, 
    aes(x=position, y=tspct, label=player))
```

Quasirandom spreads out the dots you see in beeswarm using -- you guessed it -- quasirandom spacing. 

For `geom_jitter`, we need to remove the groupOnX value. Why? No clue. 

```{r}
ggplot() + 
  geom_jitter(
    data=shooters, 
    aes(x=position, y=tspct), color="grey") + 
  geom_jitter(
    data=umd, 
    aes(x=position, y=tspct), color="red") +
  geom_text_repel(
    data=umd, 
    aes(x=position, y=tspct, label=player))
```

`geom_jitter` spreads out the dots evenly across the width of the column, randomly deciding where in the line of the true shooting percentage they appear. 

Which one is right for you? You're going to have to experiment and decide. This is the art in the art and a science. 