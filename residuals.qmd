# Residuals

When looking at a linear model of your data, there's a measure you need to be aware of called residuals. The residual is the distance between what the model predicted and what the real outcome is. Take our model at the end of the correlation and regression chapter. Our model predicted Maryland's women soccer should have outscored Navy by 2.12 goals a year ago. The match was a 3-3 draw. So our residual is -2.12.

Residuals can tell you several things, but most important is if a linear model the right model for your data. If the residuals appear to be random, then a linear model is appropriate. If they have a pattern, it means something else is going on in your data and a linear model isn't appropriate.

Residuals can also tell you who is under-performing and over-performing the model. And the more robust the model -- the better your r-squared value is -- the more meaningful that label of under or over-performing is.

Let's go back to our model for college basketball. For our predictor, let's use Net FG Percentage - the difference between the two teams' shooting success.

```{r}
#| warning: false
#| message: false
#| results: asis
#| echo: false
library(downloadthis)
library(glue)

dllink <- download_link(
  link = "https://dwillis.github.io/sports-data-files/cbblogs1524.csv",
  button_label = "Download csv file",
  button_type = "danger",
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)

glue("<pre><p><strong>For this walkthrough:</strong></p><p>{dllink}</p></pre>")

```

Then load the tidyverse.

```{r}
#| warning: false
#| message: false
library(tidyverse)
```

```{r}
logs <- read_csv("data/cbblogs1524.csv")
```

First, let's make the columns we'll need.

```{r}
residualmodel <- logs |> mutate(differential = TeamScore - OpponentScore, FGPctMargin = TeamFGPCT - OpponentFGPCT)
```

Now let's create our model.

```{r}
fit <- lm(differential ~ FGPctMargin, data = residualmodel)
summary(fit)
```

We've seen this output before, but let's review because if you are using scatterplots to make a point, you should do this. First, note the Min and Max residual at the top. A team has under-performed the model by 51 points (!), and a team has overperformed it by 68 points (!!). The median residual, where half are above and half are below, is just slightly below the fit line. Close here is good.

Next: Look at the Adjusted R-squared value. What that says is that 67 percent of a team's scoring differential can be predicted by their FG percentage margin.

Last: Look at the p-value. We are looking for a p-value smaller than .05. At .05, we can say that our correlation didn't happen at random. And, in this case, it REALLY didn't happen at random. But if you know a little bit about basketball, it doesn't surprise you that the more you shoot better than your opponent, the more you win by. It's an intuitive result.

What we want to do now is look at those residuals. We want to add them to our individual game records. We can do that by creating two new fields -- predicted and residuals -- to our dataframe like this:

```{r}
#| error: true
residualmodel <- residualmodel |> mutate(predicted = predict(fit), residuals = residuals(fit))
```

Uh, oh. What's going on here? When you get a message like this, where R is complaining about the size of the data, it most likely means that your model is using some columns that have NA values. In this case, the number of columns looks small - perhaps 3 - so let's just get rid of those rows by using the calculated columns from our model:

```{r}
residualmodel <- residualmodel |> filter(!is.na(FGPctMargin))
```

Now we can try re-running the code to add the predicted and residuals columns:

```{r}
residualmodel <- residualmodel |> mutate(predicted = predict(fit), residuals = residuals(fit))
```

Now we can sort our data by those residuals. Sorting in descending order gives us the games where teams overperformed the model. To make it easier to read, I'm going to use select to give us just the columns we need to see and limit our results to Big Ten teams.

```{r}
residualmodel |> filter(Conference == 'Big Ten') |> arrange(desc(residuals)) |> select(Date, Team, Opponent, W_L, differential, FGPctMargin, predicted, residuals)
```

So looking at this table, what you see here are the teams who scored more than their FG percentage margin would indicate. One of them should jump off the page at you.

Look at that Maryland-Northwestern game from 2020. The Wildcats shot better than the Terps, but the model predicted Northwestern would win by 17 points. Instead, Maryland **won by 11**!

But, before we can bestow any validity on this model, we need to see if this linear model is appropriate. We've done that some looking at our p-values and R-squared values. But one more check is to look at the residuals themselves. We do that by plotting the residuals with the predictor. We'll get into plotting soon, but for now just seeing it is enough.

```{r}
#| echo: false
ggplot(residualmodel, aes(x=FGPctMargin, y=residuals)) + geom_point()
```

The lack of a shape here -- the seemingly random nature -- is a good sign that a linear model works for our data. If there was a pattern, that would indicate something else was going on in our data and we needed a different model.

Another way to view your residuals is by connecting the predicted value with the actual value.

```{r}
#| echo: false
ggplot(data=residualmodel, aes(x=FGPctMargin, y=differential)) + geom_point() + geom_segment(aes(xend = FGPctMargin, yend = predicted)) + geom_smooth(method=lm, se=FALSE)
```

The blue line here separates underperformers from overperformers.

## Fouls

Now let's look at it where it doesn't work as well: the total number of fouls

```{r}
fouls <- logs |> 
  mutate(
    differential = TeamScore - OpponentScore, 
    TotalFouls = TeamPersonalFouls+OpponentPersonalFouls
  )
```

```{r}
pfit <- lm(differential ~ TotalFouls, data = fouls)
summary(pfit)
```

So from top to bottom:

-   Our min and max go from -94 to positive 107
-   Our adjusted R-squared is ... 0.000986. Not much at all.
-   Our p-value is ... is less than than .05, so that's something.

So what we can say about this model is that it's statistically significant, but doesn't really explain much. It's not meaningless, but on its own the total number of fouls doesn't go very far in explaining the point differential. Normally, we'd stop right here -- why bother going forward with a predictive model that isn't terribly predictive? But let's do it anyway. Oh, and see that "(65 observations deleted due to missingness)" bit? That means we need to lose some incomplete data again.

```{r}
fouls <- fouls |> filter(!is.na(TotalFouls))
fouls$predicted <- predict(pfit)
fouls$residuals <- residuals(pfit)
```

```{r}
fouls |> arrange(desc(residuals)) |> select(Team, Opponent, W_L, TeamScore, OpponentScore, TotalFouls, residuals)
```

First, note all of the biggest misses here are all blowout games. The worst games of the season, the worst being Bryant vs. Thomas. The model missed that differential by ... 107 points. The margin of victory? 108 points. In other words, this model is not great! But let's look at it anyway.

```{r}
#| echo: false
ggplot(fouls, aes(x=TotalFouls, y=residuals)) + geom_point()
```

Well ... it actually says that a linear model is appropriate. Which an important lesson -- just because your residual plot says a linear model works here, that doesn't say your linear model is good. There are other measures for that, and you need to use them.

Here's the segment plot of residuals -- you'll see some really long lines. That's a bad sign. Another bad sign? A flat fit line. It means there's no relationship between these two things. Which we already know.

```{r}
#| echo: false
ggplot(data=fouls, aes(x=TotalFouls, y=differential)) + geom_point() + geom_segment(aes(xend = TotalFouls, yend = predicted)) + geom_smooth(method=lm, se=FALSE)
```
