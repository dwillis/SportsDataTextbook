[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sports Data Analysis and Visualization",
    "section": "",
    "text": "Why do teams struggle? There are lots of potential reasons: injuries, athletes in the wrong position, poor execution. Or it could be external factors: well-prepared opponents, the weather, the altitude or, of course, the refs.\nYou could turn the question around: why do teams succeed? Again, there are plenty of possibilities that get tossed around on talk radio, on the sports pages and across social media. A lot of hot takes.\nThe more fundamental question that this course will empower you to answer is this: what do teams and athletes do? Using data, you’ll learn to ask questions and visualize the answers, ranging across sports and scenarios. What did the 2021-22 Maryland men’s lacrosse team do well en route to the national championship? How has the transfer portal (and additional eligibility) changed the nature of programs? In football, do penalties have any relationship on scoring?\nTo get into these and other questions, we’ll use a lot of different tools and techniques, but this class rests on three pillars:\n\nSimple, easy to understand statistics …\n… extracted using simple code …\n… visualized simply to reveal new and interesting things in sports.\n\nDo you need to be a math whiz to read this book? No. I’m not one either. What we’re going to look at is pretty basic, but that’s also why it’s so powerful.\nDo you need to be a computer science major to write code? Nope. I’m not one of those either. But anyone can think logically, and write simple code that is repeatable and replicable.\nDo you need to be an artist to create compelling visuals? I think you see where this is going. No. I can barely draw stick figures, but I’ve been paid to make graphics in my career. With a little graphic design know how, you can create publication worthy graphics with code.\n\n\nThis book is all in the R statistical language. To follow along, you’ll do the following:\n\nInstall the R language on your computer. Go to the R Project website, click download R and select a mirror closest to your location. Then download the version for your computer.\nInstall R Studio Desktop. The free version is great.\n\nGoing forward, you’ll see passages like this:\n\ninstall.packages(\"tidyverse\")\n\nDon’t do it now, but that is code that you’ll need to run in your R Studio. When you see that, you’ll know what to do.\n\n\n\nThis book is the collection of class materials for the Fall 2022 JOUR479X course in the Philip Merrill College of Journalism at the University of Maryland. There’s some things you should know about it:\n\nIt is free for students.\nThe topics will remain the same but the text is going to be constantly tinkered with.\nWhat is the work of the author is copyright Derek Willis 2022 & Matt Waite 2019.\nThe text is Attribution-NonCommercial-ShareAlike 4.0 International Creative Commons licensed. That means you can share it and change it, but only if you share your changes with the same license and it cannot be used for commercial purposes. I’m not making money on this so you can’t either.\nAs such, the whole book – authored in Quarto – is open sourced on Github. Pull requests welcomed!"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  The very basics",
    "section": "",
    "text": "R is a programming language, one specifically geared toward statistical analysis. Like all programming languages, it has certain built-in functions and you can interact with it in multiple ways. The first, and most basic, is the console.\nThink of the console like talking directly to R. It’s direct, but it has some drawbacks and some quirks we’ll get into later. For now, try typing this into the console and hit enter:\nCongrats, you’ve run some code. It’s not very complex, and you knew the answer before hand, but you get the idea. We can compute things. We can also store things. In programming languages, these are called variables. We can assign things to variables using <-. And then we can do things with them. The <- is a called an assignment operator.\nNow assign a different number to the variable number. Try running number * number again. Get what you expected?\nWe can have as many variables as we can name. We can even reuse them (but be careful you know you’re doing that or you’ll introduce errors). Try this in your console.\nWe can store anything in a variable. A whole table. An array of numbers. Every college basketball game played in the last 10 years. A single word. A whole book. All the books of the 18th century. They’re really powerful. We’ll explore them at length."
  },
  {
    "objectID": "intro.html#adding-libraries-part-1",
    "href": "intro.html#adding-libraries-part-1",
    "title": "2  The very basics",
    "section": "2.1 Adding libraries, part 1",
    "text": "2.1 Adding libraries, part 1\nThe real strength of any given programming language is the external libraries that power it. The base language can do a lot, but it’s the external libraries that solve many specific problems – even making the base language easier to use.\nFor this class, we’re going to need several external libraries.\nThe first library we’re going to use is called Swirl. So in the console, type install.packages('swirl') and hit enter. That installs swirl.\nNow, to use the library, type library(swirl) and hit enter. That loads swirl. Then type swirl() and hit enter. Now you’re running swirl. Follow the directions on the screen. When you are asked, you want to install course 1 R Programming: The basics of programming in R. Then, when asked, you want to do option 1, R Programming, in that course.\nWhen you are finished with the course – it will take just a few minutes – it will first ask you if you want credit on Coursera. You do not. Then type 0 to exit (it will not be very clear that’s what you do when you are done)."
  },
  {
    "objectID": "intro.html#adding-libraries-part-2",
    "href": "intro.html#adding-libraries-part-2",
    "title": "2  The very basics",
    "section": "2.2 Adding libraries, part 2",
    "text": "2.2 Adding libraries, part 2\nWe’ll mostly use two libraries for analysis – dplyr and ggplot2. To get them, and several other useful libraries, we can install a single collection of libraries called the tidyverse. Type this into your console: install.packages('tidyverse')\nNOTE: This is a pattern. You should always install libraries in the console.\nThen, to help us with learning and replication, we’re going to use R Notebooks. So we need to install that library. Type this into your console: install.packages('rmarkdown')"
  },
  {
    "objectID": "intro.html#notebooks",
    "href": "intro.html#notebooks",
    "title": "2  The very basics",
    "section": "2.3 Notebooks",
    "text": "2.3 Notebooks\nFor the rest of the class, we’re going to be working in notebooks. In notebooks, you will both run your code and explain each step, much as I am doing here.\nTo start a notebook, you click on the green plus in the top left corner and go down to R Notebook. Do that now.\n\n\n\n\n\nYou will see that the notebook adds a lot of text for you. It tells you how to work in notebooks – and you should read it. The most important parts are these:\nTo add text, simply type. To add code you can click on the Insert button on the toolbar or by pressing Cmd+Option+I on Mac or Ctl+Alt+I on Windows.\nHighlight all that text and delete it. You should have a blank document. This document is called a R Markdown file – it’s a special form of text, one that you can style, and one you can include R in the middle of it. Markdown is a simple markup format that you can use to create documents. So first things first, let’s give our notebook a big headline. Add this:\n# My awesome notebook\nNow, under that, without any markup, just type This is my awesome notebook.\nUnder that, you can make text bold by writing It is **really** awesome.\nIf you want it italics, just do this on the next line: No, it's _really_ awesome. I swear.\nTo see what it looks like without the markup, click the Preview or Knit button in the toolbar. That will turn your notebook into a webpage, with the formatting included.\nThroughout this book, we’re going to use this markdown to explain what we are doing and, more importantly, why we are doing it. Explaining your thinking is a vital part of understanding what you are doing.\nThat explaination, plus the code, is the real power of notebooks. To add a block of code, follow the instructions from above: click on the Insert button on the toolbar or by pressing Cmd+Option+I on Mac or Ctl+Alt+I on Windows.\nIn that window, use some of the code from above and add two numbers together. To see it run, click the green triangle on the right. That runs the chunk. You should see the answer to your addition problem.\nAnd that, just that, is the foundation you need to start this book."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "3  Data, structures and types",
    "section": "",
    "text": "Data are everywhere (and data is plural of datum, thus the use of are in that statement). It surrounds you. Every time you use your phone, you are creating data. Lots of it. Your online life. Any time you buy something. It’s everywhere. Sports, like life, is no different. Sports is drowning in data, and more comes along all the time.\nIn sports, and in this class, we’ll be dealing largely with two kinds of data: event level data and summary data. It’s not hard to envision event level data in sports. A pitch in baseball. A hit. A play in football. A pass in soccer. They are the events that make up the game. Combine them together – summarize them – and you’ll have some notion of how the game went. What we usually see is summary data – who wants to scroll through 50 pitches to find out a player went 2-3 with a double and an RBI? Who wants to scroll through hundreds of pitches to figure out the Rays beat the Yankees?\nTo start with, we need to understand the shape of data."
  },
  {
    "objectID": "data.html#rows-and-columns",
    "href": "data.html#rows-and-columns",
    "title": "3  Data, structures and types",
    "section": "3.1 Rows and columns",
    "text": "3.1 Rows and columns\nData, oversimplifying it a bit, is information organized. Generally speaking, it’s organized into rows and columns. Rows, generally, are individual elements. A team. A player. A game. Columns, generally, are components of the data, sometimes called variables. So if each row is a player, the first column might be their name. The second is their position. The third is their batting average. And so on.\n\n\n\n\n\nOne of the critical components of data analysis, especially for beginners, is having a mental picture of your data. What does each row mean? What does each column in each row signify? How many rows do you have? How many columns?"
  },
  {
    "objectID": "data.html#types",
    "href": "data.html#types",
    "title": "3  Data, structures and types",
    "section": "3.2 Types",
    "text": "3.2 Types\nThere are scores of data types in the world, and R has them. In this class, we’re primarily going to be dealing with data frames, and each element of our data frames will have a data type.\nTypically, they’ll be one of four types of data:\n\nNumeric: a number, like the number of touchdown passes in a season or a batting average.\nCharacter: Text, like a name, a team, a conference.\nDate: Fully formed dates – 2019-01-01 – have a special date type. Elements of a date, like a year (ex. 2019) are not technically dates, so they’ll appear as numeric data types.\nLogical: Rare, but every now and then we’ll have a data type that’s Yes or No, True or False, etc.\n\nQuestion: Is a zip code a number? Is a jersey number a number? Trick question, because the answer is no. Numbers are things we do math on. If the thing you want is not something you’re going to do math on – can you add two phone numbers together? – then make it a character type. If you don’t, most every software system on the planet will drop leading zeros. For example, every zip code in Boston starts with 0. If you record that as a number, your zip code will become a four digit number, which isn’t a zip code anymore."
  },
  {
    "objectID": "data.html#a-simple-way-to-get-data",
    "href": "data.html#a-simple-way-to-get-data",
    "title": "3  Data, structures and types",
    "section": "3.3 A simple way to get data",
    "text": "3.3 A simple way to get data\nOne good thing about sports is that there’s lots of interest in it. And that means there’s outlets that put sports data on the internet. Now I’m going to show you a trick to getting it easily.\nThe site sports-reference.com takes NCAA (and other league) stats and puts them online. For instance, here’s their page on Maryland’s men’s basketball’s game logs, which you should open now.\nNow, in a new tab, log into Google Docs/Drive and open a new spreadsheet. In the first cell of the first row, copy and paste this formula in:\n=IMPORTHTML(\"https://www.sports-reference.com/cbb/schools/maryland/2022-gamelogs.html\", \"table\", 1)\nIf it worked right, you’ve got the data from that page in a spreadsheet."
  },
  {
    "objectID": "data.html#cleaning-the-data",
    "href": "data.html#cleaning-the-data",
    "title": "3  Data, structures and types",
    "section": "3.4 Cleaning the data",
    "text": "3.4 Cleaning the data\nThe first thing we need to do is recognize that we don’t have data, really. We have the results of a formula. You can tell by putting your cursor on that field, where you’ll see the formula again. This is where you’d look:\n\n\n\n\n\nThe solution is easy:\nEdit > Select All or type command/control A Edit > Copy or type command/control c Edit > Paste Special > Values Only or type command/control shift v\nYou can verify that it worked by looking in that same row 1 column A, where you’ll see the formula is gone.\n\n\n\n\n\nNow you have data, but your headers are all wrong. You want your headers to be one line – not two, like they have. And the header names repeat – first for our team, then for theirs. So you have to change each header name to be UsORB or TeamORB and OpponentORB instead of just ORB.\nAfter you’ve done that, note we have repeating headers. There’s two ways to deal with that – you could just hightlight it and go up to Edit > Delete Rows XX-XX depending on what rows you highlighted. That’s the easy way with our data.\nBut what if you had hundreds of repeating headers like that? Deleting them would take a long time.\nYou can use sorting to get rid of anything that’s not data. So click on Data > Sort Range. You’ll want to check the “Data has header row” field. Then hit Sort.\n\n\n\n\n\nNow all you need to do is search through the data for where your junk data – extra headers, blanks, etc. – got sorted and delete it. After you’ve done that, you can export it for use in R. Go to File > Download as > Comma Separated Values. Remember to put it in the same directory as your R Notebook file so you can import the data easily."
  },
  {
    "objectID": "aggregates.html",
    "href": "aggregates.html",
    "title": "4  Aggregates",
    "section": "",
    "text": "R is a statistical programming language that is purpose built for data analysis.\nBase R does a lot, but there are a mountain of external libraries that do things to make R better/easier/more fully featured. We already installed the tidyverse – or you should have if you followed the instructions for the last assignment – which isn’t exactly a library, but a collection of libraries. Together, they make up the tidyverse. Individually, they are extraordinarily useful for what they do. We can load them all at once using the tidyverse name, or we can load them individually. Let’s start with individually.\nThe two libraries we are going to need for this assignment are readr and dplyr. The library readr reads different types of data in as a dataframe. For this assignment, we’re going to read in csv data or Comma Separated Values data. That’s data that has a comma between each column of data.\nThen we’re going to use dplyr to analyze it.\nTo use a library, you need to import it. Good practice – one I’m going to insist on – is that you put all your library steps at the top of your notebook.\nThat code looks like this:\nTo load them both, you need to run that code twice:\nYou can keep doing that for as many libraries as you need. I’ve seen notebooks with 10 or more library imports.\nBut the tidyverse has a neat little trick. We can load most of the libraries we’ll need for the whole semester with one line:\nFrom now on, if that’s not the first line of your notebook, you’re probably doing it wrong."
  },
  {
    "objectID": "aggregates.html#basic-data-analysis-group-by-and-count",
    "href": "aggregates.html#basic-data-analysis-group-by-and-count",
    "title": "4  Aggregates",
    "section": "4.1 Basic data analysis: Group By and Count",
    "text": "4.1 Basic data analysis: Group By and Count\nThe first thing we need to do is get some data to work with. We do that by reading it in. In our case, we’re going to read data from a csv file – a comma-separated values file.\nThe CSV file we’re going to read from is a Basketball Reference page of advanced metrics for NBA players this past season. The Sports Reference sites are a godsend of data, a trove of stuff, and we’re going to use it a lot in this class.\nFor this walkthrough:\n   Download csv file\n\nSo step 2, after setting up our libraries, is most often going to be importing data. In order to analyze data, we need data, so it stands to reason that this would be something we’d do very early.\nThe code looks something like this, but hold off copying it just yet:\nnbaplayers <- read_csv(\"~/SportsData/nbaadvancedplayers2122.csv\")\nLet’s unpack that.\nThe first part – nbaplayers – is the name of your variable. A variable is just a name of a thing that stores stuff. In this case, our variable is a data frame, which is R’s way of storing data (technically it’s a tibble, which is the tidyverse way of storing data, but the differences aren’t important and people use them interchangeably). We can call this whatever we want. I always want to name data frames after what is in it. In this case, we’re going to import a dataset of NBA players. Variable names, by convention are one word all lower case. You can end a variable with a number, but you can’t start one with a number.\nThe <- bit is the variable assignment operator. It’s how we know we’re assigning something to a word. Think of the arrow as saying “Take everything on the right of this arrow and stuff it into the thing on the left.” So we’re creating an empty vessel called nbaplayers and stuffing all this data into it.\nThe read_csv bits are pretty obvious, except for one thing. What happens in the quote marks is the path to the data. In there, I have to tell R where it will find the data. The easiest thing to do, if you are confused about how to find your data, is to put your data in the same folder as as your notebook (you’ll have to save that notebook first). If you do that, then you just need to put the name of the file in there (nbaadvancedplayers2122.csv). In my case, in my home directory (that’s the ~ part), there is a folder called SportsData that has the file called nbaadvancedplayers2122.csv in it. Some people – insane people – leave the data in their downloads folder. The data path then would be ~/Downloads/nameofthedatafilehere.csv on PC or Mac.\nWhat you put in there will be different from mine. So your first task is to import the data.\n\nnbaplayers <- read_csv(\"data/nbaadvancedplayers2122.csv\")\n\nNew names:\nRows: 812 Columns: 29\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): Player, Pos, Tm dbl (24): Rk, Age, G, MP, PER, TS%, 3PAr, FTr, ORB%, DRB%,\nTRB%, AST%, STL%,... lgl (2): ...20, ...25\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...20`\n• `` -> `...25`\n\n\nNow we can inspect the data we imported. What does it look like? To do that, we use head(nbaplayers) to show the headers and the first six rows of data. If we wanted to see them all, we could just simply enter nbaplayers and run it.\nTo get the number of records in our dataset, we run nrow(nbaplayers)\n\nhead(nbaplayers)\n\n# A tibble: 6 × 29\n     Rk Player     Pos     Age Tm        G    MP   PER `TS%` `3PAr`   FTr `ORB%`\n  <dbl> <chr>      <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>\n1     1 Precious … C        22 TOR      73  1725  12.7 0.503  0.259 0.217    8.7\n2     2 Steven Ad… C        28 MEM      76  1999  17.6 0.56   0.003 0.518   17.9\n3     3 Bam Adeba… C        24 MIA      56  1825  21.8 0.608  0.008 0.466    8.7\n4     4 Santi Ald… PF       21 MEM      32   360  10.2 0.452  0.364 0.242    9.4\n5     5 LaMarcus … C        36 BRK      47  1050  19.6 0.604  0.1   0.223    7.8\n6     6 Nickeil A… SG       23 TOT      65  1466  10.5 0.475  0.497 0.16     2.7\n# … with 17 more variables: `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>,\n#   `STL%` <dbl>, `BLK%` <dbl>, `TOV%` <dbl>, `USG%` <dbl>, ...20 <lgl>,\n#   OWS <dbl>, DWS <dbl>, WS <dbl>, `WS/48` <dbl>, ...25 <lgl>, OBPM <dbl>,\n#   DBPM <dbl>, BPM <dbl>, VORP <dbl>\n\n\n\nnrow(nbaplayers)\n\n[1] 812\n\n\nAnother way to look at nrow – we have 812 players from this season in our dataset.\nWhat if we wanted to know how many players there were by position? To do that by hand, we’d have to take each of the 651 records and sort them into a pile. We’d put them in groups and then count them.\ndplyr has a group by function in it that does just this. A massive amount of data analysis involves grouping like things together at some point. So it’s a good place to start.\nSo to do this, we’ll take our dataset and we’ll introduce a new operator: %>%. The best way to read that operator, in my opinion, is to interpret that as “and then do this.”\nAfter we group them together, we need to count them. We do that first by saying we want to summarize our data (a count is a part of a summary). To get a summary, we have to tell it what we want. So in this case, we want a count. To get that, let’s create a thing called total and set it equal to n(), which is dplyrs way of counting something.\nHere’s the code:\n\nnbaplayers %>%\n  group_by(Pos) %>%\n  summarise(\n    total = n()\n  )\n\n# A tibble: 11 × 2\n   Pos   total\n   <chr> <int>\n 1 C       130\n 2 C-PF      2\n 3 PF      152\n 4 PF-SF     1\n 5 PG      156\n 6 PG-SG     1\n 7 SF      157\n 8 SF-SG     5\n 9 SG      199\n10 SG-PG     4\n11 SG-SF     5\n\n\nSo let’s walk through that. We start with our dataset – nbaplayers – and then we tell it to group the data by a given field in the data which we get by looking at either the output of head or you can look in the environment where you’ll see nbaplayers.\nIn this case, we wanted to group together positions, signified by the field name Pos. After we group the data, we need to count them up. In dplyr, we use summarize which can do more than just count things. Inside the parentheses in summarize, we set up the summaries we want. In this case, we just want a count of the positions: total = n(), says create a new field, called total and set it equal to n(), which might look weird, but it’s common in stats. The number of things in a dataset? Statisticians call in n. There are n number of players in this dataset. So n() is a function that counts the number of things there are.\nAnd when we run that, we get a list of positions with a count next to them. But it’s not in any order. So we’ll add another And Then Do This %>% and use arrange. Arrange does what you think it does – it arranges data in order. By default, it’s in ascending order – smallest to largest. But if we want to know the county with the most mountain lion sightings, we need to sort it in descending order. That looks like this:\n\nnbaplayers %>%\n  group_by(Pos) %>%\n  summarise(\n    total = n()\n  ) %>% arrange(desc(total))\n\n# A tibble: 11 × 2\n   Pos   total\n   <chr> <int>\n 1 SG      199\n 2 SF      157\n 3 PG      156\n 4 PF      152\n 5 C       130\n 6 SF-SG     5\n 7 SG-SF     5\n 8 SG-PG     4\n 9 C-PF      2\n10 PF-SF     1\n11 PG-SG     1\n\n\nSo the most common position in the NBA? Shooting guard, followed by small forward (although it’s close between SF and point guard).\nWe can, if we want, group by more than one thing. Which team has the most of a single position? To do that, we can group by the team – called Tm in the data – and position, or Pos in the data:\n\nnbaplayers %>%\n  group_by(Tm, Pos) %>%\n  summarise(\n    total = n()\n  ) %>% arrange(desc(total))\n\n`summarise()` has grouped output by 'Tm'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 161 × 3\n# Groups:   Tm [31]\n   Tm    Pos   total\n   <chr> <chr> <int>\n 1 TOT   PF       18\n 2 TOT   SG       18\n 3 TOT   PG       17\n 4 TOT   SF       14\n 5 TOT   C        12\n 6 BOS   SG        9\n 7 DAL   PG        9\n 8 LAC   SG        9\n 9 POR   SF        9\n10 SAS   SG        9\n# … with 151 more rows\n\n\nSo wait, what team is TOT?\nValuable lesson: whoever collects the data has opinions on how to solve problems. In this case, Basketball Reference, when a player get’s traded, records stats for the player’s first team, their second team, and a combined season total for a team called TOT, meaning Total. Is there a team abbreviated TOT? No. So ignore them here.\nBoston has 8 shooting guards. Dallas has 9 point guards? You can learn a bit about how a team is assembled by looking at these simple counts."
  },
  {
    "objectID": "aggregates.html#other-aggregates-mean-and-median",
    "href": "aggregates.html#other-aggregates-mean-and-median",
    "title": "4  Aggregates",
    "section": "4.2 Other aggregates: Mean and median",
    "text": "4.2 Other aggregates: Mean and median\nIn the last example, we grouped some data together and counted it up, but there’s so much more you can do. You can do multiple measures in a single step as well.\nSticking with our NBA player data, we can calculate any number of measures inside summarize. Here, we’ll use R’s built in mean and median functions to calculate … well, you get the idea.\nLet’s look just a the number of minutes each position gets.\n\nnbaplayers %>%\n  group_by(Pos) %>%\n  summarise(\n    count = n(),\n    mean_minutes = mean(MP),\n    median_minutes = median(MP)\n  )\n\n# A tibble: 11 × 4\n   Pos   count mean_minutes median_minutes\n   <chr> <int>        <dbl>          <dbl>\n 1 C       130         835.           616 \n 2 C-PF      2        1506.          1506.\n 3 PF      152         842.           502.\n 4 PF-SF     1        1940           1940 \n 5 PG      156         815.           543 \n 6 PG-SG     1        2419           2419 \n 7 SF      157         775.           491 \n 8 SF-SG     5        1074.           935 \n 9 SG      199         821.           665 \n10 SG-PG     4        1350.          1340.\n11 SG-SF     5         654.           434 \n\n\nSo there’s 812 players in the data. Let’s look at shooting guards. The average shooting guard plays 820 minutes and the median is 665 minutes.\nWhy?\nLet’s let sort help us.\n\nnbaplayers %>% arrange(desc(MP))\n\n# A tibble: 812 × 29\n      Rk Player    Pos     Age Tm        G    MP   PER `TS%` `3PAr`   FTr `ORB%`\n   <dbl> <chr>     <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>\n 1    66 Mikal Br… SF       25 PHO      82  2854  14.4 0.627  0.364 0.183    2.9\n 2    67 Miles Br… PF       23 CHO      80  2837  17.9 0.593  0.383 0.274    3.3\n 3   134 DeMar De… PF       32 CHI      76  2743  23.1 0.59   0.093 0.386    2.3\n 4   526 Jayson T… SF       23 BOS      76  2731  21.8 0.578  0.416 0.3      3.5\n 5    47 Saddiq B… SF       22 DET      82  2704  14   0.529  0.537 0.224    4.1\n 6   214 Tyrese H… SG-PG    21 TOT      77  2695  18.2 0.595  0.428 0.209    2.5\n 7   576 Russell … PG       33 LAL      78  2678  15   0.512  0.215 0.324    4.4\n 8   602 Trae You… PG       23 ATL      76  2652  25.4 0.603  0.395 0.358    2.1\n 9   358 Tyrese M… PG       21 PHI      75  2650  16.2 0.594  0.311 0.247    1.1\n10   168 Dorian F… PF       28 DAL      80  2644  12.5 0.604  0.629 0.12     5.1\n# … with 802 more rows, and 17 more variables: `DRB%` <dbl>, `TRB%` <dbl>,\n#   `AST%` <dbl>, `STL%` <dbl>, `BLK%` <dbl>, `TOV%` <dbl>, `USG%` <dbl>,\n#   ...20 <lgl>, OWS <dbl>, DWS <dbl>, WS <dbl>, `WS/48` <dbl>, ...25 <lgl>,\n#   OBPM <dbl>, DBPM <dbl>, BPM <dbl>, VORP <dbl>\n\n\nThe player with the most minutes on the floor is a small forward. So that means there’s Mikal Bridges rolling up 2,854 minutes in a season, and then there’s Boston sensation Justin Jackson. Never heard of Justin Jackson? Might be because he logged two minutes in one game this season.\nThat’s a huge difference.\nSo when choosing a measure of the middle, you have to ask yourself – could I have extremes? Because a median won’t be sensitive to extremes. It will be the point at which half the numbers are above and half are below. The average or mean will be a measure of the middle, but if you have a bunch of pine riders and then one ironman superstar, the average will be wildly skewed."
  },
  {
    "objectID": "aggregates.html#even-more-aggregates",
    "href": "aggregates.html#even-more-aggregates",
    "title": "4  Aggregates",
    "section": "4.3 Even more aggregates",
    "text": "4.3 Even more aggregates\nThere’s a ton of things we can do in summarize – we’ll work with more of them as the course progresses – but here’s a few other questions you can ask.\nWhich position in the NBA plays the most minutes? And what is the highest and lowest minute total for that position? And how wide is the spread between minutes? We can find that with sum to add up the minutes to get the total minutes, min to find the minimum minutes, max to find the maximum minutes and sd to find the standard deviation in the numbers.\n\nnbaplayers %>% \n  group_by(Pos) %>% \n  summarise(\n    total = sum(MP), \n    avgminutes = mean(MP), \n    minminutes = min(MP),\n    maxminutes = max(MP),\n    stdev = sd(MP)) %>% arrange(desc(total))\n\n# A tibble: 11 × 6\n   Pos    total avgminutes minminutes maxminutes stdev\n   <chr>  <dbl>      <dbl>      <dbl>      <dbl> <dbl>\n 1 SG    163361       821.          1       2499  766.\n 2 PF    127917       842.          1       2837  793.\n 3 PG    127159       815.          1       2678  801.\n 4 SF    121695       775.          2       2854  779.\n 5 C     108505       835.          2       2476  721.\n 6 SG-PG   5401      1350.         25       2695 1163.\n 7 SF-SG   5371      1074.        212       2057  709.\n 8 SG-SF   3272       654.        104       1791  697.\n 9 C-PF    3013      1506.        877       2136  890.\n10 PG-SG   2419      2419        2419       2419   NA \n11 PF-SF   1940      1940        1940       1940   NA \n\n\nSo again, no surprise, shooting guards spend the most minutes on the floor in the NBA. They average 820 minutes, but we noted why that’s trouble. The minimum is a one-minute wonder, max is some team failing at load management, and the standard deviation is a measure of how spread out the data is. In this case, not the highest spread among positions, but pretty high. So you know you’ve got some huge minutes players and a bunch of bench players."
  },
  {
    "objectID": "mutating.html",
    "href": "mutating.html",
    "title": "5  Mutating data",
    "section": "",
    "text": "One of the most common data analysis techniques is to look at change over time. The most common way of comparing change over time is through percent change. The math behind calculating percent change is very simple, and you should know it off the top of your head. The easy way to remember it is:\n(new - old) / old\nOr new minus old divided by old. Your new number minus the old number, the result of which is divided by the old number. To do that in R, we can use dplyr and mutate to calculate new metrics in a new field using existing fields of data.\nSo first we’ll import the tidyverse so we can read in our data and begin to work with it.\nNow you’ll need a common and simple dataset of total attendance at NCAA football games over the last few seasons.\nYou’ll import it something like this.\nIf you want to see the first six rows – handy to take a peek at your data – you can use the function head.\nThe code to calculate percent change is pretty simple. Remember, with summarize, we used n() to count things. With mutate, we use very similar syntax to calculate a new value using other values in our dataset. So in this case, we’re trying to do (new-old)/old, but we’re doing it with fields. If we look at what we got when we did head, you’ll see there’s `2019` as the new data, and we’ll use `2018` as the old data. So we’re looking at one year. Then, to help us, we’ll use arrange again to sort it, so we get the fastest growing school over one year.\nWhat do we see right away? Do those numbers look like we expect them to? No. They’re a decimal expressed as a percentage. So let’s fix that by multiplying by 100.\nNow, does this ordering do anything for us? No. Let’s fix that with arrange.\nSo who had the most growth in 2019 compared to the year before? Kansas."
  },
  {
    "objectID": "mutating.html#a-more-complex-example",
    "href": "mutating.html#a-more-complex-example",
    "title": "5  Mutating data",
    "section": "5.1 A more complex example",
    "text": "5.1 A more complex example\nThere’s metric in basketball that’s easy to understand – shooting percentage. It’s the number of shots made divided by the number of shots attempted. Simple, right? Except it’s a little too simple. Because what about three point shooters? They tend to be more vailable because the three point shot is worth more. What about players who get to the line? In shooting percentage, free throws are nowhere to be found.\nBasketball nerds, because of these weaknesses, have created a new metric called True Shooting Percentage. True shooting percentage takes into account all aspects of a players shooting to determine who the real shooters are.\nUsing dplyr and mutate, we can calculate true shooting percentage. So let’s look at a new dataset, one of every college basketball player’s season stats in 2021-22 season. It’s a dataset of 5,688 players, and we’ve got 59 variables – one of them is True Shooting Percentage, but we’re going to ignore that.\nFor this walkthrough:\n   Download csv file\n\nImport it like this:\n\nplayers <- read_csv(\"data/players22.csv\")\n\nRows: 5688 Columns: 59\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): Team, Player, Class, Pos, Height, Hometown, High School, Summary, ...\ndbl (49): #, Weight, Rk.x, G, GS, MP, FG, FGA, FG%, 2P, 2PA, 2P%, 3P, 3PA, 3...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe basic true shooting percentage formula is (Points / (2*(FieldGoalAttempts + (.44 * FreeThrowAttempts)))) * 100. Let’s talk that through. Points divided by a lot. It’s really field goal attempts plus 44 percent of the free throw attempts. Why? Because that’s about what a free throw is worth, compared to other ways to score. After adding those things together, you double it. And after you divide points by that number, you multiply the whole lot by 100.\nIn our data, we need to be able to find the fields so we can complete the formula. To do that, one way is to use the Environment tab in R Studio. In the Environment tab is a listing of all the data you’ve imported, and if you click the triangle next to it, it’ll list all the field names, giving you a bit of information about each one.\n\n\n\n\n\nSo what does True Shooting Percentage look like in code?\nLet’s think about this differently. Who had the best true shooting season last year?\n\nplayers %>%\n  mutate(trueshooting = (PTS/(2*(FGA + (.44*FTA))))*100) %>%\n  arrange(desc(trueshooting))\n\n# A tibble: 5,688 × 60\n   Team     Player   `#` Class Pos   Height Weight Homet…¹ High …² Summary  Rk.x\n   <chr>    <chr>  <dbl> <chr> <chr> <chr>   <dbl> <chr>   <chr>   <chr>   <dbl>\n 1 Washing… Noah …    32 JR    G     6-3       185 Seattl… Garfie… 0.6 Pt…    13\n 2 Troy Tr… DJ Ro…    34 FR    G     6-1       160 Monroe… Oakman… 1.0 Pt…    17\n 3 Syracus… Arthu…    33 SO    G     6-3       185 Wallin… Sheeha… 0.8 Pt…    13\n 4 Stony B… Prest…    12 <NA>  G     6-4       205 Syracu… Jamesv… 3.0 Pt…    14\n 5 USC Tro… Amar …    55 SR    G     5-7       150 Long B… Fremon… 3.0 Pt…    13\n 6 South C… Ford …    44 JR    G     6-3       183 Charlo… United… 3.0 Pt…    16\n 7 UNC Gre… Jevon…    15 <NA>  G     6-3       170 Durham… <NA>    1.0 Pt…    13\n 8 New Mex… Safi …     2 <NA>  G     5-11      165 Las Cr… <NA>    3.0 Pt…    15\n 9 New Mex… Camer…    20 <NA>  G     6-1       165 Kirtla… Kirtla… 0.8 Pt…    15\n10 Mercer … John …    15 SO    F     6-6       210 Atlant… Marist… 1.5 Pt…    14\n# … with 5,678 more rows, 49 more variables: G <dbl>, GS <dbl>, MP <dbl>,\n#   FG <dbl>, FGA <dbl>, `FG%` <dbl>, `2P` <dbl>, `2PA` <dbl>, `2P%` <dbl>,\n#   `3P` <dbl>, `3PA` <dbl>, `3P%` <dbl>, FT <dbl>, FTA <dbl>, `FT%` <dbl>,\n#   ORB <dbl>, DRB <dbl>, TRB <dbl>, AST <dbl>, STL <dbl>, BLK <dbl>,\n#   TOV <dbl>, PF <dbl>, PTS <dbl>, Rk.y <dbl>, PER <dbl>, `TS%` <dbl>,\n#   `eFG%` <dbl>, `3PAr` <dbl>, FTr <dbl>, PProd <dbl>, `ORB%` <dbl>,\n#   `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>, `STL%` <dbl>, `BLK%` <dbl>, …\n\n\nYou’ll be forgiven if you did not hear about USC’s shooting sensation Amar Ross. He played in one game, took one shot and actually hit it. It happened to be a three pointer, which is one more three pointer than I’ve hit in college basketball. So props to him. Does that mean he had the best true shooting season in college basketball in the 2021-22 season?\nNot hardly.\nWe’ll talk about how to narrow the pile and filter out data in the next chapter."
  },
  {
    "objectID": "filtering.html",
    "href": "filtering.html",
    "title": "6  Filters and selections",
    "section": "",
    "text": "More often than not, we have more data than we want. Sometimes we need to be rid of that data. In dplyr, there’s two ways to go about this: filtering and selecting.\nFiltering creates a subset of the data based on criteria. All records where the count is greater than 10. All records that match “Maryland”. Something like that.\nSelecting simply returns only the fields named. So if you only want to see School and Attendance, you select those fields. When you look at your data again, you’ll have two columns. If you try to use one of your columns that you had before you used select, you’ll get an error.\nLet’s work with our football attendance data to show some examples.\nFirst we’ll need the tidyverse.\nNow import the data.\nSo, first things first, let’s say we don’t care about all this Air Force, Akron, Alabama crap and just want to see Dear Old Maryland We do that with filter and then we pass it a condition.\nBefore we do that, a note about conditions. Most of the conditional operators you’ll understand – greater than and less than are > and <. The tough one to remember is equal to. In conditional statements, equal to is == not =. If you haven’t noticed, = is a variable assignment operator, not a conditional statement. So equal is == and NOT equal is !=.\nSo if you want to see Institutions equal to Maryland, you do this:\nOr if we want to see schools that had more than half a million people buy tickets to a football game in a season, we do the following. NOTE THE BACKTICKS.\nBut what if we want to see all of the Power Five conferences? We could use conditional logic in our filter. The conditional logic operators are | for OR and & for AND. NOTE: AND means all conditions have to be met. OR means any of the conditions work. So be careful about boolean logic.\nBut that’s a lot of repetitive code. And a lot of typing. And typing is the devil. So what if we could create a list and pass it into the filter? It’s pretty simple.\nWe can create a new variable – remember variables can represent just about anything – and create a list. To do that we use the c operator, which stands for concatenate. That just means take all the stuff in the parenthesis after the c and bunch it into a list.\nNote here: text is in quotes. If they were numbers, we wouldn’t need the quotes.\nNow with a list, we can use the %in% operator. It does what you think it does – it gives you data that matches things IN the list you give it."
  },
  {
    "objectID": "filtering.html#selecting-data-to-make-it-easier-to-read",
    "href": "filtering.html#selecting-data-to-make-it-easier-to-read",
    "title": "6  Filters and selections",
    "section": "6.1 Selecting data to make it easier to read",
    "text": "6.1 Selecting data to make it easier to read\nSo now we have our Power Five list. What if we just wanted to see attendance from the most recent season and ignore all the rest? Select to the rescue.\n\nattendance %>% filter(Conference %in% powerfive) %>% select(Institution, Conference, `2018`)\n\n# A tibble: 65 × 3\n   Institution    Conference `2018`\n   <chr>          <chr>       <dbl>\n 1 Alabama        SEC        710931\n 2 Arizona        Pac-12     318051\n 3 Arizona St.    Pac-12     291091\n 4 Arkansas       SEC        367748\n 5 Auburn         SEC        591236\n 6 Baylor         Big 12     248017\n 7 Boston College ACC        263363\n 8 California     Pac-12     300061\n 9 Clemson        ACC        562799\n10 Colorado       Pac-12     274852\n# … with 55 more rows\n\n\nIf you have truly massive data, Select has tools to help you select fields that start_with the same things or ends with a certain word. The documentation will guide you if you need those someday. For 90 plus percent of what we do, just naming the fields will be sufficient."
  },
  {
    "objectID": "filtering.html#using-conditional-filters-to-set-limits",
    "href": "filtering.html#using-conditional-filters-to-set-limits",
    "title": "6  Filters and selections",
    "section": "6.2 Using conditional filters to set limits",
    "text": "6.2 Using conditional filters to set limits\nLet’s return to the problem of one-hit wonders in basketball mucking up our true shooting analysis. How can we set limits in something like a question of who had the best season? Let’s grab every player from last season.\nFor this walkthrough:\n   Download csv file\n\nLet’s get set up similar to the previous chapter.\n\nplayers <- read_csv(\"data/players22.csv\")\n\nRows: 5688 Columns: 59\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): Team, Player, Class, Pos, Height, Hometown, High School, Summary, ...\ndbl (49): #, Weight, Rk.x, G, GS, MP, FG, FGA, FG%, 2P, 2PA, 2P%, 3P, 3PA, 3...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nplayers %>%\n  mutate(trueshooting = (PTS/(2*(FGA + (.44*FTA))))*100) %>%\n  arrange(desc(trueshooting))\n\n# A tibble: 5,688 × 60\n   Team     Player   `#` Class Pos   Height Weight Homet…¹ High …² Summary  Rk.x\n   <chr>    <chr>  <dbl> <chr> <chr> <chr>   <dbl> <chr>   <chr>   <chr>   <dbl>\n 1 Washing… Noah …    32 JR    G     6-3       185 Seattl… Garfie… 0.6 Pt…    13\n 2 Troy Tr… DJ Ro…    34 FR    G     6-1       160 Monroe… Oakman… 1.0 Pt…    17\n 3 Syracus… Arthu…    33 SO    G     6-3       185 Wallin… Sheeha… 0.8 Pt…    13\n 4 Stony B… Prest…    12 <NA>  G     6-4       205 Syracu… Jamesv… 3.0 Pt…    14\n 5 USC Tro… Amar …    55 SR    G     5-7       150 Long B… Fremon… 3.0 Pt…    13\n 6 South C… Ford …    44 JR    G     6-3       183 Charlo… United… 3.0 Pt…    16\n 7 UNC Gre… Jevon…    15 <NA>  G     6-3       170 Durham… <NA>    1.0 Pt…    13\n 8 New Mex… Safi …     2 <NA>  G     5-11      165 Las Cr… <NA>    3.0 Pt…    15\n 9 New Mex… Camer…    20 <NA>  G     6-1       165 Kirtla… Kirtla… 0.8 Pt…    15\n10 Mercer … John …    15 SO    F     6-6       210 Atlant… Marist… 1.5 Pt…    14\n# … with 5,678 more rows, 49 more variables: G <dbl>, GS <dbl>, MP <dbl>,\n#   FG <dbl>, FGA <dbl>, `FG%` <dbl>, `2P` <dbl>, `2PA` <dbl>, `2P%` <dbl>,\n#   `3P` <dbl>, `3PA` <dbl>, `3P%` <dbl>, FT <dbl>, FTA <dbl>, `FT%` <dbl>,\n#   ORB <dbl>, DRB <dbl>, TRB <dbl>, AST <dbl>, STL <dbl>, BLK <dbl>,\n#   TOV <dbl>, PF <dbl>, PTS <dbl>, Rk.y <dbl>, PER <dbl>, `TS%` <dbl>,\n#   `eFG%` <dbl>, `3PAr` <dbl>, FTr <dbl>, PProd <dbl>, `ORB%` <dbl>,\n#   `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>, `STL%` <dbl>, `BLK%` <dbl>, …\n\n\nIn that season, USC’s Amar Ross is your One Shot One Three True Shooting champion.\nIn most contests, like the batting title in Major League Baseball, there’s a minimum number of X to qualify. In baseball, it’s at bats. In basketball, it attempts. So let’s set a floor and see how it changes. What if we said you had to have played 100 minutes in a season? The top players in college basketball play more than 1000 minutes in a season. So 100 is not that much. Let’s try it and see.\n\nplayers %>%\n  mutate(trueshooting = (PTS/(2*(FGA + (.44*FTA))))*100) %>%\n  arrange(desc(trueshooting)) %>%\n  filter(MP > 100)\n\n# A tibble: 3,776 × 60\n   Team     Player   `#` Class Pos   Height Weight Homet…¹ High …² Summary  Rk.x\n   <chr>    <chr>  <dbl> <chr> <chr> <chr>   <dbl> <chr>   <chr>   <chr>   <dbl>\n 1 VMI Key… Coope…    15 FR    G     6-5       185 Frisco… Wakela… 4.3 Pt…     8\n 2 Samford… Quinn…    13 SO    G     6-5       195 Johns … Mount … 2.8 Pt…     9\n 3 Detroit… Kyle …     2 SO    G     6-0       180 Detroi… Cass T… 1.0 Pt…    11\n 4 Pitt Pa… Danie…     4 SR    F     6-7       220 Bladen… Bladen… 3.3 Pt…     9\n 5 Hofstra… Jarro…     2 SR    F     6-8       220 Cresce… Cushin… 4.2 Pt…     8\n 6 Cornell… Kelle…    15 SO    F     6-7       190 Plano,… Presto… 8.6 Pt…     4\n 7 New Mex… Virsh…    12 JR    G     6-2       165 Milwau… Hillcr… 4.9 Pt…    11\n 8 Bowling… Isaac…    12 JR    G     6-4       185 Bowlin… Bowlin… 2.6 Pt…    13\n 9 Princet… Max J…    40 SR    G     6-3       195 High P… Woodbe… 3.1 Pt…     7\n10 Duke Bl… Mark …    15 SO    C     7-0       243 Virgin… IMG Ac… 11.0 P…     4\n# … with 3,766 more rows, 49 more variables: G <dbl>, GS <dbl>, MP <dbl>,\n#   FG <dbl>, FGA <dbl>, `FG%` <dbl>, `2P` <dbl>, `2PA` <dbl>, `2P%` <dbl>,\n#   `3P` <dbl>, `3PA` <dbl>, `3P%` <dbl>, FT <dbl>, FTA <dbl>, `FT%` <dbl>,\n#   ORB <dbl>, DRB <dbl>, TRB <dbl>, AST <dbl>, STL <dbl>, BLK <dbl>,\n#   TOV <dbl>, PF <dbl>, PTS <dbl>, Rk.y <dbl>, PER <dbl>, `TS%` <dbl>,\n#   `eFG%` <dbl>, `3PAr` <dbl>, FTr <dbl>, PProd <dbl>, `ORB%` <dbl>,\n#   `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>, `STL%` <dbl>, `BLK%` <dbl>, …\n\n\nNow you get VMI’s Cooper Sisco, who played in 15 games and was on the floor for 119 minutes. So he played regularly, but not a lot. But in that time, he only attempted 38 shots, and made 63 percent of them. In other words, when he shot, he probably scored. He just rarely shot.\nSo is 100 minutes our level? Here’s the truth – there’s not really an answer here. We’re picking a cutoff. If you can cite a reason for it and defend it, then it probably works."
  },
  {
    "objectID": "filtering.html#top-list",
    "href": "filtering.html#top-list",
    "title": "6  Filters and selections",
    "section": "6.3 Top list",
    "text": "6.3 Top list\nOne last little dplyr trick that’s nice to have in the toolbox is a shortcut for selecting only the top values for your dataset. Want to make a Top 10 List? Or Top 25? Or Top Whatever You Want? It’s easy.\nSo what are the top 10 Power Five schools by season attendance. All we’re doing here is chaining commands together with what we’ve already got. We’re filtering by our list of Power Five conferences, we’re selecting the three fields we need, now we’re going to arrange it by total attendance and then we’ll introduce the new function: top_n. The top_n function just takes a number. So we want a top 10 list? We do it like this:\n\nattendance %>% filter(Conference %in% powerfive) %>% select(Institution, Conference, `2019`) %>% arrange(desc(`2019`)) %>% top_n(10)\n\nSelecting by 2019\n\n\n# A tibble: 10 × 3\n   Institution Conference `2019`\n   <chr>       <chr>       <dbl>\n 1 Michigan    Big Ten    780215\n 2 Penn St.    Big Ten    739747\n 3 Ohio St.    Big Ten    723679\n 4 Texas A&M   SEC        711258\n 5 Alabama     SEC        707817\n 6 LSU         SEC        705892\n 7 Tennessee   SEC        702912\n 8 Georgia     SEC        649722\n 9 Nebraska    Big Ten    625436\n10 Auburn      SEC        600355\n\n\nThat’s all there is to it. Just remember – for it to work correctly, you need to sort your data BEFORE you run top_n. Otherwise, you’re just getting the first 10 values in the list. The function doesn’t know what field you want the top values of. You have to do it."
  },
  {
    "objectID": "transforming.html",
    "href": "transforming.html",
    "title": "7  Transforming data",
    "section": "",
    "text": "Sometimes long data needs to be wide, and sometimes wide data needs to be long. I’ll explain.\nYou are soon going to discover that long before you can visualize data, you need to have it in a form that the visualization library can deal with. One of the ways that isn’t immediately obvious is how your data is cast. Most of the data you will encounter will be wide – each row will represent a single entity with multiple measures for that entity. So think of states. Your row of your dataset could have the state name, population, average life expectancy and other demographic data.\nBut what if your visualization library needs one row for each measure? So state, data type and the data. Maryland, Population, 6,177,224. That’s one row. Then the next row is Maryland, Average Life Expectancy, 78.5 That’s the next row. That’s where recasting your data comes in.\nWe can use a library called tidyr to pivot_longer or pivot_wider the data, depending on what we need. We’ll use a dataset of college football attendance to demonstrate.\nFirst we need some libraries.\nNow we’ll load the data.\nSo as you can see, each row represents a school, and then each column represents a year. This is great for calculating the percent change – we can subtract a column from a column and divide by that column. But later, when we want to chart each school’s attendance over the years, we have to have each row be one team for one year. Maryland in 2013, then Maryland in 2014, and Maryland in 2015 and so on.\nTo do that, we use pivot_longer because we’re making wide data long. Since all of the columns we want to make rows start with 20, we can use that in our cols directive. Then we give that column a name – Year – and the values for each year need a name too. Those are the attendance figure. We can see right away how this works.\nWe’ve gone from 149 rows to more than 1,000, but that’s expected when we have 7 years for each team."
  },
  {
    "objectID": "transforming.html#making-long-data-wide",
    "href": "transforming.html#making-long-data-wide",
    "title": "7  Transforming data",
    "section": "7.1 Making long data wide",
    "text": "7.1 Making long data wide\nWe can reverse this process using pivot_wider, which makes long data wide.\nWhy do any of this?\nIn some cases, you’re going to be given long data and you need to calculate some metric using two of the years – a percent change for instance. So you’ll need to make the data wide to do that. You might then have to re-lengthen the data now with the percent change. Some project require you to do all kinds of flexing like this. It just depends on the data.\nSo let’s take what we made above and turn it back into wide data.\n\nlongdata <- attendance %>% pivot_longer(cols = starts_with(\"20\"), names_to = \"Year\", values_to = \"Attendance\")\n\nlongdata\n\n# A tibble: 1,043 × 4\n   Institution Conference Year  Attendance\n   <chr>       <chr>      <chr>      <dbl>\n 1 Air Force   MWC        2013      228562\n 2 Air Force   MWC        2014      168967\n 3 Air Force   MWC        2015      156158\n 4 Air Force   MWC        2016      177519\n 5 Air Force   MWC        2017      174924\n 6 Air Force   MWC        2018      166205\n 7 Air Force   MWC        2019      162505\n 8 Akron       MAC        2013      107101\n 9 Akron       MAC        2014       55019\n10 Akron       MAC        2015      108588\n# … with 1,033 more rows\n\n\nTo pivot_wider, we just need to say where our column names are coming from – the Year – and where the data under it should come from – Attendance.\n\nlongdata %>% pivot_wider(names_from = Year, values_from = Attendance)\n\n# A tibble: 149 × 9\n   Institution     Conference   `2013` `2014` `2015` `2016` `2017` `2018` `2019`\n   <chr>           <chr>         <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 Air Force       MWC          228562 168967 156158 177519 174924 166205 162505\n 2 Akron           MAC          107101  55019 108588  62021 117416  92575 107752\n 3 Alabama         SEC          710538 710736 707786 712747 712053 710931 707817\n 4 Appalachian St. FBS Indepen… 149366     NA     NA     NA     NA     NA     NA\n 5 Appalachian St. Sun Belt         NA 138995 128755 156916 154722 131716 166640\n 6 Arizona         Pac-12       285713 354973 308355 338017 255791 318051 237194\n 7 Arizona St.     Pac-12       501509 343073 368985 286417 359660 291091 344161\n 8 Arkansas        SEC          431174 399124 471279 487067 442569 367748 356517\n 9 Arkansas St.    Sun Belt     149477 149163 138043 136200 119538 119001 124017\n10 Army West Point FBS Indepen… 169781 171310 185946 163267 185543 190156 185935\n# … with 139 more rows\n\n\nAnd just like that, we’re back."
  },
  {
    "objectID": "transforming.html#why-this-matters",
    "href": "transforming.html#why-this-matters",
    "title": "7  Transforming data",
    "section": "7.2 Why this matters",
    "text": "7.2 Why this matters\nThis matters because certain visualization types need wide or long data. A significant hurdle you will face for the rest of the semester is getting the data in the right format for what you want to do.\nSo let me walk you through an example using this data.\nLet’s look at Maryland’s attendance over the time period. In order to do that, I need long data because that’s what the charting library, ggplot2, needs. You’re going to learn a lot more about ggplot later. Since this data is organized by school and conference, I also need to remove records that have no attendance data (because we have a Maryland in the ACC row).\n\nmaryland <- longdata %>% filter(Institution == \"Maryland\") %>% filter(!is.na(Attendance))\n\nNow that we have long data for just Maryland, we can chart it.\n\nggplot(maryland, aes(x=Year, y=Attendance, group=1)) + \n  geom_line() + \n  scale_y_continuous(labels = scales::comma) + \n  labs(x=\"Year\", y=\"Attendance\", title=\"A Steady Decline After 2015\", subtitle=\"But hope appears on the horizon in 2019.\", caption=\"Source: NCAA | By Derek Willis\", color = \"Outcome\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank(),\n    axis.text = element_text(size = 7),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    legend.position=\"bottom\"\n  )"
  },
  {
    "objectID": "significancetests.html",
    "href": "significancetests.html",
    "title": "8  Significance tests",
    "section": "",
    "text": "Now that we’ve worked with data a little, it’s time to start asking more probing questions of our data. One of the most probing questions we can ask – one that so few sports journalists ask – is if the difference between this thing and the normal thing is real.\nWe have a perfect natural experiment going on in sports right now to show how significance tests work. The NBA, to salvage a season and get to the playoffs, put their players in a bubble – more accurately a hotel complex at Disney World in Orlando – and had them play games without fans.\nSo are the games different from other regular season games that had fans?\nTo answer this, we need to understand that a significance test is a way to determine if two numbers are significantly different from each other. Generally speaking, we’re asking if a subset of data – a sample – is different from the total data pool – the population. Typically, this relies on data being in a normal distribution.\nIf it is, then we know certain things about it. Like the mean – the average – will be a line right at the peak of cases. And that 66 percent of cases will be in that red area – the first standard deviation.\nA significance test will determine if a sample taken from that group is different from the total.\nSignificance testing involves stating a hypothesis. In our case, our hypothesis is that there is a difference between bubble games without people and regular games with people.\nIn statistics, the null hypothesis is the opposite of your hypothesis. In this case, that there is no difference between fans and no fans.\nWhat we’re driving toward is a metric called a p-value, which is the probability that you’d get your sample mean if the null hypothesis is true. So in our case, it’s the probability we’d see the numbers we get if there was no difference between fans and no fans. If that probability is below .05, then we consider the difference significant and we reject the null hypothesis.\nSo let’s see. We’ll need a log of every game last NBA season. In this data, there’s a field called COVID, which labels the game as a regular game or a bubble game.\nLoad the tidyverse.\nAnd import the data.\nFirst, let’s just look at scoring. Here’s a theory: fans make players nervous. The screaming makes players tense up, and tension makes for bad shooting. An alternative to this: screaming fans make you defend harder. So my hypothesis is that not only is the scoring different, it’s lower.\nFirst things first, let’s create a new field, called totalpoints and add the two scores together. We’ll need this, so we’re going to make this a new dataframe called points.\nTypically speaking, with significance tests, the process involves creating two different means and then running a bunch of formulas on them. R makes this easy by giving you a t.test function, which does all the work for you. What we have to tell it is what is the value we are testing, over which groups, and from what data. It looks like this:\nNow let’s talk about the output. I prefer to read these bottom up. So at the bottom, it says that the mean number of points score in an NBA game With Fans is 222.89. The mean scored in games Without Fans is 231.35. That means teams are scoring almost 8.5 points MORE without fans on average.\nBut, some games are defenseless track meets, some games are defensive slugfests. We learned that averages can be skewed by extremes. So the next thing we need to look at is the p-value. Remember, this is the probability that we’d get this sample mean – the without fans mean – if there was no difference between fans and no fans.\nThe probability? 4.099e-07 or 4.099 x 10 to the -7 power. Don’t remember your scientific notation? That’s .00000004099. The decimal, seven zeros and the number.\nRemember, if the probability is below .05, then we determine that this number is statistically significant. We’ll talk more about statistical significance soon, but in this case, statistical significance means that our hypothesis is correct: points are different without fans than with. And since our hypothesis is correct, we reject the null hypothesis and we can confidently say that bubble teams are scoring more than they were when fans packed arenas."
  },
  {
    "objectID": "significancetests.html#accepting-the-null-hypothesis",
    "href": "significancetests.html#accepting-the-null-hypothesis",
    "title": "8  Significance tests",
    "section": "8.1 Accepting the null hypothesis",
    "text": "8.1 Accepting the null hypothesis\nSo what does it look like when your hypothesis is wrong?\nLet’s test another thing that may have been impacted by bubble games: home court advantage. If you’re the home team, but you’re not at home, does it affect you? It has to, right? Your fans aren’t there. Home and away are just positions on the scoreboard. It can’t matter, can it?\nMy hypothesis is that home court is no longer an advantage, and the home team will score less relative to the away team.\nFirst things first: We need to make a dataframe where Team is the home team. And then we’ll create a differential between the home team and away team. If home court is an advantage, the differential should average out to be positive – the home team scores more than the away team.\n\nhomecourt <- logs %>% filter(is.na(HomeAway) == TRUE) %>% mutate(differential = TeamScore - OpponentScore)\n\nNow let’s test it.\n\nt.test(differential ~ COVID, data=homecourt)\n\n\n    Welch Two Sample t-test\n\ndata:  differential by COVID\nt = 0.36892, df = 107.84, p-value = 0.7129\nalternative hypothesis: true difference in means between group With Fans and group Without Fans is not equal to 0\n95 percent confidence interval:\n -2.301628  3.354268\nsample estimates:\n   mean in group With Fans mean in group Without Fans \n                  2.174047                   1.647727 \n\n\nSo again, start at the bottom. With Fans, the home team averages 2.17 more points than the away team. Without fans, they average 1.64 more.\nIf you are a bad sportswriter or a hack sports talk radio host, you look at this and scream “the bubble killed home court!”\nBut two things: first, the home team is STILL, on average, scoring more than the away team on the whole.\nAnd two: Look at the p-value. It’s .7129. Is that less than .05? No, no it is not. So that means we have to accept the null hypothesis that there is no difference between fans and no fans when it comes to the difference between the home team and the away team’s score.\nNow, does this mean that the bubble hasn’t impacted the magic of home court? Not necessarily. What it’s saying is that the variance between one and the other is too large to be able to say that they’re different. It could just be random noise that’s causing the difference, and so it’s not real. More to the point, it’s saying that this metric isn’t capable of telling you that there’s no home court in the bubble.\nWe’re going to be analyzing these bubble games for years trying to find the true impact of fans."
  },
  {
    "objectID": "correlations.html",
    "href": "correlations.html",
    "title": "9  Correlations and regression",
    "section": "",
    "text": "Throughout sports, you will find no shortage of opinions. From people yelling at their TV screens to an entire industry of people paid to have opinions, there are no shortage of reasons why this team sucks and that player is great. They may have their reasons, but a better question is, does that reason really matter?\nCan we put some numbers behind that? Can we prove it or not?\nThis is what we’re going to start to answer. And we’ll do it with correlations and regressions.\nFirst, we need data from the 2022 women’s college soccer season.\nThen load the tidyverse.\nNow import the data.\nTo do this, we need all college soccer teams and their season stats from this year. How much, over the course of a season, does a thing matter? That’s the question you’re going to answer.\nIn our case, we want to know how much does a team’s fouls influence the number of goals they score in a season? How much difference can we explain in goals with fouls?\nWe’re going to use two different methods here and they’re closely related. Correlations – specifically the Pearson Correlation Coefficient – is a measure of how related two numbers are in a linear fashion. In other words – if our X value goes up one, what happens to Y? If it also goes up 1, that’s a perfect correlation. X goes up 1, Y goes up 1. Every time. Correlation coefficients are a number between 0 and 1, with zero being no correlation and 1 being perfect correlation if our data is linear. We’ll soon go over scatterplots to visually determine if our data is linear, but for now, we have a hypothesis: More fouls are bad. Fouls hurt. So if a team gets lots of them, they should have worse outcomes than teams that get few of them. That is an argument for a linear relationship between them.\nBut is there one?\nWe’re going create a new dataframe called newcorrelations that takes our data that we imported and adds a column called differential which is the difference between goals and defensive_goals, and then we’ll use correlations to see how related those two things are.\nIn R, there is a cor function, and it works much the same as mean or median. So we want to see if differential is correlated with fouls, which is the yards of penalties a team gets in a game. We do that by referencing differential and fouls and specifying we want a pearson correlation. The number we get back is the correlation coefficient.\nSo on a scale of -1 to 1, where 0 means there’s no relationship at all and 1 or -1 means a perfect relationship, fouls and whether or not the team scores more goals than it gives up are at 0.02543571. You could say they’re 2.5 percent related toward the positive – more fouls, the higher your differential. Another way to say it? They’re 97.5 percent not related.\nWhat about the number of yellow cards instead of fouls? Do more aggressive defensive teams also score more?\nSo wait, what does this all mean?\nIt means that when you look at every game in college soccer, the number of goals and yellow cards have a negative impact on the score difference between your team and the other team. But the relationship is barely anything at all. Like 93+ percent plus not related. So neither fouls nor yellow cards have much of any relationship with the difference in goal-scoring.\nNormally, at this point, you’d quit while you were ahead. A correlation coefficient that shows there’s no relationship between two things means stop. It’s pointless to go on. But let’s put this fully to rest.\nEnter regression. Regression is how we try to fit our data into a line that explains the relationship the best. Regressions will help us predict things as well – if we have a team that has so many fouls, what kind of point differential could we expect? So regressions are about prediction, correlations are about description. Correlations describe a relationship. Regressions help us predict what that relationship means and what it might look like in the real world. Specifically, it tells us how much of the change in a dependent variable can be explained by the independent variable.\nAnother thing regressions do is give us some other tools to evaluate if the relationship is real or not.\nHere’s an example of using linear modeling to look at fouls. Think of the ~ character as saying “is predicted by”. The output looks like a lot, but what we need is a small part of it.\nThere’s three things we need here:\nSo fouls are totally meaningless to the outcome of a game.\nYou can see the problem in a graph. On the X axis is fouls, on the y is point differential. If these elements had a strong relationship, we’d see a clear pattern moving from right to left, sloping down. On the left would be the teams with few fouls and a positive point differential. On right would be teams with high fouls and negative point differentials. Do you see that below?"
  },
  {
    "objectID": "correlations.html#a-more-predictive-example",
    "href": "correlations.html#a-more-predictive-example",
    "title": "9  Correlations and regression",
    "section": "9.1 A more predictive example",
    "text": "9.1 A more predictive example\nSo we’ve firmly established that fouls aren’t predictive. But what is?\nSo instead of looking at fouls, let’s make a new metric: shots on goal. Can we predict the score differential by looking at the shots they put on goal?\nFirst, let’s look at the correlation coefficent.\n\nnewcorrelations %>% \n  summarise(correlation = cor(differential, so_g, method=\"pearson\"))\n\n# A tibble: 1 × 1\n  correlation\n        <dbl>\n1       0.639\n\n\nAnswer: 63 percent. Not a perfect relationship, but pretty good. But how meaningful is that relationship and how predictive is it?\n\nnet <- lm(differential ~ so_g, data = newcorrelations)\nsummary(net)\n\n\nCall:\nlm(formula = differential ~ so_g, data = newcorrelations)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-9.0733 -1.0733  0.2329  1.2329  7.2688 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -2.35010    0.07011  -33.52   <2e-16 ***\nso_g         0.42345    0.01032   41.03   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.904 on 2440 degrees of freedom\nMultiple R-squared:  0.4083,    Adjusted R-squared:  0.408 \nF-statistic:  1683 on 1 and 2440 DF,  p-value: < 2.2e-16\n\n\nFirst we check p-value. See that e-16? That means scientific notation. That means our number is 2.2 times 10 to the -16 power. So -.000000000000000022. That’s sixteen zeros between the decimal and 22. Is that less than .05? Uh, yeah. So this is really, really, really not random. But anyone who has watched a game of soccer knows this is true. It makes intuitive sense.\nSecond, Adjusted R-squared: 0.408. So we can predict a 40 percent of the difference in the score differential by simply looking at the shots on goal the team has.\nThird, the coefficients: In this case, our y=mx+b formula looks like y = 0.42345x + -2.35010. So if we were applying this, let’s look at Maryland’s 1-1 draw against Temple on August 18. Maryland’s shots on goal in that game? 8. What does our model say the point differential should have been?\n\n(0.42345*8)+-2.35010 \n\n[1] 1.0375\n\n\nSo by our model, Maryland should have won by a goal. Some games are closer than others. But when you can explain 40 percent of the difference, this is the kind of result you get. What would improve the model? Using more data to start. And using more inputs."
  },
  {
    "objectID": "multipleregression.html",
    "href": "multipleregression.html",
    "title": "10  Multiple regression",
    "section": "",
    "text": "That presents it’s own problems. So let’s get set up. The dataset we’ll use is all men’s college basketball games between 2015 and 2021.\nFor this walkthrough:\n   Download csv file\n\nWe need the tidyverse.\n\nlibrary(tidyverse)\n\nAnd the data.\n\nlogs <- read_csv(\"data/cbblogs1521.csv\")\n\nRows: 64866 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nOne way to show how successful a basketball team was for a game is to show the differential between the team’s score and the opponent’s score. Score a lot more than the opponent = good, score a lot less than the opponent = bad. And, relatively speaking, the more the better. So let’s create that differential. Let’s add in net rebounds. And because we’ll need it later, let’s add the turnover margin.\n\nlogs <- logs %>% mutate(\n  Differential = TeamScore - OpponentScore, \n  NetRebounds = TeamTotalRebounds - OpponentTotalRebounds,\n  TurnoverMargin = TeamTurnovers - OpponentTurnovers)\n\nThe linear model code we used before is pretty straight forward. Its field is predicted by field. Here’s a simple linear model that looks at predicting a team’s point differential by looking at their net turnovers.\n\nrebounds <- lm(Differential ~ NetRebounds, data=logs)\nsummary(rebounds)\n\n\nCall:\nlm(formula = Differential ~ NetRebounds, data = logs)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-58.671  -8.575  -0.246   8.186  95.090 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -0.041897   0.050740  -0.826    0.409    \nNetRebounds  1.047914   0.005269 198.880   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 12.92 on 64861 degrees of freedom\n  (3 observations deleted due to missingness)\nMultiple R-squared:  0.3788,    Adjusted R-squared:  0.3788 \nF-statistic: 3.955e+04 on 1 and 64861 DF,  p-value: < 2.2e-16\n\n\nRemember: There’s a lot here, but only some of it we care about. What is the Adjusted R-squared value? What’s the p-value and is it less than .05? In this case, we can predict 37 percent of the difference in differential with the net rebounds in the game.\nTo add more predictors to this mix, we merely add them. But it’s not that simple, as you’ll see in a moment. So first, let’s look at adding turnover margin to our prediction model:\n\nmodel1 <- lm(Differential ~ NetRebounds + TurnoverMargin, data=logs)\nsummary(model1)\n\n\nCall:\nlm(formula = Differential ~ NetRebounds + TurnoverMargin, data = logs)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-45.840  -6.924  -0.065   6.861  49.158 \n\nCoefficients:\n                Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    -0.084705   0.040531   -2.09   0.0366 *  \nNetRebounds     1.186572   0.004271  277.85   <2e-16 ***\nTurnoverMargin -1.537096   0.008014 -191.81   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 10.32 on 64860 degrees of freedom\n  (3 observations deleted due to missingness)\nMultiple R-squared:  0.6036,    Adjusted R-squared:  0.6036 \nF-statistic: 4.939e+04 on 2 and 64860 DF,  p-value: < 2.2e-16\n\n\nFirst things first: What is the adjusted R-squared?\nSecond: what is the p-value and is it less than .05?\nThird: Compare the residual standard error. We went from 12.92 to 10.32. The meaning of this is both really opaque and also simple – by adding data, we reduced the amount of error in our model. Residual standard error is the total distance between what our model would predict and what we actually have in the data. So lots of residual error means the distance between reality and our model is wider. So the width of our predictive range in this example shrank while we improved the amount of the difference we could predict. That’s good, and not always going to be the case.\nOne of the more difficult things to understand about multiple regression is the issue of multicollinearity. What that means is that there is significant correlation overlap between two variables – the two are related to each other as well as to the target output – and all you are doing by adding both of them is adding error with no real value to the R-squared. In pure statistics, we don’t want any multicollinearity at all. Violating that assumption limits the applicability of what you are doing. So if we have some multicollinearity, it limits our scope of application to college basketball. We can’t say this will work for every basketball league and level everywhere. What we need to do is see how correlated each value is to each other and throw out ones that are highly co-correlated.\nSo to find those, we have to create a correlation matrix that shows us how each value is correlated to our outcome variable, but also with each other. We can do that in the Hmisc library. We install that in the console with install.packages(\"Hmisc\")\n\nlibrary(Hmisc)\n\nWe can pass in every numeric value to the Hmisc library and get a correlation matrix out of it, but since we have a large number of values – and many of them character values – we should strip that down and reorder them. So that’s what I’m doing here. I’m saying give me all the columns with numeric values, except for Game, and then show me the differential, net yards, turnover margin and then everything else.\n\nsimplelogs <- logs %>% select_if(is.numeric) %>% select(-Game) %>% select(Differential, NetRebounds, TurnoverMargin, TeamFGPCT, TeamTotalRebounds, OpponentFGPCT, OpponentTotalRebounds)\n\nBefore we proceed, what we’re looking to do is follow the Differential column down, looking for correlation values near 1 or -1. Correlations go from -1, meaning perfect negative correlation, to 0, meaning no correlation, to 1, meaning perfect positive correlation. So we’re looking for numbers near 1 or -1 for their predictive value. BUT: We then need to see if that value is also highly correlated with something else. If it is, we have a decision to make.\nWe get our correlation matrix like this:\n\ncormatrix <- rcorr(as.matrix(simplelogs))\n\ncormatrix$r\n\n                      Differential NetRebounds TurnoverMargin   TeamFGPCT\nDifferential             1.0000000   0.6154762    -0.36313453  0.60493356\nNetRebounds              0.6154762   1.0000000     0.16927497  0.36357754\nTurnoverMargin          -0.3631345   0.1692750     1.00000000 -0.02058449\nTeamFGPCT                0.6049336   0.3635775    -0.02058449  1.00000000\nTeamTotalRebounds        0.4764896   0.7421430     0.10642123  0.02240707\nOpponentFGPCT           -0.6138758  -0.3708848     0.02081388 -0.11465126\nOpponentTotalRebounds   -0.4191181  -0.7144122    -0.14098194 -0.51804869\n                      TeamTotalRebounds OpponentFGPCT OpponentTotalRebounds\nDifferential                 0.47648956   -0.61387581           -0.41911809\nNetRebounds                  0.74214304   -0.37088485           -0.71441225\nTurnoverMargin               0.10642123    0.02081388           -0.14098194\nTeamFGPCT                    0.02240707   -0.11465126           -0.51804869\nTeamTotalRebounds            1.00000000   -0.53901039           -0.06121130\nOpponentFGPCT               -0.53901039    1.00000000           -0.01039878\nOpponentTotalRebounds       -0.06121130   -0.01039878            1.00000000\n\n\nNotice right away – NetRebounds is highly correlated. But NetRebounds is also highly correlated with TeamTotalRebounds. And that makes sense: TeamTotalRebounds feeds into NetRebounds. Including both of these measures would be pointless – they would add error without adding much in the way of predictive power.\n\nYour turn: What else do you see? What other values have predictive power and aren’t co-correlated? Add or remove some of the columns above and re-run the correlation matrix.\n\nWe can add more just by simply adding them. Let’s add the average FG PCT for both the team and opponent. They’re correlated to Differential, but not as much as you might expect.\n\nmodel2 <- lm(Differential ~ NetRebounds + TurnoverMargin + TeamFGPCT + OpponentFGPCT, data=logs)\nsummary(model2)\n\n\nCall:\nlm(formula = Differential ~ NetRebounds + TurnoverMargin + TeamFGPCT + \n    OpponentFGPCT, data = logs)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-29.793  -3.688  -0.020   3.675  37.778 \n\nCoefficients:\n                 Estimate Std. Error  t value Pr(>|t|)    \n(Intercept)      0.301244   0.191960    1.569    0.117    \nNetRebounds      0.649125   0.002632  246.660   <2e-16 ***\nTurnoverMargin  -1.311687   0.004301 -304.967   <2e-16 ***\nTeamFGPCT       90.498143   0.313094  289.045   <2e-16 ***\nOpponentFGPCT  -91.184871   0.311306 -292.911   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.493 on 64858 degrees of freedom\n  (3 observations deleted due to missingness)\nMultiple R-squared:  0.8877,    Adjusted R-squared:  0.8877 \nF-statistic: 1.282e+05 on 4 and 64858 DF,  p-value: < 2.2e-16\n\n\nGo down the list:\nWhat is the Adjusted R-squared now? What is the p-value and is it less than .05? What is the Residual standard error?\nThe final thing we can do with this is predict things. Look at our coefficients table. See the Estimates? We can build a formula from that, same as we did with linear regressions.\nHow does this apply in the real world? Let’s pretend for a minute that you are Kevin Willard, and you want to win conference titles. To do that, we need to know what attributes of a team we should emphasize. We can do that by looking at what previous Big Ten conference champions looked like.\nSo if our goal is to predict a conference champion team, we need to know what those teams did. Here’s the regular season conference champions in this dataset.\n\nlogs %>% \n  filter(Team == \"Michigan\" & Season == '2020-2021' | Team == \"Wisconsin\" & Season == '2019-2020' | Team == \"Michigan State\" & Season == '2018-2019' | Team == \"Michigan State\" & Season == '2017-2018') %>% \n  summarise(\n    meanNetRebounds = mean(NetRebounds),\n    meanTurnoverMargin = mean(TurnoverMargin),\n    meanTeamFGPCT = mean(TeamFGPCT),\n    meanOpponentFGPCT = mean(OpponentFGPCT)\n  )\n\n# A tibble: 1 × 4\n  meanNetRebounds meanTurnoverMargin meanTeamFGPCT meanOpponentFGPCT\n            <dbl>              <dbl>         <dbl>             <dbl>\n1            2.45             -0.218         0.450             0.404\n\n\nNow it’s just plug and chug.\n\n# (netrebounds estimate * meanNetRebounds) + (turnover margin estimate * meanTurnoverMargin) + (TeamFGPCT estimate * meanTeamFGPCT) + (OpponentFGPCT estimate * meanOpponentFGPCT) + Intercept\n(0.649125*2.454545  ) + (-1.311687*-0.2181818) + (90.498143*0.4503455) + (-91.184871*0.4040182) + 0.301244\n\n[1] 6.095821\n\n\nSo a team with those numbers is going to average scoring 6 more points per game than their opponent. Not a ton, but hey, the Big Ten has been a competitive conference lately.\nHow does that compare to Maryland in 2020-21 season?\n\nlogs %>% \n  filter(\n    Team == \"Maryland\" & Season == '2020-2021'\n    ) %>% \n  summarise(\n    meanNetRebounds = mean(NetRebounds),\n    meanTurnoverMargin = mean(TurnoverMargin),\n    meanTeamFGPCT = mean(TeamFGPCT),\n    meanOpponentFGPCT = mean(OpponentFGPCT)\n  )\n\n# A tibble: 1 × 4\n  meanNetRebounds meanTurnoverMargin meanTeamFGPCT meanOpponentFGPCT\n            <dbl>              <dbl>         <dbl>             <dbl>\n1          -0.724              0.379         0.458             0.409\n\n\n\n(0.649125*-0.7241379    ) + (-1.311687*-0.3793103) + (90.498143*0.4577586   ) + (-91.184871*0.4085172) + 0.301244\n\n[1] 4.504439\n\n\nBy this model, it predicted we would average outscoring our opponents by 4.5 points over that season. The reality?\n\nlogs %>% \n     filter(\n         Team == \"Maryland\" & Season == '2020-2021'\n     ) %>% summarise(avg_score = mean(TeamScore), avg_opp = mean(OpponentScore))\n\n# A tibble: 1 × 2\n  avg_score avg_opp\n      <dbl>   <dbl>\n1      68.8    65.0\n\n\nWe outscored them by about 3.8 points on average, so this looks like a pretty solid model, although there could be better ones. What would you change?"
  },
  {
    "objectID": "residuals.html",
    "href": "residuals.html",
    "title": "11  Residuals",
    "section": "",
    "text": "When looking at a linear model of your data, there’s a measure you need to be aware of called residuals. The residual is the distance between what the model predicted and what the real outcome is. Take our model at the end of the correlation and regression chapter. Our model predicted Maryland’s women soccer should have outscored Temple by 1.0375 goals last month. The match was a 1-1 draw. So our residual is -1.0375.\nResiduals can tell you several things, but most important is if a linear model the right model for your data. If the residuals appear to be random, then a linear model is appropriate. If they have a pattern, it means something else is going on in your data and a linear model isn’t appropriate.\nResiduals can also tell you who is underperforming and overperforming the model. And the more robust the model – the better your r-squared value is – the more meaningful that label of under or overperforming is.\nLet’s go back to our model for college basketball. For our predictor, let’s use Net FG Percentage - the difference between the two teams’ shooting success.\nThen load the tidyverse.\nFirst, let’s make the columns we’ll need.\nNow let’s create our model.\nWe’ve seen this output before, but let’s review because if you are using scatterplots to make a point, you should do this. First, note the Min and Max residual at the top. A team has underperformed the model by 51 points (!), and a team has overperformed it by 68 points (!!). The median residual, where half are above and half are below, is just slightly below the fit line. Close here is good.\nNext: Look at the Adjusted R-squared value. What that says is that 66 percent of a team’s scoring differential can be predicted by their FG percentage margin.\nLast: Look at the p-value. We are looking for a p-value smaller than .05. At .05, we can say that our correlation didn’t happen at random. And, in this case, it REALLY didn’t happen at random. But if you know a little bit about basketball, it doesn’t surprise you that the more you shoot better than your opponent, the more you win by. It’s an intuitive result.\nWhat we want to do now is look at those residuals. We want to add them to our individual game records. We can do that by creating two new fields – predicted and residuals – to our dataframe like this:\nUh, oh. What’s going on here? When you get a message like this, where R is complaining about the size of the data, it most likely means that your model is using some columns that have NA values. In this case, the number of columns looks small - perhaps 3 - so let’s just get rid of those rows by using the calculated columns from our model:\nNow we can try re-running the code to add the predicted and residuals columns:\nNow we can sort our data by those residuals. Sorting in descending order gives us the games where teams overperformed the model. To make it easier to read, I’m going to use select to give us just the columns we need to see and limit our results to Big Ten teams.\nSo looking at this table, what you see here are the teams who scored more than their FG percentage margin would indicate. One of them should jump off the page at you.\nLook at that Maryland-Northwestern game from 2020. The Wildcats shot better than the Terps, but the model predicted Northwestern would win by 17 points. Instead, Maryland won by 11!\nBut, before we can bestow any validity on this model, we need to see if this linear model is appropriate. We’ve done that some looking at our p-values and R-squared values. But one more check is to look at the residuals themselves. We do that by plotting the residuals with the predictor. We’ll get into plotting soon, but for now just seeing it is enough.\nThe lack of a shape here – the seemingly random nature – is a good sign that a linear model works for our data. If there was a pattern, that would indicate something else was going on in our data and we needed a different model.\nAnother way to view your residuals is by connecting the predicted value with the actual value.\nThe blue line here separates underperformers from overperformers."
  },
  {
    "objectID": "residuals.html#fouls",
    "href": "residuals.html#fouls",
    "title": "11  Residuals",
    "section": "11.1 Fouls",
    "text": "11.1 Fouls\nNow let’s look at it where it doesn’t work as well: the total number of fouls\n\nfouls <- logs %>% \n  mutate(\n    differential = TeamScore - OpponentScore, \n    TotalFouls = TeamPersonalFouls+OpponentPersonalFouls\n  )\n\n\npfit <- lm(differential ~ TotalFouls, data = fouls)\nsummary(pfit)\n\n\nCall:\nlm(formula = differential ~ TotalFouls, data = fouls)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-94.254 -10.285  -1.254   9.776 102.838 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  1.176653   0.327499   3.593 0.000327 ***\nTotalFouls  -0.030745   0.008802  -3.493 0.000478 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 16.39 on 64861 degrees of freedom\n  (3 observations deleted due to missingness)\nMultiple R-squared:  0.0001881, Adjusted R-squared:  0.0001726 \nF-statistic:  12.2 on 1 and 64861 DF,  p-value: 0.0004783\n\n\nSo from top to bottom:\n\nOur min and max go from -94 to positive 102\nOur adjusted R-squared is … 0.0001726 Not much at all.\nOur p-value is … 0.0004783, which is less than than .05, so that’s something.\n\nSo what we can say about this model is that it’s statistically significant, but doesn’t really explain much. It’s not meaningless, but on its own the total number of fouls doesn’t go very far in explaining the point differential. Normally, we’d stop right here – why bother going forward with a predictive model that isn’t terribly predictive? But let’s do it anyway. Oh, and see that “(3 observations deleted due to missingness)” bit? That means we need to lose some incomplete data again.\n\nfouls <- fouls %>% filter(!is.na(TotalFouls))\nfouls$predicted <- predict(pfit)\nfouls$residuals <- residuals(pfit)\n\n\nfouls %>% arrange(desc(residuals)) %>% select(Team, Opponent, W_L, TeamScore, OpponentScore, TotalFouls, residuals)\n\n# A tibble: 64,863 × 7\n   Team                      Opponent      W_L   TeamS…¹ Oppon…² Total…³ resid…⁴\n   <chr>                     <chr>         <chr>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 McNeese State             Dallas Chris… W         140      37      33   103. \n 2 Appalachian State         Toccoa Falls  W         135      34      35   101. \n 3 Grambling                 Ecclesia      W         147      52      20    94.4\n 4 Utah                      Mississippi … W         143      49      30    93.7\n 5 Merrimack                 Lesley        W         110      16      21    93.5\n 6 Lamar                     Howard Payne  W         121      32      35    88.9\n 7 Georgia Southern          Carver Colle… W         139      51      38    88.0\n 8 Youngstown State          Franciscan    W         134      46      35    87.9\n 9 Maryland-Baltimore County Valley Forge  W         134      46      34    87.9\n10 Tennessee-Martin          Champion Chr… W         115      29      28    85.7\n# … with 64,853 more rows, and abbreviated variable names ¹​TeamScore,\n#   ²​OpponentScore, ³​TotalFouls, ⁴​residuals\n\n\nFirst, note all of the biggest misses here are all blowout games. The worst games of the season, the worst being McNeese State vs. Dallas Christian. The model missed that differential by … 102 points. The margin of victory? 103 points. In other words, this model is not great! But let’s look at it anyway.\n\n\n\n\n\nWell … it actually says that a linear model is appropriate. Which an important lesson – just because your residual plot says a linear model works here, that doesn’t say your linear model is good. There are other measures for that, and you need to use them.\nHere’s the segment plot of residuals – you’ll see some really long lines. That’s a bad sign. Another bad sign? A flat fit line. It means there’s no relationship between these two things. Which we already know.\n\n\n`geom_smooth()` using formula 'y ~ x'"
  },
  {
    "objectID": "zscores.html",
    "href": "zscores.html",
    "title": "12  Z-scores",
    "section": "",
    "text": "Z-scores are a handy way to standardize numbers so you can compare things across groupings or time. In this class, we may want to compare teams by year, or era. We can use z-scores to answer questions like who was the greatest X of all time, because a z-score can put them in context to their era.\nA z-score is a measure of how a particular stat is from the mean. It’s measured in standard deviations from that mean. A standard deviation is a measure of how much variation – how spread out – numbers are in a data set. What it means here, with regards to z-scores, is that zero is perfectly average. If it’s 1, it’s one standard deviation above the mean, and 34 percent of all cases are between 0 and 1.\nIf you think of the normal distribution, it means that 84.3 percent of all case are below that 1. If it were -1, it would mean the number is one standard deviation below the mean, and 84.3 percent of cases would be above that -1. So if you have numbers with z-scores of 3 or even 4, that means that number is waaaaaay above the mean.\nSo let’s use last year’s Maryland women’s basketball team, which if haven’t been paying attention to current events, was very talented but had a few struggles."
  },
  {
    "objectID": "zscores.html#calculating-a-z-score-in-r",
    "href": "zscores.html#calculating-a-z-score-in-r",
    "title": "12  Z-scores",
    "section": "12.1 Calculating a Z score in R",
    "text": "12.1 Calculating a Z score in R\nFor this we’ll need the logs of all college basketball games last season.\nFor this walkthrough:\n   Download csv file\n\nLoad the tidyverse.\n\nlibrary(tidyverse)\n\nAnd load the data.\n\ngamelogs <- read_csv(\"data/wbb_game_logs_2022.csv\")\n\nRows: 30438 Columns: 110\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr    (7): away_team_name, home_team_name, league, season_type, neutral_sit...\ndbl  (101): end_year, neutral_site, ncaa_game_id, win, mp, pts, fgm, fga, fg...\ndate   (1): date\ntime   (1): gametime_east\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe first thing we need to do is select some fields we think represent team quality and a few things to help us keep things straight. So I’m going to pick shooting percentage, rebounding and the opponent version of the same two:\n\nteamquality <- gamelogs %>% \n  select(conference, team, fg_pct, trb, opp_fg_pct, opp_trb)\n\nAnd since we have individual game data, we need to collapse this into one record for each team. We do that with … group by.\n\nteamtotals <- teamquality %>% \n  group_by(conference, team) %>% \n  summarise(\n    FGAvg = mean(fg_pct), \n    ReboundAvg = mean(trb), \n    OppFGAvg = mean(opp_fg_pct),\n    OffRebAvg = mean(opp_trb)\n    ) \n\n`summarise()` has grouped output by 'conference'. You can override using the\n`.groups` argument.\n\n\nTo calculate a z-score in R, the easiest way is to use the scale function in base R. To use it, you use scale(FieldName, center=TRUE, scale=TRUE). The center and scale indicate if you want to subtract from the mean and if you want to divide by the standard deviation, respectively. We do.\nWhen we have multiple z-scores, it’s pretty standard practice to add them together into a composite score. That’s what we’re doing at the end here with TotalZscore. Note: We have to invert OppZscore and OppRebZScore by multiplying it by a negative 1 because the lower someone’s opponent number is, the better.\n\nteamzscore <- teamtotals %>% \n  mutate(\n    FGzscore = as.numeric(scale(FGAvg, center = TRUE, scale = TRUE)),\n    RebZscore = as.numeric(scale(ReboundAvg, center = TRUE, scale = TRUE)),\n    OppZscore = as.numeric(scale(OppFGAvg, center = TRUE, scale = TRUE)) * -1,\n    OppRebZScore = as.numeric(scale(OffRebAvg, center = TRUE, scale = TRUE)) * -1,\n    TotalZscore = FGzscore + RebZscore + OppZscore + OppRebZScore\n  )  \n\nSo now we have a dataframe called teamzscore that has 1,317 basketball teams with Z scores. What does it look like?\n\nhead(teamzscore)\n\n# A tibble: 6 × 11\n# Groups:   conference [1]\n  conference team  FGAvg Rebou…¹ OppFG…² OffRe…³ FGzsc…⁴ RebZs…⁵ OppZs…⁶ OppRe…⁷\n  <chr>      <chr> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 AAC        Cinc… 0.374    35.4   0.388    41.0 -0.981   -1.17   -0.445 -1.55  \n2 AAC        East… 0.364    37.8   0.381    38.8 -1.58    -0.293  -0.100 -0.724 \n3 AAC        Hous… 0.389    37.3   0.396    36.7 -0.105   -0.475  -0.839  0.0627\n4 AAC        Memp… 0.392    39.3   0.392    34.5  0.0931   0.235  -0.648  0.874 \n5 AAC        SMU   0.383    39.0   0.374    38.5 -0.450    0.110   0.246 -0.620 \n6 AAC        Sout… 0.385    40.1   0.367    32.9 -0.365    0.518   0.579  1.47  \n# … with 1 more variable: TotalZscore <dbl>, and abbreviated variable names\n#   ¹​ReboundAvg, ²​OppFGAvg, ³​OffRebAvg, ⁴​FGzscore, ⁵​RebZscore, ⁶​OppZscore,\n#   ⁷​OppRebZScore\n\n\nA way to read this – a team with a TotalZScore of 0 is precisely average. The larger the positive number, the more exceptional they are. The larger the negative number, the more truly terrible they are.\nSo who are the best teams in the country?\n\nteamzscore %>% arrange(desc(TotalZscore))\n\n# A tibble: 1,317 × 11\n# Groups:   conference [102]\n   confere…¹ team  FGAvg Rebou…² OppFG…³ OffRe…⁴ FGzsc…⁵ RebZs…⁶ OppZs…⁷ OppRe…⁸\n   <chr>     <chr> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 SWAC      Jack… 0.446    47.5   0.347    34.0   2.09    2.30     2.22    2.01\n 2 ASUN      Libe… 0.447    42.0   0.344    28.5   1.91    2.16     1.97    2.34\n 3 USA South Sout… 0.426    47.1   0.325    35.9   1.47    2.31     1.95    1.41\n 4 <NA>      Dako… 0.521    40     0.271    34     2.87    0.626    2.24    1.37\n 5 <NA>      Lour… 0.392    57     0.291    35     0.925   2.97     1.96    1.24\n 6 <NA>      Mt. … 0.5      45     0.306    34     2.55    1.32     1.74    1.37\n 7 SEC       Sout… 0.432    48.3   0.330    30.2   0.558   2.02     2.19    2.10\n 8 Pac-12    Stan… 0.452    42.2   0.348    32.6   1.78    1.76     1.57    1.42\n 9 CSAC      Clar… 0.433    42.9   0.325    38.2   1.85    0.551    2.22    1.85\n10 OVC       Murr… 0.480    39.8   0.386    30.1   1.81    1.75     1.32    1.46\n# … with 1,307 more rows, 1 more variable: TotalZscore <dbl>, and abbreviated\n#   variable names ¹​conference, ²​ReboundAvg, ³​OppFGAvg, ⁴​OffRebAvg, ⁵​FGzscore,\n#   ⁶​RebZscore, ⁷​OppZscore, ⁸​OppRebZScore\n\n\nDon’t sleep on Jackson State! If we look for Power Five schools, South Carolina and Stanford are at the top, which checks out.\nBut closer to home, how is Maryland doing.\n\nteamzscore %>% \n  filter(conference == \"Big Ten\") %>% \n  arrange(desc(TotalZscore)) %>%\n  select(team, TotalZscore)\n\nAdding missing grouping variables: `conference`\n\n\n# A tibble: 14 × 3\n# Groups:   conference [1]\n   conference team         TotalZscore\n   <chr>      <chr>              <dbl>\n 1 Big Ten    Michigan           4.75 \n 2 Big Ten    Iowa               4.42 \n 3 Big Ten    Nebraska           3.11 \n 4 Big Ten    Rutgers            1.69 \n 5 Big Ten    Indiana            1.47 \n 6 Big Ten    Maryland           1.42 \n 7 Big Ten    Michigan St.       1.20 \n 8 Big Ten    Ohio St.           0.150\n 9 Big Ten    Purdue            -1.37 \n10 Big Ten    Northwestern      -1.79 \n11 Big Ten    Minnesota         -2.07 \n12 Big Ten    Illinois          -3.96 \n13 Big Ten    Penn St.          -4.32 \n14 Big Ten    Wisconsin         -4.70 \n\n\nSo, as we can see, with our composite Z Score, Maryland is better than average but not great. But better than Ohio State. Notice how, by this measure, Michigan and Iowa are far ahead of most of the conference, with Rutgers a surprising fourth (mostly thanks to its defense and rebounding).\nWe can limit our results to just Power Five conferences plus the Big East:\n\npowerfive_plus_one <- c(\"SEC\", \"Big Ten\", \"Pac-12\", \"Big 12\", \"ACC\", \"Big East\")\nteamzscore %>% \n  filter(conference %in% powerfive_plus_one) %>% \n  arrange(desc(TotalZscore)) %>%\n  select(team, TotalZscore)\n\nAdding missing grouping variables: `conference`\n\n\n# A tibble: 76 × 3\n# Groups:   conference [6]\n   conference team           TotalZscore\n   <chr>      <chr>                <dbl>\n 1 SEC        South Carolina        6.87\n 2 Pac-12     Stanford              6.52\n 3 Big East   UConn                 5.67\n 4 Big Ten    Michigan              4.75\n 5 ACC        NC State              4.74\n 6 Big Ten    Iowa                  4.42\n 7 Big 12     Baylor                4.40\n 8 SEC        Tennessee             3.90\n 9 Big East   Marquette             3.90\n10 Big Ten    Nebraska              3.11\n# … with 66 more rows\n\n\nThis makes a certain amount of sense: three of the Final Four teams - South Carolina, Stanford and UConn are 1,2,3 in this list. Louisville, the fourth team, ranks 13th. Marquette is an interesting #9 here. It doesn’t necessarily mean they were the ninth-best team, but given their competition they shot the ball and rebounded the ball very well."
  },
  {
    "objectID": "zscores.html#writing-about-z-scores",
    "href": "zscores.html#writing-about-z-scores",
    "title": "12  Z-scores",
    "section": "12.2 Writing about z-scores",
    "text": "12.2 Writing about z-scores\nThe great thing about z-scores is that they make it very easy for you, the sports analyst, to create your own measures of who is better than who. The downside: Only a small handful of sports fans know what the hell a z-score is.\nAs such, you should try as hard as you can to avoid writing about them.\nIf the word z-score appears in your story or in a chart, you need to explain what it is. “The ranking uses a statistical measure of the distance from the mean called a z-score” is a good way to go about it. You don’t need a full stats textbook definition, just a quick explanation. And keep it simple.\nNever use z-score in a headline. Write around it. Away from it. Z-score in a headline is attention repellent. You won’t get anyone to look at it. So “Tottenham tops in z-score” bad, “Tottenham tops in the Premiere League” good."
  },
  {
    "objectID": "clustering.html",
    "href": "clustering.html",
    "title": "13  Clustering",
    "section": "",
    "text": "One common effort in sports is to classify teams and players – who are this players peers? What teams are like this one? Who should we compare a player to? Truth is, most sports commentators use nothing more sophisticated that looking at a couple of stats or use the “eye test” to say a player is like this or that.\nThere’s better ways.\nIn this chapter, we’re going to use a method that sounds advanced but it really quite simple called k-means clustering. It’s based on the concept of the k-nearest neighbor algorithm. You’re probably already scared. Don’t be.\nImagine two dots on a scatterplot. If you took a ruler out and measured the distance between those dots, you’d know how far apart they are. In math, that’s called the Euclidean distance. It’s just the space between them in numbers. Where k-nearest neighbor comes in, you have lots of dots and you want measure the distance between all of them. What does k-means clustering do? It lumps them into groups based on the average distance between them. Players who are good on offense but bad on defense are over here, good offense good defense are over here. And using the Euclidean distance between them, we can decide who is in and who is out of those groups.\nFor this exercise, I want to look at Jalen Smith, who played two seasons at Maryland before decamping for the NBA. Had he stayed, he could have been among the all-time Terp greats. So who does Jalen Smith compare to?\nTo answer this, we’ll use k-means clustering.\nFirst thing we do is load some libraries and set a seed, so if we run this repeatedly, our random numbers are generated from the same base. If you don’t have the cluster library, just add it on the console with install.packages(\"cluster\")\nI’ve gone and scraped stats for every player in that season.\nNow load that data.\nTo cluster this data properly, we have some work to do.\nFirst, it won’t do to have players who haven’t played, so we can use filter to find anyone with greater than 0 minutes played. Next, Jalen Smith is a forward, so let’s just look at forwards. Third, we want to limit the data to things that make sense to look at for Smith – things like shooting, rebounds, blocks, turnovers and points.\nNow, k-means clustering doesn’t work as well with data that can be on different scales. So comparing a percentage to a count metric – shooting percentage to points – would create chaos because shooting percentages are a fraction of 1 and points, depending on when they are in the season, could be quite large. So we have to scale each metric – put them on a similar basis using the distance from the max value as our guide. Also, k-means clustering won’t work with text data, so we need to create a dataframe that’s just the numbers, but scaled. We can do that with another select, and using mutate_all with the scale function. The na.omit() means get rid of any blanks, because they too will cause errors.\nWith k-means clustering, we decide how many clusters we want. Most often, researchers will try a handful of different cluster numbers and see what works. But there are methods for finding the optimal number. One method is called the Elbow method. One implementation of this, borrowed from the University of Cincinnati’s Business Analytics program, does this quite nicely with a graph that will help you decide for yourself.\nAll you need to do in this code is change out the data frame – playersscaled in this case – and run it.\nThe Elbow method – so named because you’re looking for the “elbow” where the line flattens out. In this case, it looks like a K of 8 is ideal. So let’s try that. We’re going to use the kmeans function, saving it to an object called k5. We just need to tell it our dataframe name, how many centers (k) we want, and we’ll use a sensible default for how many different configurations to try.\nLet’s look at what we get.\nInterpreting this output, the very first thing you need to know is that the cluster numbers are meaningless. They aren’t ranks. They aren’t anything. After you have taken that on board, look at the cluster sizes at the top. Clusters 3 and 4 are pretty large compared to others. That’s notable. Then we can look at the cluster means. For reference, 0 is going to be average. So group 1 is below average on minutes played. Groups 8 is slightly above, group 5 is well above.\nSo which group is Jalen Smith in? Well, first we have to put our data back together again. In K8, there is a list of cluster assignments in the same order we put them in, but recall we have no names. So we need to re-combine them with our original data. We can do that with the following:\nNow we have a dataframe called playercluster that has our player names and what cluster they are in. The fastest way to find Jalen Smith is to double click on the playercluster table in the environment and use the search in the top right of the table. Because this is based on some random selections of points to start the groupings, these may change from person to person, but Smith is in Group 2 in my data.\nWe now have a dataset and can plot it like anything else. Let’s get Cam Mack and then plot him against the rest of college basketball on rebounds versus minutes played.\nSo Jalen’s in cluster 2, which if you look at our clusters, puts him in the cluster with all above average metrics. What does that look like? We know Jalen was a rebounding machine, so where do group 2 people grade out on rebounds?\nNot bad, not bad. But who are Jalen Smith’s peers? If we look at the numbers in Group 2, there’s 495 of them. So let’s limit them to just Big Ten guards. Unfortunately, my scraper didn’t quite work and in the place of Conference is the coach’s name. So I’m going to have to do this the hard way and make a list of Big Ten teams and filter on that. Then I’ll sort by minutes played.\nSo there are the 4 forwards most like Jalen Smith in the Big Ten. Are they the best forwards in the conference?"
  },
  {
    "objectID": "clustering.html#advanced-metrics",
    "href": "clustering.html#advanced-metrics",
    "title": "13  Clustering",
    "section": "13.1 Advanced metrics",
    "text": "13.1 Advanced metrics\nHow much does this change if we change the metrics? I used pretty standard box score metrics above. What if we did it using Player Efficiency Rating, True Shooting Percentage, Point Production, Assist Percentage, Win Shares Per 40 Minutes and Box Plus Minus (you can get definitions of all of them by hovering over the stats on Nebraksa’s stats page).\nWe’ll repeat the process. Filter out players who don’t play, players with stats missing, and just focus on those stats listed above.\n\nplayersadvanced <- players %>% \n  filter(MP>0) %>% \n  filter(Pos == \"F\") %>% \n  select(Player, Team, Pos, PER, `TS%`, PProd, `AST%`, `WS/40`, BPM) %>% \n  na.omit() \n\nNow to scale them.\n\nplayersadvscaled <- playersadvanced %>% \n  select(PER, `TS%`, PProd, `AST%`, `WS/40`, BPM) %>% \n  mutate_all(scale) %>% \n  na.omit()\n\nLet’s find the optimal number of clusters.\n\n# function to compute total within-cluster sum of square \nwss <- function(k) {\n  kmeans(playersadvscaled, k, nstart = 10 )$tot.withinss\n}\n\n# Compute and plot wss for k = 1 to k = 15\nk.values <- 1:15\n\n# extract wss for 2-15 clusters\nwss_values <- map_dbl(k.values, wss)\n\nWarning: did not converge in 10 iterations\n\nWarning: did not converge in 10 iterations\n\nplot(k.values, wss_values,\n       type=\"b\", pch = 19, frame = FALSE, \n       xlab=\"Number of clusters K\",\n       ylab=\"Total within-clusters sum of squares\")\n\n\n\n\nLooks like 4.\n\nadvk4 <- kmeans(playersadvscaled, centers = 4, nstart = 25)\n\nWhat do we have here?\n\nadvk4\n\nK-means clustering with 4 clusters of sizes 627, 320, 612, 82\n\nCluster means:\n         PER        TS%      PProd        AST%      WS/40        BPM\n1  0.3328142  0.5094144 -0.0942388 -0.09932351  0.3805037  0.3628638\n2  0.9655878  0.4538599  1.5112893  0.82146770  0.8477533  0.8427975\n3 -0.5374881 -0.3986254 -0.5452426 -0.22446363 -0.5022825 -0.4844985\n4 -2.3014614 -2.6912101 -1.1077608 -0.77100101 -2.4690239 -2.4475330\n\nClustering vector:\n   [1] 2 1 1 3 3 2 2 3 1 3 3 1 1 2 2 1 1 3 1 3 3 3 1 4 2 1 1 1 2 2 2 2 2 1 3 4 2\n  [38] 2 1 2 2 3 1 2 1 3 2 3 3 3 3 2 1 3 1 1 1 3 2 2 1 1 1 2 2 1 1 3 1 1 1 3 1 2\n  [75] 2 2 1 1 1 3 1 2 1 1 3 3 3 3 3 1 1 1 3 3 1 3 2 2 3 4 1 1 3 1 1 1 4 2 1 1 1\n [112] 2 2 2 1 3 1 2 2 1 3 3 2 3 3 1 3 3 1 1 4 2 1 1 3 1 1 4 2 2 1 2 1 3 3 2 2 3\n [149] 3 1 2 1 3 3 3 2 1 1 1 1 2 1 3 3 2 1 3 3 1 3 2 3 1 1 2 1 1 1 1 1 3 3 3 1 3\n [186] 3 1 3 4 2 1 1 1 3 3 2 1 3 1 3 1 2 1 3 1 1 3 2 1 3 3 1 1 1 3 4 2 1 3 3 3 4\n [223] 3 1 3 3 1 2 1 1 2 3 3 3 3 3 1 3 3 4 2 2 1 1 1 2 1 1 4 2 3 4 3 2 2 1 1 3 2\n [260] 1 1 1 1 2 1 3 4 2 3 3 3 2 1 3 3 2 1 1 3 3 4 1 1 1 1 2 2 3 1 3 2 2 1 3 1 2\n [297] 3 3 1 3 3 3 3 3 2 2 1 3 2 1 3 3 4 2 1 3 3 3 1 1 3 1 2 1 1 3 4 2 2 1 3 2 1\n [334] 1 1 1 1 4 4 3 3 1 1 1 4 2 1 1 3 1 4 3 2 2 1 3 3 2 3 3 3 2 3 2 3 1 1 3 2 2\n [371] 1 1 3 3 3 3 3 3 1 1 1 3 3 3 1 3 1 2 2 1 1 1 3 3 2 2 1 3 1 2 1 1 3 2 3 3 3\n [408] 2 1 1 1 1 3 2 1 3 3 3 3 3 3 3 1 1 1 2 1 3 3 3 1 1 3 3 1 2 1 3 3 1 3 3 3 2\n [445] 1 3 2 1 1 3 3 2 4 2 1 1 3 4 2 3 1 1 3 3 1 1 3 2 1 1 3 4 2 1 3 3 1 1 1 3 3\n [482] 1 1 1 1 1 3 2 1 3 4 2 3 1 3 1 1 1 3 3 1 1 3 1 1 3 3 2 2 1 2 1 3 2 2 1 1 3\n [519] 3 1 1 1 1 3 1 2 2 3 1 3 2 2 1 3 1 1 1 3 3 1 2 2 1 1 3 1 2 1 1 4 4 2 1 3 1\n [556] 3 1 2 2 2 1 1 3 3 4 2 2 3 2 2 1 1 2 1 3 3 3 2 3 3 3 2 1 1 4 2 1 1 3 4 1 3\n [593] 1 3 3 3 2 1 1 3 4 2 2 1 1 3 1 1 1 2 1 1 3 2 2 1 3 1 2 2 2 3 3 3 3 2 1 1 2\n [630] 2 1 3 3 3 4 2 1 3 2 1 1 3 3 4 2 1 1 1 1 3 2 1 3 1 4 2 3 1 3 3 1 3 3 3 4 1\n [667] 1 1 1 3 3 1 3 1 3 2 1 3 2 1 1 1 3 1 3 1 1 2 1 3 2 2 3 1 3 2 2 1 3 3 1 1 1\n [704] 1 4 2 1 1 3 3 3 3 1 2 3 3 1 3 3 3 3 2 2 1 1 1 1 1 3 3 3 1 1 3 3 3 3 1 3 1\n [741] 3 3 1 1 3 1 3 4 2 3 1 3 3 3 1 3 1 3 3 1 1 1 1 3 1 1 2 1 1 1 1 4 2 2 1 1 2\n [778] 1 3 3 3 3 3 3 3 3 4 2 1 3 1 1 1 1 4 1 1 1 3 3 3 3 1 3 3 3 1 3 3 1 1 1 1 3\n [815] 1 2 2 1 1 1 1 1 1 1 1 3 1 1 3 4 1 3 3 1 2 2 3 1 3 3 2 1 1 3 2 1 1 3 1 3 3\n [852] 4 2 3 3 3 2 1 1 3 1 1 1 3 3 3 3 3 2 2 3 3 3 3 1 1 1 1 1 1 1 1 1 3 2 1 3 3\n [889] 1 1 3 1 2 1 3 3 3 3 3 1 2 1 3 3 2 1 1 1 3 3 3 1 3 1 4 2 2 2 1 3 2 1 1 3 1\n [926] 3 2 2 2 1 2 3 3 3 2 3 1 1 1 1 1 3 1 1 4 1 2 1 3 3 4 3 3 3 3 2 2 1 3 1 1 3\n [963] 3 2 3 3 3 2 2 1 1 3 1 3 2 3 3 4 2 1 1 3 3 4 2 1 1 1 3 3 3 3 3 1 3 3 2 1 4\n[1000] 2 1 3 3 3 1 4 1 1 3 3 1 1 1 3 2 1 3 1 1 4 1 3 3 3 3 4 1 2 3 1 3 2 1 3 3 3\n[1037] 3 2 1 1 3 2 1 3 3 3 2 1 1 3 1 3 3 4 1 3 3 3 1 3 1 1 3 1 3 3 3 1 1 3 3 3 1\n[1074] 1 3 3 1 2 3 3 1 1 3 3 2 1 1 3 3 1 3 1 3 2 3 1 3 3 2 3 1 3 3 1 3 3 3 4 4 2\n[1111] 1 3 1 2 1 1 1 1 1 1 3 1 2 3 1 1 3 2 3 1 1 1 1 4 3 3 3 3 2 1 3 2 2 2 2 2 1\n[1148] 2 1 1 3 3 1 2 2 1 3 4 2 1 1 1 3 1 2 1 1 3 3 1 3 3 3 1 1 1 3 1 3 4 2 3 1 3\n[1185] 2 1 1 2 2 2 1 2 2 3 3 1 1 3 3 2 2 1 1 2 1 1 1 1 2 2 1 3 1 3 3 1 2 1 1 3 1\n[1222] 1 1 3 1 4 4 2 2 3 3 1 3 1 3 3 2 3 1 1 1 3 3 2 1 3 3 2 1 3 3 2 2 1 3 1 2 1\n[1259] 3 2 1 3 1 2 2 1 3 2 3 2 1 1 1 1 1 2 3 3 1 3 3 3 2 1 3 1 2 1 3 3 3 3 2 1 1\n[1296] 3 1 3 3 3 3 2 1 1 3 3 3 3 3 2 2 1 2 1 1 3 3 2 3 3 2 3 3 2 2 3 2 2 3 3 3 3\n[1333] 3 4 4 3 1 1 1 1 1 1 3 3 1 2 1 1 3 2 3 2 1 1 3 1 3 2 2 1 2 3 1 3 3 2 3 3 3\n[1370] 3 4 2 1 1 3 4 3 1 3 3 1 3 4 2 1 3 3 3 3 3 3 3 2 1 1 4 1 1 3 2 3 4 2 2 1 1\n[1407] 3 1 2 3 4 3 3 3 3 4 3 3 3 1 1 1 1 3 3 3 3 2 4 3 1 3 3 1 3 2 2 1 3 2 1 1 3\n[1444] 2 2 1 1 1 1 3 2 1 1 2 3 3 3 3 4 2 2 1 3 3 4 2 1 1 3 3 1 3 3 3 3 3 3 2 2 1\n[1481] 2 1 3 3 2 2 3 1 3 1 1 1 3 3 1 1 2 3 3 3 2 1 3 1 3 4 2 2 1 3 2 2 3 1 2 1 3\n[1518] 1 1 2 3 3 3 4 4 2 1 3 2 1 2 3 3 2 1 2 3 1 2 1 1 1 3 3 1 2 1 1 1 4 2 1 1 3\n[1555] 3 4 4 1 1 3 1 4 2 1 1 4 3 1 3 3 3 3 3 3 4 2 2 1 1 2 1 1 1 2 1 3 1 1 3 3 2\n[1592] 1 1 3 1 1 1 1 1 2 3 1 1 3 1 3 3 3 3 4 1 2 1 3 3 3 1 3 3 3 4 3 3 3 3 4 1 2\n[1629] 1 1 3 1 2 2 1 1 1 1 2 1 3\n\nWithin cluster sum of squares by cluster:\n[1] 1427.2032 1442.9566 1161.4081  669.2421\n (between_SS / total_SS =  52.2 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n\n\nLooks like this time, cluster 1 is all below average and cluster 5 is all above. Which cluster is Jalen Smith in?\n\nplayeradvcluster <- data.frame(playersadvanced, advk4$cluster) \n\n\njsadv <- playeradvcluster %>% filter(Player == \"Jalen Smith\")\n\njsadv\n\n       Player               Team Pos  PER   TS. PProd AST. WS.40  BPM\n1 Jalen Smith Maryland Terrapins   F 28.9 0.623   392  5.2 0.252 11.8\n  advk4.cluster\n1             2\n\n\nCluster 4 on my dataset. So in this season, we can say he’s in a big group of players who are all above average on these advanced metrics.\nNow who are his Big Ten peers?\n\nplayeradvcluster %>% \n  filter(advk4.cluster == 4) %>% \n  filter(Team %in% big10) %>% \n  arrange(desc(PProd))\n\n            Player                Team Pos   PER TS. PProd AST.  WS.40   BPM\n1 Harrison Hookfin Ohio State Buckeyes   F  -8.3 0.2     3    0 -0.206 -15.0\n2       Samad Qawi   Wisconsin Badgers   F -17.5 0.0     1    0 -0.206 -14.6\n3 Nathan Childress    Indiana Hoosiers   F  -6.0 0.0     1    0 -0.200 -27.3\n  advk4.cluster\n1             4\n2             4\n3             4\n\n\nSorting on Points Produced, Cam Mack is third out of the 15 forwards in the Big Ten who land in Cluster 4. Seems advanced metrics rate Jalen Smith pretty highly."
  },
  {
    "objectID": "simulations.html",
    "href": "simulations.html",
    "title": "14  Simulations",
    "section": "",
    "text": "In the 2017-2018 season, Nebraska’s James Palmer Jr. (a DMV product, btw) took 139 three point attempts and made 43 of them for a .309 shooting percentage. A few weeks into the next season, he was 7 for 39 – a paltry .179.\nIs something wrong or is this just bad luck?\nLuck is something that comes up a lot in sports. Is a team unlucky? Or a player? One way we can get to this, we can get to that is by simulating things based on their typical percentages. Simulations work by choosing random values within a range based on a distribution. The most common distribution is the normal or binomial distribution. The normal distribution is where the most cases appear around the mean, 66 percent of cases are within one standard deviation from the mean, and the further away from the mean you get, the more rare things become.\nLet’s simulate 39 three point attempts 1000 times with his season long shooting percentage and see if this could just be random chance or something else.\nWe do this using a base R function called rbinom or binomial distribution. So what that means is there’s a normally distributed chance that James Palmer Jr. is going to shoot above and below his career three point shooting percentage. If we randomly assign values in that distribution 1000 times, how many times will it come up 7, like this example?\nHow do we read this? The first row and the second row form a pair. The top row is the number of shots made. The number immediately under it is the number of simulations where that occurred.\nSo what we see is given his season long shooting percentage, it’s not out of the realm of randomness that with just 39 attempts for Palmer, he’s only hit only 7. In 1000 simulations, it comes up 35 times. Is he below where he should be? Yes. Will he likely improve and soon? Unless something is very wrong, yes. And indeed, by the end of the season, he finished with a .313 shooting percentage from 3 point range. So we can say he was just unlucky."
  },
  {
    "objectID": "simulations.html#cold-streaks",
    "href": "simulations.html#cold-streaks",
    "title": "14  Simulations",
    "section": "14.1 Cold streaks",
    "text": "14.1 Cold streaks\nDuring the final regular-season game in the 2021-22 season, Maryland, shooting .326 on the season from behind the arc, went 1-15 in the first half. How strange is that?\n\nset.seed(1234)\n\nsimulations <- rbinom(n = 1000, size = 15, prob = .326)\n\nhist(simulations)\n\n\n\ntable(simulations)\n\nsimulations\n  0   1   2   3   4   5   6   7   8   9  10  11 \n  5  17  61 135 204 222 164  93  60  33   3   3 \n\n\nShort answer: Pretty weird, but not totally unheard of. If you simulate 15 threes 1000 times, about 50 times it will result in a single made three-pointer. It’s slightly more common that the team would hit 8 threes out of 15. So going that cold is not totally out of the realm of random chance, but it’s pretty uncommon."
  },
  {
    "objectID": "barcharts.html",
    "href": "barcharts.html",
    "title": "15  Intro to ggplot with bar charts",
    "section": "",
    "text": "With ggplot2, we dive into the world of programmatic data visualization. The ggplot2 library implements something called the grammar of graphics. The main concepts are:\nHadley Wickham, who is behind all of the libraries we have used in this course to date, wrote about his layered grammar of graphics in this 2009 paper that is worth your time to read.\nHere are some ggplot2 resources you’ll want to keep handy:\nLet’s dive in using data we’ve already seen before – football attendance. This workflow will represent a clear picture of what your work in this class will be like for much of the rest of the semester. One way to think of this workflow is that your R Notebook is now your digital sketchbook, where you will try different types of visualizations to find ones that work. Then, you will either write the code that adds necessary and required parts to finish it, or you’ll export your work into a program like Illustrator to finish the work.\nTo begin, we’ll use data we’ve seen before: college football attendance.\nNow load the tidyverse.\nAnd the data.\nFirst, let’s get a top 10 list by announced attendance in the most recent season we have data. We’ll use the same tricks we used in the filtering assignment.\nThat looks good, so let’s save it to a new data frame and use that data frame instead going forward."
  },
  {
    "objectID": "barcharts.html#the-bar-chart",
    "href": "barcharts.html#the-bar-chart",
    "title": "15  Intro to ggplot with bar charts",
    "section": "15.1 The bar chart",
    "text": "15.1 The bar chart\nThe easiest thing we can do is create a simple bar chart of our data. Bar charts show magnitude. They invite you to compare how much more or less one thing is compared to others.\nWe could, for instance, create a bar chart of the total attendance. To do that, we simply tell ggplot2 what our dataset is, what element of the data we want to make the bar chart out of (which is the aesthetic), and the geometry type (which is the geom). It looks like this:\nggplot() + geom_bar(data=top10, aes(x=Institution))\nNote: top10 is our data, aes means aesthetics, x=Institution explicitly tells ggplot2 that our x value – our horizontal value – is the Institution field from the data, and then we add on the geom_bar() as the geometry. And what do we get when we run that?\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=Institution)\n  )\n\n\n\n\nWe get … weirdness. We expected to see bars of different sizes, but we get all with a count of 1. What gives? Well, this is the default behavior. What we have here is something called a histogram, where ggplot2 helpfully counted up the number of times the Institution appears and counted them up. Since we only have one record per Institution, the count is always 1. How do we fix this? By adding weight to our aesthetic.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=Institution, weight=`2019`)\n  )\n\n\n\n\nCloser. But … what order is that in? And what happened to our count numbers on the left? Why are they in scientific notation?\nLet’s deal with the ordering first. ggplot2’s default behavior is to sort the data by the x axis variable. So it’s in alphabetical order. To change that, we have to reorder it. With reorder, we first have to tell ggplot what we are reordering, and then we have to tell it HOW we are reordering it. So it’s reorder(FIELD, SORTFIELD).\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(\n      x=reorder(Institution, `2019`), \n      weight=`2019`\n      )\n    )\n\n\n\n\nBetter. We can argue about if the right order is smallest to largest or largest to smallest. But this gets us close. By the way, to sort it largest to smallest, put a negative sign in front of the sort field.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(\n      x=reorder(Institution, -`2019`), \n      weight=`2019`\n      )\n    )"
  },
  {
    "objectID": "barcharts.html#scales",
    "href": "barcharts.html#scales",
    "title": "15  Intro to ggplot with bar charts",
    "section": "15.2 Scales",
    "text": "15.2 Scales\nTo fix the axis labels, we need try one of the other main elements of the ggplot2 library, which is transform a scale. More often that not, that means doing something like putting it on a logarithmic scale or some other kind of transformation. In this case, we’re just changing how it’s represented. The default in ggplot2 for large values is to express them as scientific notation. Rarely ever is that useful in our line of work. So we have to transform them into human readable numbers.\nThe easiest way to do this is to use a library called scales and it’s already installed.\n\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nTo alter the scale, we add a piece to our plot with + and we tell it which scale is getting altered and what kind of data it is. In our case, our Y axis is what is needing to be altered, and it’s continuous data (meaning it can be any number between x and y, vs discrete data which are categorical). So we need to add scale_y_continuous and the information we want to pass it is to alter the labels with a function called comma.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(\n      x=reorder(Institution, -`2019`), \n      weight=`2019`\n      )\n    ) + \n  scale_y_continuous(labels=comma)\n\n\n\n\nBetter."
  },
  {
    "objectID": "barcharts.html#styling",
    "href": "barcharts.html#styling",
    "title": "15  Intro to ggplot with bar charts",
    "section": "15.3 Styling",
    "text": "15.3 Styling\nWe are going to spend a lot more time on styling, but let’s add some simple labels to this with a new bit called labs which is short for labels.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(\n      x=reorder(Institution, -`2019`), \n      weight=`2019`)\n    ) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Top 10 Football Programs By Attendance\", \n    x=\"School\", \n    y=\"Attendance\"\n)\n\n\n\n\nThe library has lots and lots of ways to alter the styling – we can programmatically control nearly every part of the look and feel of the chart. One simple way is to apply themes in the library already. We do that the same way we’ve done other things – we add them. Here’s the light theme.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=reorder(Institution, -`2019`),\n        weight=`2019`)) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Top 10 Football Programs By Attendance\", \n    x=\"School\", \n    y=\"Attendance\") + \n  theme_light()\n\n\n\n\nOr the minimal theme:\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=reorder(Institution, -`2019`),\n        weight=`2019`)) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Top 10 Football Programs By Attendance\", \n    x=\"School\", \n    y=\"Attendance\") + \n  theme_minimal()\n\n\n\n\nLater on, we’ll write our own themes. For now, the built in ones will get us closer to something that looks good."
  },
  {
    "objectID": "barcharts.html#one-last-trick-coord-flip",
    "href": "barcharts.html#one-last-trick-coord-flip",
    "title": "15  Intro to ggplot with bar charts",
    "section": "15.4 One last trick: coord flip",
    "text": "15.4 One last trick: coord flip\nSometimes, we don’t want vertical bars. Maybe we think this would look better horizontal. How do we do that? By adding coord_flip() to our code. It does what it says – it inverts the coordinates of the figures.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=reorder(Institution, -`2019`),\n        weight=`2019`)) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Top 10 Football Programs By Attendance\", \n    x=\"School\", \n    y=\"Attendance\") + \n  theme_minimal() + \n  coord_flip()"
  },
  {
    "objectID": "stackedbars.html",
    "href": "stackedbars.html",
    "title": "16  Stacked bar charts",
    "section": "",
    "text": "We’re going to use a dataset of college football games from last season.\nFor this walkthrough:\n   Download csv file\n\nLoad the tidyverse.\n\nlibrary(tidyverse)\n\nAnd the data.\n\nfootball <- read_csv(\"data/footballlogs21.csv\")\n\nRows: 1655 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWhat we have here is every game in college football for the 2019-2020 season. The question we want to answer is this: Who had the most prolific offenses in the Big Ten? And how did they get there?\nSo to make this chart, we have to just add one thing to a bar chart like we did in the previous chapter. However, it’s not that simple.\nWe have game data, and we need season data. To get that, we need to do some group by and sum work. And since we’re only interested in the Big Ten, we have some filtering to do too. For this, we’re going to measure offensive production by rushing yards and passing yards. So if we have all the games a team played, and the rushing and passing yards for each of those games, what we need to do to get the season totals is just add them up.\n\nfootball %>% \n  group_by(Conference, Team) %>% \n  summarise(\n    SeasonRushingYards = sum(RushingYds),\n    SeasonPassingYards = sum(PassingYds),\n  ) %>% filter(Conference == \"Big Ten Conference\")\n\n`summarise()` has grouped output by 'Conference'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 14 × 4\n# Groups:   Conference [1]\n   Conference         Team           SeasonRushingYards SeasonPassingYards\n   <chr>              <chr>                       <dbl>              <dbl>\n 1 Big Ten Conference Illinois                     2049               1874\n 2 Big Ten Conference Indiana                      1388               2106\n 3 Big Ten Conference Iowa                         1733               2521\n 4 Big Ten Conference Maryland                     1774               3960\n 5 Big Ten Conference Michigan                     3001               3202\n 6 Big Ten Conference Michigan State               2295               3298\n 7 Big Ten Conference Minnesota                    2589               2106\n 8 Big Ten Conference Nebraska                     2168               3201\n 9 Big Ten Conference Northwestern                 1741               2128\n10 Big Ten Conference Ohio State                   2347               4952\n11 Big Ten Conference Penn State                   1401               3491\n12 Big Ten Conference Purdue                       1104               4620\n13 Big Ten Conference Rutgers                      1798               2239\n14 Big Ten Conference Wisconsin                    2740               2082\n\n\nBy looking at this, we can see we got what we needed. We have 14 teams and numbers that look like season totals for yards. Save that to a new dataframe.\n\nfootball %>% \n  group_by(Conference, Team) %>% \n  summarise(\n    SeasonRushingYards = sum(RushingYds),\n    SeasonPassingYards = sum(PassingYds),\n  ) %>% filter(Conference == \"Big Ten Conference\") -> yards\n\n`summarise()` has grouped output by 'Conference'. You can override using the\n`.groups` argument.\n\n\nNow, the problem we have is that ggplot wants long data and this data is wide. So we need to use tidyr to make it long, just like we did in the transforming data chapter.\n\nyards %>% \n  pivot_longer(\n    cols=starts_with(\"Season\"), \n    names_to=\"Type\", \n    values_to=\"Yards\")\n\n# A tibble: 28 × 4\n# Groups:   Conference [1]\n   Conference         Team     Type               Yards\n   <chr>              <chr>    <chr>              <dbl>\n 1 Big Ten Conference Illinois SeasonRushingYards  2049\n 2 Big Ten Conference Illinois SeasonPassingYards  1874\n 3 Big Ten Conference Indiana  SeasonRushingYards  1388\n 4 Big Ten Conference Indiana  SeasonPassingYards  2106\n 5 Big Ten Conference Iowa     SeasonRushingYards  1733\n 6 Big Ten Conference Iowa     SeasonPassingYards  2521\n 7 Big Ten Conference Maryland SeasonRushingYards  1774\n 8 Big Ten Conference Maryland SeasonPassingYards  3960\n 9 Big Ten Conference Michigan SeasonRushingYards  3001\n10 Big Ten Conference Michigan SeasonPassingYards  3202\n# … with 18 more rows\n\n\nWhat you can see now is that we have two rows for each team: One for rushing yards, one for passing yards. This is what ggplot needs. Save it to a new dataframe.\n\nyards %>% \n  pivot_longer(\n    cols=starts_with(\"Season\"), \n    names_to=\"Type\", \n    values_to=\"Yards\") -> yardswide\n\nBuilding on what we learned in the last chapter, we know we can turn this into a bar chart with an x value, a weight and a geom_bar. What we are going to add is a fill. The fill will stack bars on each other based on which element it is. In this case, we can fill the bar by Type, which means it will stack the number of rushing yards on top of passing yards and we can see how they compare.\n\nggplot() + \n  geom_bar(data=yardswide, aes(x=Team, weight=Yards, fill=Type)) + \n  coord_flip()\n\n\n\n\nWhat’s the problem with this chart?\nThere’s a couple of things, one of which we’ll deal with now: The ordering is alphabetical (from the bottom up). So let’s reorder the teams by Yards.\n\nggplot() + \n  geom_bar(data=yardswide, aes(x=reorder(Team, Yards), weight=Yards, fill=Type)) + \n  coord_flip()\n\n\n\n\nAnd just like that … Ohio State comes out on top, and Maryland third. Not exactly a “three yards and a cloud of dust” conference."
  },
  {
    "objectID": "circularbarcharts.html",
    "href": "circularbarcharts.html",
    "title": "17  Circular bar plots",
    "section": "",
    "text": "Does November basketball really not matter? Are games played early in the season, before teams have had a chance to learn how to play together and when many teams feast on cupcake schedules, meaningful come March?\nLet’s look, using a new form of chart called a circular bar plot. It’s a chart type that combines several forms we’ve used before: bar charts to show magnitude, stacked bar charts to show proportion, but we’re going to add bending the chart around a circle to add some visual interesting-ness to it. We’re also going to use time as an x-axis value to make a not subtle circle of time reference – a common technique with circular bar charts.\nWe’ll use a dataset of every women’s college basketball game last season.\nLoad your libraries.\nAnd load your data."
  },
  {
    "objectID": "circularbarcharts.html#does-november-basketball-matter",
    "href": "circularbarcharts.html#does-november-basketball-matter",
    "title": "17  Circular bar plots",
    "section": "17.1 Does November basketball matter?",
    "text": "17.1 Does November basketball matter?\nSo let’s test the notion of November Basketball Doesn’t Matter. What matters in basketball? Let’s start simple: Wins.\nWe can group by date and conference and sum up the wins. How many wins by day does each conference get?\n\ndates <- logs %>% group_by(date, conference) %>% summarise(wins = sum(win))\n\n`summarise()` has grouped output by 'date'. You can override using the\n`.groups` argument.\n\n\nEarlier, we did stacked bar charts. We have what we need to do that now.\n\nggplot() + geom_bar(data=dates, aes(x=date, weight=wins, fill=conference)) + theme_minimal()\n\n\n\n\nEeek. This is already looking not great. But to make it a circular bar chart, we add coord_polar() to our chart.\n\nggplot() + geom_bar(data=dates, aes(x=date, weight=wins, fill=conference)) + theme_minimal() + coord_polar()\n\n\n\n\nBased on that, the day is probably too thin a slice, and there’s way too many conferences in college basketball. Let’s group this by months and filter out all but the power five conferences.\n\np5 <- c(\"SEC\", \"Big Ten\", \"Pac-12\", \"Big 12\", \"ACC\")\n\nTo get months, we’re going to use a function in the library lubridate called floor_date, which combine with mutate will give us a field of just months.\n\nwins <- logs %>% mutate(month = floor_date(date, unit=\"months\")) %>% group_by(month, conference) %>% summarise(wins=sum(win)) %>% filter(conference %in% p5) \n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\n\nNow we can use wins to make our circular bar chart of wins by month in the Power Five.\n\nggplot() + geom_bar(data=wins, aes(x=month, weight=wins, fill=conference)) + theme_minimal() + coord_polar()\n\n\n\n\nYikes. That looks a lot like a broken pie chart. So months are too thick of a slice. Let’s use weeks in our floor date to see what that gives us.\n\nwins <- logs %>% mutate(week = floor_date(date, unit=\"weeks\")) %>% group_by(week, conference) %>% summarise(wins=sum(win)) %>% filter(conference %in% p5) \n\n`summarise()` has grouped output by 'week'. You can override using the\n`.groups` argument.\n\n\n\nggplot() + geom_bar(data=wins, aes(x=week, weight=wins, fill=conference)) + theme_minimal() + coord_polar()\n\n\n\n\nThat looks better. But what does it say? Does November basketball matter? What this is saying is … yeah, it kinda does. The reason? Lots of wins get piled up in November and December, during non-conference play. So if you are a team with NCAA tournament dreams, you need to win games in November to make sure your tournament resume is where it needs to be come March. Does an individual win or loss matter? Probably not. But your record in November does."
  },
  {
    "objectID": "circularbarcharts.html#does-it-show-you-where-you-are",
    "href": "circularbarcharts.html#does-it-show-you-where-you-are",
    "title": "17  Circular bar plots",
    "section": "17.2 Does it show you where you are?",
    "text": "17.2 Does it show you where you are?\nSo here is the problem we have:\n\nWe have data for every game. In the past, we were able to calculate the team wins and losses because the way the data records them is team is the main team, and they win or lose. The opponent is recorded, but not in its own column of that name. In addition, the opponent has the mirror image of this game as well, where they are team. So essentially every game is in here twice – one for each team that plays in the game.\nWe need to attach the opponent’s winning percentage to each game so we can decide if it’s a quality win for team.\n\nFirst we need to populate opponent based on the whatever is not the team. Then what we have to do is invert the process that we’ve done before. We need to group by the opponent and we need to invert the wins and losses. A win in the win column is a win for the team. That means each loss in the win column is a WIN for the opponent.\nOnce we invert, the data looks very similar to what we’ve done before. One other thing: I noticed there’s some tournament games in here, so the filter at the end strips them out.\n\nlogs <- logs %>% mutate(opponent = case_when(\n  team == home_team_name ~ away_team_name,\n  team == away_team_name ~ home_team_name\n))\n\noppwinlosslogs <- logs %>% mutate(winloss = case_when(\n  grepl(\"W\", win) ~ 0, \n  grepl(\"L\", win) ~ 1)\n) %>% filter(date < \"2022-03-14\")\n\nSo now we have a dataframe called oppwinlosslogs that has an inverted winloss column. So now we can group by the Opponent and sum the wins and it will tell us how many games the Opponent won. We can also count the wins and get a winning percentage.\n\noppwinlosslogs %>% group_by(opponent) %>% summarise(games=n(), wins=sum(win)) %>% mutate(winpct = wins/games) -> opprecord\n\nNow we have a dataframe of 1,316 opponent winning records. Wait, what? There’s like ~350 teams in major college basketball, so why 1,316? If you look through it, there’s a bunch of teams playing lower level teams. Given that they are lower level, they’re likely cannon fodder and will lose the game, and we’re going to filter them out in a minute.\nNow we can join the opponent winning percentage to our winlosslogs data so we can answer our question about quality wins.\n\nwinlosslogs <- logs %>% mutate(winloss = case_when(\n  grepl(\"W\", win) ~ 1, \n  grepl(\"L\", win) ~ 0)\n) %>% filter(date < \"2022-03-13\")\n\n\nwinlosslogs %>% left_join(opprecord, by=(\"opponent\")) -> winswithopppct\n\nNow that we have a table called winswithopppct, we can filter out non-power 5 teams and teams that won less than 60 percent of their games and run the same calculations in the book.\n\np5 <- c(\"SEC\", \"Big Ten\", \"Pac-12\", \"Big 12\", \"ACC\")\n\n\nwinswithopppct %>% filter(winpct > .6) %>% mutate(week = floor_date(date, unit=\"weeks\")) %>% group_by(week, conference) %>% summarise(wins=sum(win)) %>% filter(conference %in% p5) -> qualitywins\n\n`summarise()` has grouped output by 'week'. You can override using the\n`.groups` argument.\n\n\nNow with our dataframe called qualitywins, we can chart it again.\n\nggplot() + geom_bar(data=qualitywins, aes(x=week, weight=wins, fill=conference)) + theme_minimal() + coord_polar()\n\n\n\n\nLook at this chart and compare it to the first one."
  },
  {
    "objectID": "wafflecharts.html",
    "href": "wafflecharts.html",
    "title": "18  Waffle charts",
    "section": "",
    "text": "Pie charts are the devil. They should be an instant F in any data visualization class. The problem? How carefully can you evaluate angles and area? Unless they are blindingly obvious and only a few categories, not well. If you’ve got 25 categories, how can you tell the difference between 7 and 9 percent? You can’t.\nSo let’s introduce a better way: The Waffle Chart. Some call it a square pie chart. I personally hate that. Waffles it is.\nA waffle chart is designed to show you parts of the whole – proportionality. How many yards on offense come from rushing or passing. How many singles, doubles, triples and home runs make up a teams hits. How many shots a basketball team takes are two pointers versus three pointers.\nFirst, install the library in the console. We want a newer version of the waffle library than is in CRAN – where you normally get libraries from – so copy and paste this into your console:\ninstall.packages(\"waffle\")\nNow load it:"
  },
  {
    "objectID": "wafflecharts.html#making-waffles-with-vectors",
    "href": "wafflecharts.html#making-waffles-with-vectors",
    "title": "18  Waffle charts",
    "section": "18.1 Making waffles with vectors",
    "text": "18.1 Making waffles with vectors\nLet’s look at Maryland’s football bowl game win over Virginia Tech last year. Here’s the box score, which we’ll use for this part of the walkthrough.\nMaybe the easiest way to do waffle charts, at least at first, is to make vectors of your data and plug them in. To make a vector, we use the c or concatenate function.\nSo let’s look at offense. Rushing vs passing.\n\nmd <- c(\"Rushing\"=206, \"Passing\"=275)\nvt <- c(\"Rushing\"=122, \"Passing\"=137)\n\nSo what does the breakdown of the night look like?\nThe waffle library can break this down in a way that’s easier on the eyes than a pie chart. We call the library, add the data, specify the number of rows, give it a title and an x value label, and to clean up a quirk of the library, we’ve got to specify colors.\n\nwaffle(\n        md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n)\n\n\n\n\nOr, we could make this two teams in the same chart.\n\npassing <- c(\"Maryland\"=275, \"Virginia Tech\"=137)\n\n\nwaffle(\n        passing, \n        rows = 10, \n        title=\"Maryland vs Virginia Tech: passing\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"red\", \"black\")\n)\n\n\n\n\nSo what does it look like if we compare the two teams using the two vectors in the same chart? To do that – and I am not making this up – you have to create a waffle iron. Get it? Waffle charts? Iron?\n\niron(\n waffle(md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(vt, \n        rows = 10, \n        title=\"Virginia Tech's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        )\n)\n\n\n\n\nWhat do you notice about this chart? Notice how the squares aren’t the same size? Well, Maryland out-gained Virginia Tech by a long way. So the squares aren’t the same size because the numbers aren’t the same. We can fix that by adding an unnamed padding number so the number of yards add up to the same thing. Let’s make the total for everyone be 481, Maryland’s total yards of offense. So to do that, we need to add a padding of 222 to Virginia Tech. REMEMBER: Don’t name it or it’ll show up in the legend.\n\nmd <- c(\"Rushing\"=206, \"Passing\"=275)\nvt <- c(\"Rushing\"=122, \"Passing\"=137, 222)\n\nNow, in our waffle iron, if we don’t give that padding a color, we’ll get an error. So we need to make it white. Which, given our white background, means it will disappear.\n\niron(\n waffle(md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(vt, \n        rows = 10, \n        title=\"Virginia Tech's offense\", \n        xlab=\"1 square = 1 yard\",\n        colors = c(\"orange\", \"brown\", \"white\")\n        )\n)\n\n\n\n\nOne last thing we can do is change the 1 square = 1 yard bit – which makes the squares really small in this case – by dividing our vector. Look, it’s math on vectors!\n\niron(\n waffle(md/2, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(vt/2, \n        rows = 10, \n        title=\"Virginia Tech's offense\", \n        xlab=\"1 square = 1 yard\",\n        colors = c(\"orange\", \"brown\", \"white\")\n        )\n)\n\n\n\n\nNews flash: Virginia Tech is changing its fight song to “Everybody Hurts” by REM."
  },
  {
    "objectID": "stepcharts.html",
    "href": "stepcharts.html",
    "title": "19  Step charts",
    "section": "",
    "text": "There’s great examples out there. First is the Washignton Post looking at Lebron passing Jordan’s career point total. Another is John Burn-Murdoch’s work at the Financial Times (which is paywalled) about soccer stars. Here’s an example of his work outside the paywall.\nTo replicate this, we need cumulative data – data that is the running total of data at a given point. So think of it this way – Maryland scores 50 points in a basketball game and then 50 more the next, their cumulative total at two games is 100 points.\nStep charts can be used for all kinds of things – showing how a player’s career has evolved over time, how a team fares over a season, or franchise history. Let’s walk through an example.\nLet’s look at Fred Hoiberg’s team last season.\nFor this walkthrough:\n   Download csv file\n\nWe’ll need the tidyverse.\n\nlibrary(tidyverse)\n\nAnd we need to load our logs data we just downloaded.\n\nlogs <- read_csv(\"data/logs21.csv\")\n\nRows: 8229 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHere we’re going to look at the scoring differential of teams. If you score more than your opponent, you win. So it stands to reason that if you score a lot more than your opponent over the course of a season, you should be very good, right? Let’s see.\nThe first thing we’re going to do is calculate that differential. Then, we’ll group it by the team. After that, we’re going to summarize using a new function called cumsum or cumulative sum – the sum for each game as we go forward. So game 1’s cumsum is the differential of that game. Game 2’s cumsum is Game 1 + Game 2. Game 3 is Game 1 + 2 + 3 and so on.\n\ndifflogs <- logs %>% \n  mutate(Differential = TeamScore - OpponentScore) %>% \n  group_by(Team) %>% \n  mutate(CumDiff = cumsum(Differential))\n\nNow that we have the cumulative sum for each, let’s filter it down to just Big Ten teams.\n\nbigdiff <- difflogs %>% filter(Conference == \"Big Ten\")\n\nThe step chart is it’s own geom, so we can employ it just like we have the others. It works almost exactly the same as a line chart, but it uses the cumulative sum instead of a regular value and, as the name implies, creates a step like shape to the line instead of a curve.\n\nggplot() + geom_step(data=bigdiff, aes(x=Date, y=CumDiff, group=Team))\n\n\n\n\nLet’s try a different element of the aesthetic: color, but this time inside the aesthetic. Last time, we did the color outside. When you put it inside, you pass it a column name and ggplot will color each line based on what thing that is, and it will create a legend that labels each line that thing.\n\nggplot() + geom_step(data=bigdiff, aes(x=Date, y=CumDiff, group=Team, color=Team))\n\n\n\n\nFrom this, we can see a handful of teams in the Big Ten had negative point differentials last season. But which is which? And which one is Maryland? Too many colors and it’s too hard to tell. How to sort that out? Let’s add some helpers beyond layering.\nLet’s look at the top team plus Maryland.\n\numd <- bigdiff %>% filter(Team == \"Maryland\")\nil <- bigdiff %>% filter(Team == \"Illinois\")\n\nLet’s introduce a couple of new things here. First, note when I take the color OUT of the aesthetic, the legend disappears.\nThe second thing I’m going to add is the annotation layer. In this case, I am adding a text annotation layer, and I can specify where by adding in a x and a y value where I want to put it. This takes some finesse. After that, I’m going to add labels and a theme.\n\nggplot() + \n  geom_step(data=bigdiff, aes(x=Date, y=CumDiff, group=Team), color=\"light grey\") +\n  geom_step(data=umd, aes(x=Date, y=CumDiff, group=Team), color=\"red\") + \n  geom_step(data=il, aes(x=Date, y=CumDiff, group=Team), color=\"orange\") +\n  annotate(\"text\", x=(as.Date(\"2021-02-10\")), y=-70, label=\"Maryland\") +\n  annotate(\"text\", x=(as.Date(\"2021-03-01\")), y=330, label=\"Illinois\") +\n  labs(\n    x=\"Date\", \n    y=\"Cumulative Point Differential\", \n    title=\"Maryland's late charge\", \n    subtitle=\"The Terps started solidly but didn't gain much until late in the season.\", \n    caption=\"Source: Sports-Reference.com | By Derek Willis\") +\n  theme_minimal()"
  },
  {
    "objectID": "dumbbellcharts.html",
    "href": "dumbbellcharts.html",
    "title": "20  Dumbbell and lollipop charts",
    "section": "",
    "text": "Second to my love of waffle charts because I’m always hungry, dumbbell charts are an excellently named way of showing the difference between two things on a number line – a start and a finish, for instance. Or the difference between two related things. Say, turnovers and assists.\nLollipop charts – another excellent name – are a variation on bar charts. They do a good job of showing magnitude and difference between things.\nTo use both of them, you need to add a new library:\ninstall.packages(\"ggalt\")\nLet’s give it a whirl."
  },
  {
    "objectID": "dumbbellcharts.html#dumbbell-plots",
    "href": "dumbbellcharts.html#dumbbell-plots",
    "title": "20  Dumbbell and lollipop charts",
    "section": "20.1 Dumbbell plots",
    "text": "20.1 Dumbbell plots\nFor this, let’s use college football game logs from last season.\nFor this walkthrough:\n   Download csv file\n\nAnd load it.\n\nlogs <- read_csv(\"data/footballlogs21.csv\")\n\nRows: 1655 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nFor the first example, let’s look at the difference between a team’s giveaways – turnovers lost – versus takeaways, turnovers gained. To get this, we’re going to add up all offensive turnovers and defensive turnovers for a team in a season and take a look at where they come out. To make this readable, I’m going to focus on the Big Ten.\n\nturnovers <- logs %>%\n  group_by(Team, Conference) %>% \n  summarise(\n    Giveaways = sum(TotalTurnovers), \n    Takeaways = sum(DefTotalTurnovers)) %>%\n  filter(Conference == \"Big Ten Conference\")\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nNow, the way that the geom_dumbbell works is pretty simple when viewed through what we’ve done before. There’s just some tweaks.\nFirst: We start with the y axis. The reason is we want our dumbbells going left and right, so the label is going to be on the y axis.\nSecond: Our x is actually two things: x and xend. What you put in there will decide where on the line the dot appears.\n\nggplot() + \n  geom_dumbbell(\n    data=turnovers, \n    aes(y=Team, x=Takeaways, xend=Giveaways)\n  )\n\n\n\n\nWell, that’s a chart alright, but what dot is the giveaways and what are the takeaways? To fix this, we’ll add colors.\nSo our choice of colors here is important. We want giveaways to be seen as bad and takeaways to be seen as good. So lets try red for giveaways and green for takeaways. To make this work, we’ll need to do three things: first, use the English spelling of color, so colour. The, uh, colour is the bar between the dots, the x_colour is the color of the x value dot and the xend_colour is the color of the xend dot. So in our setup, takeaways are x, they’re good, so they’re green.\n\nggplot() + \n  geom_dumbbell(\n    data=turnovers, \n    aes(y=Team, x=Takeaways, xend=Giveaways),\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\")\n\n\n\n\nBetter. Let’s make two more tweaks. First, let’s make the whole thing bigger with a size element. And let’s add theme_minimal to clean out some cruft.\n\nggplot() + \n  geom_dumbbell(\n    data=turnovers, \n    aes(y=Team, x=Takeaways, xend=Giveaways),\n    size = 1,\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") + \n  theme_minimal()\n\n\n\n\nAnd now we have a chart that tells a story – got green on the right? That’s good. A long distance between green and red? Better. But what if we sort it by good turnovers?\n\nggplot() + \n  geom_dumbbell(\n    data=turnovers, \n    aes(y=reorder(Team, Takeaways), x=Takeaways, xend=Giveaways),\n    size = 1,\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") + \n  theme_minimal()\n\n\n\n\nBelieve it or not, Iowa had the most takeaways in the Big Ten this season."
  },
  {
    "objectID": "dumbbellcharts.html#lollipop-charts",
    "href": "dumbbellcharts.html#lollipop-charts",
    "title": "20  Dumbbell and lollipop charts",
    "section": "20.2 Lollipop charts",
    "text": "20.2 Lollipop charts\nSticking with takeaways, lollipops are similar to bar charts in that they show magnitude. And like dumbbells, they are similar in that we start with a y – the traditional lollipop chart is on its side – and we only need one x. The only additional thing we need to add is that we need to tell it that it is a horizontal chart.\n\nggplot() + \n  geom_lollipop(\n    data=turnovers, \n    aes(y=Team, x=Takeaways), \n    horizontal = TRUE\n    )\n\n\n\n\nWe can do better than this with a simple theme_minimal and some better labels.\n\nggplot() + \n  geom_lollipop(\n    data=turnovers, \n    aes(y=reorder(Team, Takeaways), x=Takeaways), \n    horizontal = TRUE\n    ) + theme_minimal() + \n  labs(title = \"Nebraska's defense improved, but needs more takeaways\", y=\"Team\")\n\n\n\n\nHow about some layering?\n\nnu <- turnovers %>% filter(Team == \"Nebraska\")\n\n\nggplot() + \n  geom_lollipop(\n    data=turnovers, \n    aes(y=reorder(Team, Takeaways), x=Takeaways), \n    horizontal = TRUE\n    ) + \n  geom_lollipop(\n    data=nu,\n    aes(y=Team, x=Takeaways),\n    horizontal = TRUE,\n    color = \"red\"\n  ) + \n  theme_minimal() + \n  labs(title = \"Nebraska's defense wasn't as bad as you think\", y=\"Team\")\n\n\n\n\nThe headline says it all."
  },
  {
    "objectID": "scatterplots.html",
    "href": "scatterplots.html",
    "title": "21  Scatterplots",
    "section": "",
    "text": "On the Monday, Sept. 21, 2020 edition of the Pick Six Podcast, Omaha World Herald reporter Sam McKewon talked a little about the Nebraska mens basketball team. Specifically the conversation was about a new roster release, and how the second year of Fred Hoiberg ball was going to look very different, starting with the heights of the players. After a near complete roster turnover, the players on the team now were nearly all taller than 6’4”, and one of the shorter ones is penciled in as the starting point guard.\nWhy is that important? One reason, McKewon posited, is that teams made a lot of three point shots on Nebraska. In fact, Nebraska finished dead last in the conference in three points shots made against them. McKewon chalked this up to bad perimeter defense, and that Nebraska needed to improve it. Being taller – or more specifically having the longer arms that go with being taller – will help with that, McKewon said.\nBetter perimeter defense, better team.\nWell, we know how the season went: 7 wins, same as the previous year.\nBut the question before you is this: is what McKewon said true? Does keeping a lid on your opponent’s ability to score three pointers mean more wins?\nThis is what we’re going to start to answer today. And we’ll do it with scatterplots and regressions. Scatterplots are very good at showing relationships between two numbers.\nFirst, we need libraries and every college basketball game from the 2019-2020 season. Why that season? Because I did this with the COVID season and everything was wonky and made no sense. To make it make sense, you had to do a ton of twisting and turning and that was pointless. What we’re interested in is less about a specific team and more about a general point: Are these numbers related and by how much? What can they tell you about your team in general?\nLoad the tidyverse.\nAnd the data.\nTo do this, we need all teams and their season stats. How much, team to team, does a thing matter? That’s the question you’re going to answer.\nIn our case, we want to know how much do three point shots made influence wins? How much difference can we explain in wins by knowing how many threes the other team made against you? We’re going to total up the number of threes each team allowed and their season wins in one swoop.\nTo do this, we need to use conditional logic – case_when in this case – to determine if the team won or lost the game. In this case, we’ll create a new column called winloss. Case when statements can be read like this: When This is True, Do This. This bit of code – which you can use in a lot of contexts in this class – uses the grepl function to look for the letter W in the W_L column and, if it finds it, makes winloss 1. If it finds an L, it makes it 0. Sum your winloss column and you have your season win total. The reason we have to use grepl to find W or L is because Sports Reference will record overtime wins differently than regular wins. Same with losses.\nNow we can get a dataframe together that gives us the total wins for each team, and the total three point shots made. We’ll call that new dataframe threedef.\nNow let’s look at the scatterplot. With a scatterplot, we put what predicts the thing on the X axis, and the thing being predicted on the Y axis. In this case, X is our three pointers given up, y is our wins.\nLet’s talk about this. This seems kind of random, but clustered around the middle. There’s not really a clear pattern here. But can we get a better sense of this? Yes, by adding another geom – geom_smooth. It’s identical to our geom_point, but we add a method to the end, which in this case we’re using the linear method or lm.\nA straight line across is bad. It means there’s no pattern here. The numbers don’t suggest anything. The dots are very spread out. Which is a clue that you should be asking a question here: how strong of a relationship is this? How much can threes given up explain wins? Can we put some numbers to this?\nOf course we can. We can apply a linear model to this – remember Chapter 9? We’re going to create an object called fit, and then we’re going to put into that object a linear model – lm – and the way to read this is “wins are predicted by opponent threes”. Then we just want the summary of that model.\nRemember from Chapter 9: There’s just a few things you really need.\nThe first thing: R-squared. In this case, the Adjusted R-squared value is -0.0004098, which we can interpret as the number of threes the opponent makes predicts about a teeny tiny percent of the variance in wins. Which sounds not great.\nSecond: The P-value. We want anything less than .05. If it’s above .05, the difference between them is not statistically significant – it’s probably explained by random chance. In our case, we have 0.7106. Is that more than .05? Yes. Yes it is. So this is random. There’s no relationship between the number of threes the opponent makes and the number of wins a team has.\nNormally, we’d stop here, but let’s look at the third element: The coefficient. In this case, the coefficient for TeamOpp3P is -0.001400. What this model predicts, given that and the intercept of 17.199150, is this: Every team starts with about 17 wins. For every 100 three pointers the other team makes, you lose .14 games off that total. So if you give up 100 threes in a season, you’ll be a 17 win team. Give up 200, you’re closer to a 16 win team, and so on. How am I doing that? Remember your algebra and y = mx + b. In this case, y is the wins, m is the coefficient, x is the number of threes given up and b is the intercept.\nLet’s use Maryland as an example. They had 227 threes scored on them in the 2019-2020 season.\ny = -0.001400 * 227 + 17.199150 or 16.8 wins.\nHow many wins did Maryland have? 24.\nWhat does that mean? It means that Maryland OVERPERFORMED according to this model. But our R-squared is so small that even if this weren’t random, it would be largely pointless. Put another way: more than 99 percent of the difference in wins between teams is predicted by something else.\nWhere is Maryland on the plot? We know we can use layering for that."
  },
  {
    "objectID": "scatterplots.html#lets-see-it-work",
    "href": "scatterplots.html#lets-see-it-work",
    "title": "21  Scatterplots",
    "section": "21.1 Let’s see it work",
    "text": "21.1 Let’s see it work\nOne thing we do know is related is shooting percentage. Shoot better, win games. Simple. But how well does that work?\nWe could just average together each team’s shooting night, but this isn’t the same thing as the season shooting average. It’s the average of shooting percentages. To get the season average, we have to sum attempts and makes and do the math ourselves. Averaging the percentages will get us close, but be careful when you do things like this that you’re describing your number correctly.\nLet’s do this the hard – read: correct – way.\n\nshooting <- winlosslogs %>% \n  group_by(Team, season) %>% \n  summarise(\n    Wins = sum(winloss), \n    Shots = sum(TeamFGA),\n    Makes = sum(TeamFG)\n    ) %>% \n  mutate(AvgShootingPct = Makes/Shots) %>% \n  na.omit()\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nNow we can chart it and see what our relationship looks like.\n\nggplot() + \n  geom_point(data=shooting, aes(x=AvgShootingPct, y=Wins)) +\n  geom_smooth(data=shooting, aes(x=AvgShootingPct, y=Wins), method=\"lm\")\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nThis is what a positive relationship looks like – sloping up and to the right. The better you shoot, the more you win. If it were reversed – the better you shot, the fewer wins you got, the line would start at the top left and go down to the right. The direction of the line indicates the relationship between the numbers.\nLet’s get our linear regression stats.\n\nshootfit <- lm(Wins ~ AvgShootingPct, data = shooting)\nsummary(shootfit)\n\n\nCall:\nlm(formula = Wins ~ AvgShootingPct, data = shooting)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.6777  -3.3738  -0.0529   3.0892  17.2843 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)     -50.733      1.862  -27.24   <2e-16 ***\nAvgShootingPct  153.367      4.218   36.36   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.91 on 2106 degrees of freedom\nMultiple R-squared:  0.3857,    Adjusted R-squared:  0.3854 \nF-statistic:  1322 on 1 and 2106 DF,  p-value: < 2.2e-16\n\n\nThe p-value isn’t random. The adjusted R-squared is pushing 40 percent. We’ve got something here. Let’s use our coefficients to look at Maryland’s 2019-2020 season (not the COVID season, because all the numbers are super weird in that season).\n\n(153.942 * .419) + -50.733 \n\n[1] 13.7687\n\n\nSo this model says that based only on Maryland’s shooting percentage, they should have won 13 or 14 games. They won 24. So per our model, Maryland overperformed. Obviously there’s room for improvement in the model here, but you can see the power in scatterplots + regression."
  },
  {
    "objectID": "bubblecharts.html",
    "href": "bubblecharts.html",
    "title": "22  Bubble charts",
    "section": "",
    "text": "If you want to see it work spectacularly well, watch a semi-famous Ted Talk by Hans Rosling from 2006 where bubble charts were the centerpiece. It’s worth watching. It’ll change your perspective on the world. No seriously. It will.\nAnd since then, people have wanted bubble charts. And we’re back to the original problem: They’re hard. There’s a finite set of circumstances where they work.\nFirst, I’m going to show you an example of them not working to illustrate the point.\nI’m going to load up my libraries.\n\nlibrary(tidyverse)\n\nSo for this example, I want to look at where Big Ten teams compare to the rest of college football last season. Is the Big Ten’s reputation for tough games and defenses earned? Can we see patterns in good team vs bad teams?\nI’m going to create a scatterplot with offensive yards per play on the X axis and defensive yards per play on the y axis. We can then divide the grid into four quadrants. Teams with high yards per offensive play and low defensive yards per play are teams with good offenses and good defenses. The opposite means bad defense, bad offense. Then, to drive the point home, I’m going to make the dot the size of the total wins on the season – the bubble in my bubble charts.\nWe’ll use last season’s college football games.\nFor this walkthrough:\n   Download csv file\n\nAnd load it.\n\nlogs <- read_csv(\"data/footballlogs21.csv\")\n\nRows: 1655 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nTo do this, I’ve got some work to do. First, I need to mutate the outcomes of the games into 1s and 0s so I can add up the wins. We’ve done this before, so this won’t be new to you, just adjusted slightly from basketball data.\n\nwinlosslogs <- logs %>% \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\nNow I have some more work to do. My football logs data has the yards per play of each game, and I could average those together and get something very close to what I’m going to do, but averaging each games yards per play is not the same thing as calculating it, so we’re going to calculate it.\n\nwinlosslogs %>% \n  group_by(Team, Conference) %>% \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) %>% \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -> ypp\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nA bubble chart is just a scatterplot with one additional element in the aesthetic – a size. Here’s the scatterplot version.\n\nggplot() + \n  geom_point(\n    data=ypp, aes(x=OffensiveYPP, y=DefensiveYPP)\n    )\n\n\n\n\nLooks kind of random, eh? In this case, that’s not that bad because we’re not claiming a relationship. We’re saying the location on the chart has meaning. So, do teams on the bottom right – good offense, good defense – win more games?\nLet’s add the size element.\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins)\n    )\n\n\n\n\nWhat does this chart tell you? We can see a general pattern that there are more big dots on the bottom right than the upper left. But we can make this more readable by adding an alpha element outside the aesthetic – alpha in this case is transparency – and we can manually change the size of the dots by adding scale_size and a range.\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins),\n    alpha = .3) + \n  scale_size(range = c(3, 8), name=\"Wins\")\n\n\n\n\nAnd by now, you now know to add in the Big Ten as a layer, I would hope.\n\nbigten <- ypp %>% filter(Conference == \"Big Ten Conference\")\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\")\n\n\n\n\nLet’s add some things to this chart to help us out. First, let’s add lines that show us the average of all teams for those two metrics. So first, we need to calculate those. Because I have grouped data, it’s going to require me to ungroup it so I can get just the total average of those two numbers.\n\nypp %>% \n  ungroup() %>% \n  summarise(\n    offense = mean(OffensiveYPP), \n    defense = mean(DefensiveYPP)\n    )\n\n# A tibble: 1 × 2\n  offense defense\n    <dbl>   <dbl>\n1    5.79    5.66\n\n\nNow we can use those averages to add two more geoms – geom_vline and geom_hline, for vertical lines and horizontal lines.\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.863151) + \n  geom_hline(yintercept = 5.448228)\n\n\n\n\nNow, let’s add another new geom for us, using a new library called ggrepel, which will help us label the dots without overwriting other labels. So we’ll have to install that in the console:\n`install.packages(“ggrepel”)\n\nlibrary(ggrepel)\n\nAnd with that, we can add labels to the dots. The geom_text_repel is pretty much the exact same thing as your Big Ten geom point, but instead of a size, you include a label.\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.863151) + \n  geom_hline(yintercept = 5.448228) +\n  geom_text_repel(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)\n  )\n\n\n\n\nWell, what do you know about that? Maryland was … really a mixed bag this season.\nAll that’s left is some labels and some finishing touches.\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.863151) + \n  geom_hline(yintercept = 5.448228) +\n  geom_text_repel(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)\n  ) +\n  labs(title=\"Is Maryland moving up to the Big Ten's best?\", subtitle=\"The Terps offense and defense puts it among ranked teams in the conference.\", caption=\"Source: NCAA | By Derek Willis\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )"
  },
  {
    "objectID": "beeswarmplots.html",
    "href": "beeswarmplots.html",
    "title": "23  Beeswarm plots",
    "section": "",
    "text": "A beeswarm plot is sometimes called a column scatterplot. It’s an effective way to show how individual things – teams, players, etc. – are distributed along a numberline. The column is a grouping – say positions in basketball – and the dots are players, and the dots cluster where the numbers are more common. So think of it like a histogram mixed with a scatterplot crossed with a bar chart.\nAn example will help.\nFirst things first: Install ggbeeswarm with install.packages(\"ggbeeswarm\")\nLike ggalt and ggrepel, ggbeeswarm adds a couple new geoms to ggplot. We’ll need to load it, the tidyverse and, for later, ggrepel.\nAnother bit of setup: we need to set the seed for the random number generator. The library “jitters” the dots in the beeswarm randomly. If we don’t set the seed, we’ll get different results each time. Setting the seed means we get the same look.\nSo let’s look at last year’s women’s basketball team as a group of shooters. The team didn’t have the kind of success that was envisioned – we know that – but what kind of a problem is it going to be that we’re returning one regular starter (Diamond Miller) from it?\nFirst we’ll load our player data.\nWe know this data has a lot of players who didn’t play, so let’s get rid of them.\nNow let’s ask what makes a good shooter? The best measure, in my book, is True Shooting Percentage. It’s a combination of weighted field goal shooting – to account for three pointers – and free throws. Let’s calculate that and add it to our data.\nIf we include all players, we’ll have too many dots. So let’s narrow it down. A decent tool for cutoffs? Field goal attempts. Let’s get a quick look at them.\nThe median number of shots is 99, but we only really care about good ones. So let’s use 197 attempts – the third quartile – as our cutoff.\nNow we’ve got enough for a beeswarm plot. It works very much like you would expect – the group value is the x, the number is the y. We’re going to beeswarm by position, and the dots will be true shooting percentage.\nYou can see that there’s a lot fewer centers who have attempted more than 152 shots than guards, but then there’s a lot more guards in college basketball than anything else. In the guards column, note that fat width of the swarm is between .5 and .6. So that means most guards who shoot more than 197 shots end up in that area. They’re the average shooter at that level. You can see, some are better, some are worse.\nSo where are the Maryland players in that mix?\nWe’ll filter players on Maryland who meet our criteria.\nSeven Cornhuskers took more than 197 shots. Number returning this season? Two.\nBut how good are they as true shooters?\nWhen you add another beeswarm, we need to pass another element in – we need to tell it if we’re grouping on the x value. Not sure why, but you’ll get a warning if you don’t.\nOne very good guard, and some good forwards. Who are they?\nThis is where we can use ggrepel. Let’s add a text layer and label the dots.\nSo Katie Benzan was our best shooter by true shooting percentage. Most of the rest were at or above average shooters for that volume of shooting, but Miller and Sellers are the returnees, and both were near average."
  },
  {
    "objectID": "beeswarmplots.html#a-few-other-options",
    "href": "beeswarmplots.html#a-few-other-options",
    "title": "23  Beeswarm plots",
    "section": "23.1 A few other options",
    "text": "23.1 A few other options\nThe ggbeeswarm library has a couple of variations on the geom_beeswarm that may work better for your application. They are geom_quasirandom and geom_jitter.\nThere’s not a lot to change from our example to see what they do.\n\nggplot() + \n  geom_quasirandom(\n    data=shooters, \n    groupOnX=TRUE, \n    aes(x=position, y=tspct), color=\"grey\") + \n  geom_quasirandom(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=position, y=tspct), color=\"red\") +\n  geom_text_repel(\n    data=umd, \n    aes(x=position, y=tspct, label=player))\n\n\n\n\nQuasirandom spreads out the dots you see in beeswarm using – you guessed it – quasirandom spacing.\nFor geom_jitter, we need to remove the groupOnX value. Why? No clue.\n\nggplot() + \n  geom_jitter(\n    data=shooters, \n    aes(x=position, y=tspct), color=\"grey\") + \n  geom_jitter(\n    data=umd, \n    aes(x=position, y=tspct), color=\"red\") +\n  geom_text_repel(\n    data=umd, \n    aes(x=position, y=tspct, label=player))\n\n\n\n\ngeom_jitter spreads out the dots evenly across the width of the column, randomly deciding where in the line of the true shooting percentage they appear.\nWhich one is right for you? You’re going to have to experiment and decide. This is the art in the art and a science."
  },
  {
    "objectID": "bumpcharts.html",
    "href": "bumpcharts.html",
    "title": "24  Bump charts",
    "section": "",
    "text": "The requirements are that you have a row of data for a team, in that week, with their rank.\nThis is another extension to ggplot, and you’ll install it the usual way: install.packages(\"ggbump\")\n\nlibrary(tidyverse)\nlibrary(ggbump)\n\nLet’s use the 2020-21 college football playoff rankings:\nFor this walkthrough:\n   Download csv file\n\n\nrankings <- read_csv(\"data/cfbranking.csv\")\n\nRows: 125 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Team, ShortTeam\ndbl (2): Rank, Week\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nGiven our requirements of a row of data for a team, in that week, with their rank, take a look at the data provided. We have 5 weeks of playoff rankings, so we should see a ranking, the week of the ranking and the team at that rank. You can see the basic look of the data by using head()\n\nhead(rankings)\n\n# A tibble: 6 × 4\n   Rank  Week Team    ShortTeam\n  <dbl> <dbl> <chr>   <chr>    \n1     1    17 Alabama Ala.     \n2     1    16 Alabama Ala.     \n3     1    15 Alabama Ala.     \n4     1    14 Alabama Ala.     \n5     1    13 Alabama Ala.     \n6    22    13 Auburn  Aub.     \n\n\nSo Alabama was ranked in the first (yawn), followed by Clemson (double yawn), Ohio State and so on. Our data is in the form we need it to be. Now we can make a bump chart. We’ll start simple.\n\nggplot() + \n  geom_bump(\n    data=rankings, aes(x=Week, y=Rank, color=Team))\n\nWarning in f(...): 'StatBump' needs at least two observations per group\n\nWarning in f(...): 'StatBump' needs at least two observations per group\n\nWarning in f(...): 'StatBump' needs at least two observations per group\n\n\n\n\n\nWell, it’s a start.\nThe warning that you’re seeing is that there’s three teams last season who made one appearance on the college football playoff rankings and disappeared. Some fans would bite your arm off for that. Alas. We should eliminate them and thin up our chart a little. Let’s just take teams that finished in the top 10. We’re going to use a neat filter trick for this that you learned earlier using %in%.\n\ntop10 <- rankings %>% filter(Week == 17 & Rank <= 10)\n\nnewrankings <- rankings %>% filter(Team %in% top10$Team)\n\nNow you have something called newrankings that shows how teams who finished in the top 10 at the end of the season ended up there. And every team who finished in the top 10 in week 17 had been in the rankings more than once in the 5 weeks before.\n\nggplot() + \n  geom_bump(\n    data=newrankings, aes(x=Week, y=Rank, color=Team))\n\n\n\n\nFirst things first: I’m immediately annoyed by the top teams being at the bottom. I learned a neat trick from ggbump that’s been in ggplot all along – scale_y_reverse()\n\nggplot() + \n  geom_bump(\n    data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  scale_y_reverse()\n\n\n\n\nBetter. But, still not great. Let’s add a point at each week.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +\n  scale_y_reverse() \n\n\n\n\nAnother step. That makes it more subway-map like. But the colors are all wrong. To fix this, we’re going to use scale_color_manual and we’re going to Google the hex codes for each team. The legend will tell you what order your scale_color_manual needs to be.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) + \n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n\n\n\n\nAnother step. But the legend is annoying. And trying to find which red is Alabama vs Ohio State is hard. So what if we labeled each dot at the beginning and end? We can do that with some clever usage of geom_text and a little dplyr filtering inside the data step. We filter out the first and last weeks, then use hjust – horizontal justification – to move them left or right.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = Team), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = Team), size = 3, hjust = 0) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n\n\n\n\nBetter, but the legend is still there. We can drop it in a theme directive by saying legend.position = \"none\". We’ll also throw a theme_minimal on there to drop the default grey, and we’ll add some better labeling.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = ShortTeam), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = ShortTeam), size = 3, hjust = 0) +\n  labs(title=\"Was COVID college football boring?\", subtitle=\"There was no drama at the top. None. So, yes?\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n\n\n\n\nNow let’s fix our text hierarchy.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = ShortTeam), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = ShortTeam), size = 3, hjust = 0) +\n  labs(title=\"Was COVID college football boring?\", subtitle=\"There was no drama at the top. None. So, yes?\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n\n\n\n\nAnd the last thing: anyone else annoyed at 7.5th place on the left? We can fix that too by specifying the breaks in scale_y_reverse. We can do that with the x axis as well, but since we haven’t reversed it, we do that in scale_x_continuous with the same breaks. Also: forgot my source and credit line.\nOne last thing: Let’s change the width of the chart to make the names fit. We can do that by adding fig.width=X in the {r} setup in your block. So something like this:\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = ShortTeam), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = ShortTeam), size = 3, hjust = 0) +\n  labs(title=\"Was COVID college football boring?\", subtitle=\"There was no drama at the top. None. So, yes?\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_x_continuous(breaks=c(13,14,15,16,17)) + \n  scale_y_reverse(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))"
  },
  {
    "objectID": "tables.html",
    "href": "tables.html",
    "title": "25  Tables",
    "section": "",
    "text": "Sometimes, the best way to show your data is with a table – simple rows and columns. It allows a reader to compare whatever they want to compare a little easier than a graph where you’ve chosen what to highlight. The folks that made R Studio and the tidyverse have a neat package called gt.\nFor this assignment, we’ll need gt so go over to the console and run:\ninstall.packages(\"gt\")\nSo what does all of these libraries do? Let’s gather a few and use data of every men’s basketball game between 2015-2020.\nFor this walkthrough:\n   Download csv file\n\nLoad libraries.\n\nlibrary(tidyverse)\nlibrary(gt)\n\nAnd the data.\n\nlogs <- read_csv(\"data/logs1520.csv\")\n\nRows: 68617 Columns: 44\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): HomeAway, Opponent, W_L, Team, Conference, season\ndbl  (36): X1, Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, T...\nlgl   (1): Blank\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet’s ask this question: which college basketball team saw the greatest increase in three point attempts last season as a percentage of shots? The simplest way to calculate that is by percent change.\nWe’ve got a little work to do, putting together ideas we’ve used before. What we need to end up with is some data that looks like this:\nTeam | 2018-2019 season threes | 2019-2020 season threes | pct change\nTo get that, we’ll need to do some filtering to get the right seasons, some grouping and summarizing to get the right number, some pivoting to get it organized correctly so we can mutate the percent change.\n\nthreechange <- logs %>%\n  filter(season == \"2018-2019\" | season == \"2019-2020\") %>%\n  group_by(Team, Conference, season) %>%\n  summarise(Total3PA = sum(Team3PA)) %>%\n  pivot_wider(names_from=season, values_from = Total3PA) %>%\n  mutate(PercentChange = (`2019-2020`-`2018-2019`)/`2018-2019`) %>%\n  arrange(desc(PercentChange)) %>% \n  ungroup() %>%\n  top_n(10) # just want a top 10 list\n\n`summarise()` has grouped output by 'Team', 'Conference'. You can override\nusing the `.groups` argument.\nSelecting by PercentChange\n\n\nWe’ve output tables to the screen a thousand times in this class with head, but gt makes them look decent with very little code.\n\nthreechange %>% gt()\n\n\n\n\n\n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      PercentChange\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n  \n\n\n\n\nSo there you have it. Mississippi Valley State changed their team so much they took 51 percent more threes in 2019-20 from the season before. Where did Maryland come out? We ranked 49th in college basketball in terms of change from the season before.\ngt has a mountain of customization options. The good news is that it works in a very familiar pattern. We’ll start with fixing headers. What we have isn’t bad, but PercentChange isn’t good either. Let’s fix that.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  )\n\n\n\n\n\n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n  \n\n\n\n\nBetter. Note the pattern: Actual header name = “What we want to see”. So if we wanted to change Team to School, we’d do this: Team = \"School\" inside the cols_label bits.\nNow we can start working with styling. The truth is most of your code in tables is going to be dedicated to styling specific things. The first thing we need: A headline and some chatter. They’re required parts of a graphic, so they’re a good place to start. We do that with tab_header\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Did Maryland Shoot More Threes in 2019-20?\",\n    subtitle = \"Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\"\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot More Threes in 2019-20?\n    \n    \n      Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n  \n\n\n\n\nWe have a headline and some chatter, but … gross. Centered? The extra lines? No real difference in font weight? We can do better. We can style individual elements using tab_style. First, let’s make the main headline – the title – bold and left aligned.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Did Maryland Shoot More Threes in 2019-20?\",\n    subtitle = \"Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot More Threes in 2019-20?\n    \n    \n      Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n  \n\n\n\n\nIt’s hard to see here, but the chatter below is also centered (it doesn’t look like it because it fills the space). We can left align that too, but leave it normal weight (i.e. not bold).\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Did Maryland Shoot More Threes in 2019-20?\",\n    subtitle = \"Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot More Threes in 2019-20?\n    \n    \n      Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n  \n\n\n\n\nThe next item on the required elements list: Source and credit lines. In gt, those are called tab_source_notes and we can add them like this:\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Did Maryland Shoot More Threes in 2019-20?\",\n    subtitle = \"Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot More Threes in 2019-20?\n    \n    \n      Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n    \n      By: Derek Willis  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nWe can do a lot with tab_style. For instance, we can make the headers bold and reduce the size a bit to reduce font congestion in the area.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Did Maryland Shoot More Threes in 2019-20?\",\n    subtitle = \"Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\"\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) \n\n\n\n\n\n  \n    \n      Did Maryland Shoot More Threes in 2019-20?\n    \n    \n      Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n    \n      By: Derek Willis  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nNext up: There’s a lot of lines in this that don’t need to be there. gt has some tools to get rid of them easily and add in some other readability improvements.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Did Maryland Shoot More Threes in 2019-20?\",\n    subtitle = \"Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\")\n\n\n\n\n\n  \n    \n      Did Maryland Shoot More Threes in 2019-20?\n    \n    \n      Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n    \n      By: Derek Willis  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nWe’re in pretty good shape here, but look closer. What else makes this table sub-par? How about the formatting of the percent change? We can fix that with a formatter.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Did Maryland Shoot More Threes in 2019-20?\",\n    subtitle = \"Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n    fmt_percent(\n    columns = c(PercentChange),\n    decimals = 1\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot More Threes in 2019-20?\n    \n    \n      Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n51.1%\n    Valparaiso Crusaders\nMVC\n585\n843\n44.1%\n    Ball State Cardinals\nMAC\n621\n842\n35.6%\n    San Jose State Spartans\nMWC\n641\n861\n34.3%\n    Alabama Crimson Tide\nSEC\n718\n957\n33.3%\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n26.4%\n    Georgia Southern Eagles\nSun Belt\n631\n792\n25.5%\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n25.2%\n    San Francisco Dons\nWCC\n728\n899\n23.5%\n    McNeese State Cowboys\nSouthland\n547\n675\n23.4%\n  \n  \n    \n      By: Derek Willis  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nThroughout the semester, we’ve been using color and other signals to highlight things. Let’s pretend we’re doing a project on Minnesota. Note they’re the only Big Ten team on this list. With a little tab_style magic, we can change individual rows and add color. The last tab_style block here will first pass off the styles we want to use – we’re going to make the rows maroon and the text gold – and then for locations we specify where with a simple filter. What that means is that any rows we can address with logic – all rows with a value greater than X, for example – we can change the styling.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Did Maryland Shoot More Threes in 2019-20?\",\n    subtitle = \"Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n    fmt_percent(\n    columns = c(PercentChange),\n    decimals = 1\n  ) %>%\n  tab_style(\n    style = list(\n      cell_fill(color = \"maroon\"),\n      cell_text(color = \"gold\")\n      ),\n    locations = cells_body(\n      rows = Team == \"Minnesota Golden Gophers\")\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot More Threes in 2019-20?\n    \n    \n      Yes, but it wasn't a big change. These 10 teams completely changed their offenses.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n51.1%\n    Valparaiso Crusaders\nMVC\n585\n843\n44.1%\n    Ball State Cardinals\nMAC\n621\n842\n35.6%\n    San Jose State Spartans\nMWC\n641\n861\n34.3%\n    Alabama Crimson Tide\nSEC\n718\n957\n33.3%\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n26.4%\n    Georgia Southern Eagles\nSun Belt\n631\n792\n25.5%\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n25.2%\n    San Francisco Dons\nWCC\n728\n899\n23.5%\n    McNeese State Cowboys\nSouthland\n547\n675\n23.4%\n  \n  \n    \n      By: Derek Willis  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nTwo things here:\n\nDear God that color scheme is awful, which is fitting for a school that worships a lawn-wrecking varmint.\nWe’ve arrived where we want to be: We’ve created a clear table that allows a reader to compare schools at will while also using color to draw attention to the thing we want to draw attention to. We’ve kept it simple so the color has impact."
  },
  {
    "objectID": "facetwraps.html",
    "href": "facetwraps.html",
    "title": "26  Facet wraps",
    "section": "",
    "text": "Sometimes the easiest way to spot a trend is to chart a bunch of small things side by side. Edward Tufte, one of the most well known data visualization thinkers on the planet, calls this “small multiples” where ggplot calls this a facet wrap or a facet grid, depending.\nOne thing we noticed earlier in the semester – it seems that a lot of teams shoot worse as the season goes on. Do they? We could answer this a number of ways, but the best way to show people would be visually. Let’s use Small Multiples.\nAs always, we start with libraries.\nWe’re going to use the logs of college basketball games last season.\nAnd load it.\nLet’s narrow our pile and look just at the Big Ten.\nThe first thing we can do is look at a line chart, like we have done in previous chapters.\nAnd, not surprisingly, we get a hairball. We could color certain lines, but that would limit us to focus on one team. What if we did all of them at once? We do that with a facet_wrap. The only thing we MUST pass into a facet_wrap is what thing we’re going to separate them out by. In this case, we precede that field with a tilde, so in our case we want the Team field. It looks like this:\nAnswer: Not immediately clear, but we can look at this and analyze it. We could add a piece of annotation to help us out.\nWhat do you see here? How do teams compare? How do they change over time? I’m not asking you these questions because they’re an assignment – I’m asking because that’s exactly what this chart helps answer. Your brain will immediately start making those connections."
  },
  {
    "objectID": "facetwraps.html#facet-grid-vs-facet-wraps",
    "href": "facetwraps.html#facet-grid-vs-facet-wraps",
    "title": "26  Facet wraps",
    "section": "26.1 Facet grid vs facet wraps",
    "text": "26.1 Facet grid vs facet wraps\nFacet grids allow us to put teams on the same plane, versus just repeating them. And we can specify that plane as vertical or horizontal. For example, here’s our chart from above, but using facet_grid to stack them.\n\nggplot() + \n  geom_hline(yintercept=0.4532143, color=\"blue\") + \n  geom_line(data=big10, aes(x=Date, y=TeamFGPCT, group=Team)) + \n  scale_y_continuous(limits = c(0, .7)) + \n  facet_grid(Team ~ .)\n\n\n\n\nAnd here they are next to each other:\n\nggplot() + \n  geom_hline(yintercept=0.4532143, color=\"blue\") + \n  geom_line(data=big10, aes(x=Date, y=TeamFGPCT, group=Team)) + \n  scale_y_continuous(limits = c(0, .7)) + \n  facet_grid(. ~ Team)\n\n\n\n\nNote: We’d have some work to do with the labeling on this – we’ll get to that – but you can see where this is valuable comparing a group of things. One warning: Don’t go too crazy with this or it loses it’s visual power."
  },
  {
    "objectID": "facetwraps.html#other-types",
    "href": "facetwraps.html#other-types",
    "title": "26  Facet wraps",
    "section": "26.2 Other types",
    "text": "26.2 Other types\nLine charts aren’t the only things we can do. We can do any kind of chart in ggplot. Staying with shooting, where are team’s winning and losing performances coming from when we talk about team shooting and opponent shooting?\n\nggplot() + \n  geom_point(data=big10, aes(x=TeamFGPCT, y=OpponentFGPCT, color=W_L)) +\n  scale_y_continuous(limits = c(0, .7)) + \n  scale_x_continuous(limits = c(0, .7)) + \n  facet_wrap(~Team)"
  },
  {
    "objectID": "cowplots.html",
    "href": "cowplots.html",
    "title": "27  Arranging multiple plots together",
    "section": "",
    "text": "Good news.\nThere is.\nIt’s called cowplot, and it’s pretty easy to use. First install cowplot with install.packages(\"cowplot\"). Then let’s load tidyverse and cowplot.\n\nlibrary(tidyverse)\nlibrary(cowplot)\n\nWe’ll use the college football attendance data we’ve used before.\nFor this walkthrough:\n   Download csv file\n\nAnd load it.\n\nattendance <- read_csv(\"data/attendance.csv\")\n\nRows: 149 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Institution, Conference\ndbl (7): 2013, 2014, 2015, 2016, 2017, 2018, 2019\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nMaking a quick percent change.\n\nattendance <- attendance %>% mutate(change = ((`2019`-`2018`)/`2018`)*100)\n\nLet’s chart the top 10 and bottom 10 of college football ticket growth … and shrinkage.\n\ntop10 <- attendance %>% top_n(10, wt=change)\nbottom10 <- attendance %>% top_n(10, wt=-change)\n\nOkay, now to do this I need to save my plots to an object. We do this the same way we save things to a dataframe – with the arrow. We’ll make two identical bar charts, one with the top 10 and one with the bottom 10.\n\nbar1 <- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip()\n\n\nbar2 <- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip()\n\nWith cowplot, we can use a function called plot_grid to arrange the charts:\n\nplot_grid(bar1, bar2) \n\n\n\n\nWe can also stack them on top of each other:\n\nplot_grid(bar1, bar2, ncol=1) \n\n\n\n\nTo make these publishable, we should add headlines, chatter, decent labels, credit lines, etc. But to do this, we’ll have to figure out which labels go on which charts, so we can make it look decent. For example – both charts don’t need x or y labels. If you don’t have a title and subtitle on both, the spacing is off, so you need to leave one blank or the other blank. You’ll just have to fiddle with it until you get it looking right.\n\nbar1 <- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip() + \n  labs(title=\"College football winners...\", subtitle = \"Not every football program saw attendance shrink in 2019. But some really did.\",  x=\"\", y=\"Percent change\", caption = \"\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nbar2 <- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip() +  \n  labs(title = \"... and losers\", subtitle= \"\", x=\"\", y=\"\",  caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nplot_grid(bar1, bar2) \n\n\n\n\nWhat’s missing here? Color. Our eyes aren’t drawn to anything (except maybe the top and bottom). So we need to help that. A bar chart without context or color to draw attention to something isn’t much of a bar chart. Same with a line chart – if your line chart has one line, no context, no color, it’s going to fare poorly.\n\nho <- bottom10 %>% filter(Institution == \"Houston\")\nks <- top10 %>% filter(Institution == \"Kansas\")\n\n\nbar1 <- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) + \n  geom_bar(data=ks, aes(x=reorder(Institution, change), weight=change), fill=\"#011E41\") + \n  coord_flip() + \n  labs(title=\"College football winners...\", subtitle = \"Not every football program saw attendance shrink in 2018. But some really did.\",  x=\"\", y=\"Percent change\", caption = \"\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nbar2 <- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) + \n  geom_bar(data=ho, aes(x=reorder(Institution, change), weight=change), fill=\"#006F71\") + \n  coord_flip() +  \n  labs(title = \"... and losers\", subtitle= \"\", x=\"\", y=\"\",  caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nplot_grid(bar1, bar2)"
  },
  {
    "objectID": "encirclingpoints.html",
    "href": "encirclingpoints.html",
    "title": "28  Encircling points on a scatterplot",
    "section": "",
    "text": "One thing we’ve talked about all semester is drawing attention to the thing you want to draw attention to. We’ve used color and labels to do that so far. Let’s add another layer to it – a shape around the points you want to highlight.\nRemember: The point of all of this is to draw the eye to what you are trying to show your reader. You want people to see the story you are trying to tell.\nIt’s not hard to draw a shape in ggplot – it is a challenge to put it in the right place. But, there is a library to the rescue that makes this super easy – ggalt.\nInstall it in the console with install.packages(\"ggalt\")\nThere’s a bunch of things that ggalt does, but one of the most useful for us is the function encircle. Let’s dive in.\nLet’s say we want to highlight the top scorers in women’s college basketball. So let’s use our player data.\nAnd while we’re loading it, let’s filter out anyone who hasn’t played.\nWe’ve done this before, but let’s make a standard scatterplot of minutes and points.\nSo we can see right away that there are some dots at the very top that we’d want to highlight. Who are these scoring machines?\nLike we have done in the past, let’s make a dataframe of top scorers. We’ll set the cutoff at 700 points in a season.\nAnd like we’ve done in the past, we can add it to the chart with another geom_point. We’ll make all the players grey, we’ll make all the top scorers black.\nAnd like that, we’re on the path to something publishable. We’ll need to label those dots with ggrepel and we’ll need to drop the default grey and add some headlines and all that. And, for the most part, we’ve got a solid chart.\nBut what if we could really draw the eye to those players. Let’s draw a circle around them. In ggalt, there is a new geom called geom_encircle, which … does what you think it does. It encircles all the dots in a dataset.\nSo let’s add geom_encircle and we’ll just copy the data and the aes from our topscorers geom_point. Then, we need to give the encirclement a shape using s_shape – which is a number between 0 and 1 – and then how far away from the dots to draw the circle using expand, which is another number between 0 and 1.\nLet’s start with s_shape 1 and expand 1.\nWhoa. That’s … not good.\nLet’s go the opposite direction.\nBetter, but … the circle cuts through multiple dots.\nThis takes a little bit of finessing, but a shape of .5 means the line will have some bend to it – it’ll look more like someone circled it with a pen. Then, the expand is better if you use hundredths instead of tenths. So .01 instead of .1. Here’s mine after fiddling with it for a bit, and I’ll add in player names as a label.\nNow let’s clean this up and make it presentable. If you look at the top scorers, four were Wooden Award finalists. So here’s what a chart telling that story might look like."
  },
  {
    "objectID": "encirclingpoints.html#a-different-more-local-example",
    "href": "encirclingpoints.html#a-different-more-local-example",
    "title": "28  Encircling points on a scatterplot",
    "section": "28.1 A different, more local example",
    "text": "28.1 A different, more local example\nYou can use circling outside of the top of something. It’s a bit obvious that the previous dots were top scorers. What about when they aren’t at the top?\nWorks the same way – use layering and color smartly and tell the story with all your tools.\nLet’s grab the top three point attempt takers on the Maryland roster. As of now, only one will be coming back.\n\nmdtop <- players %>% filter(team == \"Maryland\") %>% top_n(3, fg3a)\n\nAnd just like above, we can plug in our players geom, our mdtop dataframe into another geom, then encircle that dataframe. Slap some headlines and annotations on it and here’s what we get:\n\nggplot() + geom_point(data=players, aes(x=mp, y=fg3a), color=\"grey\") + geom_point(data=mdtop, aes(x=mp, y=fg3a), color=\"red\") + geom_encircle(data=mdtop, aes(x=mp, y=fg3a), s_shape=.02, expand=.18, colour=\"red\") +\n  geom_text(aes(x=400, y=100, label=\"Maryland's top three shooters\")) + \n  labs(title=\"The Big Three?\", subtitle=\"Maryland's top three point shooters not among the leaders in college basketball \", x=\"Minutes\", y=\"Three point attempts\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\nFrom the top, Maryland’s dots are Katie Benzan, Chloe Bibby and … Shyanne Sellers, the true freshman."
  },
  {
    "objectID": "textcleaning.html",
    "href": "textcleaning.html",
    "title": "29  Text cleaning",
    "section": "",
    "text": "On occasion, you’ll get some data from someone that … isn’t quite what you need it to be. There’s something flawed in it. Some extra text, some choice that the data provider made that you just don’t agree with.\nThere’s a ton of tools in the tidyverse to fix this, and you already have some tools in your toolbox. Let’s take a look at a couple.\nFirst, you know what you need.\nNow, two examples."
  },
  {
    "objectID": "textcleaning.html#stripping-out-text",
    "href": "textcleaning.html#stripping-out-text",
    "title": "29  Text cleaning",
    "section": "29.1 Stripping out text",
    "text": "29.1 Stripping out text\nThroughout this class, we’ve used data from Sports Reference. If you’ve used their Share > CSV method to copy data from a table, you may have noticed some extra cruft in the player name field. If you haven’t seen it, I’ll give you an example – a dataset of NBA players and their advanced metrics.\nFor this walkthrough:\n   Download csv file\n\nNow load it.\n\nnbaplayers <- read_csv(\"data/nbaplayers.csv\")\n\nNew names:\nRows: 624 Columns: 29\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): Player, Pos, Tm dbl (24): Rk, Age, G, MP, PER, TS%, 3PAr, FTr, ORB%, DRB%,\nTRB%, AST%, STL%,... lgl (2): ...20, ...25\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...20`\n• `` -> `...25`\n\n\nLet’s take a look:\n\nhead(nbaplayers)\n\n# A tibble: 6 × 29\n     Rk Player     Pos     Age Tm        G    MP   PER `TS%` `3PAr`   FTr `ORB%`\n  <dbl> <chr>      <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>\n1     1 \"Steven A… C        26 OKC      58  1564  20.8 0.605  0.007 0.413   14.4\n2     2 \"Bam Adeb… PF       22 MIA      65  2235  20.6 0.606  0.018 0.476    8.7\n3     3 \"LaMarcus… C        34 SAS      53  1754  19.8 0.571  0.198 0.241    6.3\n4     4 \"Nickeil … SG       21 NOP      41   501   7.6 0.441  0.515 0.123    1.7\n5     5 \"Grayson … SG       24 MEM      30   498  11.4 0.577  0.517 0.199    1.1\n6     6 \"Jarrett … C        21 BRK      64  1647  20.3 0.658  0.012 0.574   12.5\n# … with 17 more variables: `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>,\n#   `STL%` <dbl>, `BLK%` <dbl>, `TOV%` <dbl>, `USG%` <dbl>, ...20 <lgl>,\n#   OWS <dbl>, DWS <dbl>, WS <dbl>, `WS/48` <dbl>, ...25 <lgl>, OBPM <dbl>,\n#   DBPM <dbl>, BPM <dbl>, VORP <dbl>\n\n\nYou can see that every players name is their name, then two backslashes, then some version of their name that must have meaning to Sports Reference, but not to us. So we need to get rid of that.\nTo do this, we’re going to use a little regular expression magic. Regular expressions are a programmatic way to find any pattern in text. What we’re looking for is that \\\\ business. But, that presents a problem, because the \\ is a special character. It’s called an escape character. That escape character means what comes next is potentially special. For instance, if you see \\n, that’s a newline character. So normally, if you see that, it would add a return.\nSo for us to get rid of the \\ we’re going to have to escape the escape character with an escape character. And we have two of them. So we have to do it twice.\nYes. Really.\nSo if we wanted to find two backslashes, we need \\\\\\\\. Then, using regular expressions, we can say “and then everything else after this” with this: .*\nNo really. That’s it. So we’re looking for \\\\\\\\.*. That’ll find two backslashes and then everything after it. If you think this is hard … you’re right. Regular expressions are an entire month of a programming course by themselves. They are EXTREMELY powerful.\nTo find something in text, we’ll use a function called gsub. The pattern in gsub is pattern, what we want to replace it with, what column this can all be found in. So in our example, the pattern is \\\\\\\\.*, what we want to replace it with is … nothing, and this is all in the Player column. Here’s the code.\n\nnbaplayers %>% mutate(Player=gsub(\"\\\\\\\\.*\",\"\",Player)) %>% head()\n\n# A tibble: 6 × 29\n     Rk Player     Pos     Age Tm        G    MP   PER `TS%` `3PAr`   FTr `ORB%`\n  <dbl> <chr>      <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>\n1     1 Steven Ad… C        26 OKC      58  1564  20.8 0.605  0.007 0.413   14.4\n2     2 Bam Adeba… PF       22 MIA      65  2235  20.6 0.606  0.018 0.476    8.7\n3     3 LaMarcus … C        34 SAS      53  1754  19.8 0.571  0.198 0.241    6.3\n4     4 Nickeil A… SG       21 NOP      41   501   7.6 0.441  0.515 0.123    1.7\n5     5 Grayson A… SG       24 MEM      30   498  11.4 0.577  0.517 0.199    1.1\n6     6 Jarrett A… C        21 BRK      64  1647  20.3 0.658  0.012 0.574   12.5\n# … with 17 more variables: `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>,\n#   `STL%` <dbl>, `BLK%` <dbl>, `TOV%` <dbl>, `USG%` <dbl>, ...20 <lgl>,\n#   OWS <dbl>, DWS <dbl>, WS <dbl>, `WS/48` <dbl>, ...25 <lgl>, OBPM <dbl>,\n#   DBPM <dbl>, BPM <dbl>, VORP <dbl>\n\n\nJust like that, the trash is gone."
  },
  {
    "objectID": "textcleaning.html#another-example-splitting-columns",
    "href": "textcleaning.html#another-example-splitting-columns",
    "title": "29  Text cleaning",
    "section": "29.2 Another example: splitting columns",
    "text": "29.2 Another example: splitting columns\nText cleaning is really just a set of logic puzzles. What do I need to do? How can I get there step by step?\nThe NCAA does some very interesting things with data, making it pretty useless.\nFor this walkthrough:\n   Download csv file\n\nLet’s import it and take a look.\n\nkills <- read_csv(\"data/killsperset.csv\")\n\nRows: 150 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): Player, Cl, Ht, Pos, Season\ndbl (4): Rank, S, Kills, Per Set\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(kills)\n\n# A tibble: 6 × 9\n   Rank Player                      Cl    Ht    Pos       S Kills Per S…¹ Season\n  <dbl> <chr>                       <chr> <chr> <chr> <dbl> <dbl>   <dbl> <chr> \n1     1 Lindsey Ruddins, UC Santa … So.   6-2   OH       90   526    5.84 2017-…\n2     2 Pilar Victoria, Arkansas (… Sr.   5-11  OH      116   634    5.47 2017-…\n3     3 Laura Milos, Oral Roberts … Sr.   5-10  OH      106   560    5.28 2017-…\n4     4 Carlyle Nusbaum, Lipscomb … Jr.   5-10  OH      100   522    5.22 2017-…\n5     5 Veronica Jones-Perry, BYU … Jr.   6-0   OH      118   569    4.82 2017-…\n6     6 Torrey Van Winden, Cal Pol… So.   6-3   OH      101   477    4.72 2017-…\n# … with abbreviated variable name ¹​`Per Set`\n\n\nFirst things first, Player isn’t just player, it’s player, school and conference, all in one. And Ht is a character field – and in feet and inches.\nSo … this is a mess. But there is a pattern. See it? A comma after the player’s name. The Conference is in parens. We can use that.\nFor this, we’re going to use a tidyr function called separate to split columns into multiple columns based on a character. We’ll do this step by step.\nFirst, let’s use that comma to split the player and the rest. Ignore the head at the end. That’s just to keep it from showing you all 150.\n\nkills %>% separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>% head()\n\n# A tibble: 6 × 10\n   Rank Player               School Cl    Ht    Pos       S Kills Per S…¹ Season\n  <dbl> <chr>                <chr>  <chr> <chr> <chr> <dbl> <dbl>   <dbl> <chr> \n1     1 Lindsey Ruddins      \" UC … So.   6-2   OH       90   526    5.84 2017-…\n2     2 Pilar Victoria       \" Ark… Sr.   5-11  OH      116   634    5.47 2017-…\n3     3 Laura Milos          \" Ora… Sr.   5-10  OH      106   560    5.28 2017-…\n4     4 Carlyle Nusbaum      \" Lip… Jr.   5-10  OH      100   522    5.22 2017-…\n5     5 Veronica Jones-Perry \" BYU… Jr.   6-0   OH      118   569    4.82 2017-…\n6     6 Torrey Van Winden    \" Cal… So.   6-3   OH      101   477    4.72 2017-…\n# … with abbreviated variable name ¹​`Per Set`\n\n\nGood start.\nNow, let’s get the conference separated. A problem is going to crop up here – the paren is a special character, so we have to escape it with the \\\\.\n\nkills %>% \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>%\n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") %>% \n  head()\n\nWarning: Expected 2 pieces. Additional pieces discarded in 3 rows [15, 42, 83].\n\n\n# A tibble: 6 × 11\n   Rank Player       School Confe…¹ Cl    Ht    Pos       S Kills Per S…² Season\n  <dbl> <chr>        <chr>  <chr>   <chr> <chr> <chr> <dbl> <dbl>   <dbl> <chr> \n1     1 Lindsey Rud… \" UC … Big We… So.   6-2   OH       90   526    5.84 2017-…\n2     2 Pilar Victo… \" Ark… SEC)    Sr.   5-11  OH      116   634    5.47 2017-…\n3     3 Laura Milos  \" Ora… Summit… Sr.   5-10  OH      106   560    5.28 2017-…\n4     4 Carlyle Nus… \" Lip… ASUN)   Jr.   5-10  OH      100   522    5.22 2017-…\n5     5 Veronica Jo… \" BYU… WCC)    Jr.   6-0   OH      118   569    4.82 2017-…\n6     6 Torrey Van … \" Cal… Big We… So.   6-3   OH      101   477    4.72 2017-…\n# … with abbreviated variable names ¹​Conference, ²​`Per Set`\n\n\nUh oh. Says we have problems in rows 15, 42 and 83. What are they? The NCAA has decided to put (FL), (NY) and (PA) into three teams to tell you they’re in Florida, New York and Pennsylvania respectively. Well, we can fix that with some gsub and we’ll use a switch called fixed, which when set to TRUE it means this literal string, no special characters.\n\nkills %>% \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>% \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) %>%\n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") %>% \n  head()\n\n# A tibble: 6 × 11\n   Rank Player       School Confe…¹ Cl    Ht    Pos       S Kills Per S…² Season\n  <dbl> <chr>        <chr>  <chr>   <chr> <chr> <chr> <dbl> <dbl>   <dbl> <chr> \n1     1 Lindsey Rud… \" UC … Big We… So.   6-2   OH       90   526    5.84 2017-…\n2     2 Pilar Victo… \" Ark… SEC)    Sr.   5-11  OH      116   634    5.47 2017-…\n3     3 Laura Milos  \" Ora… Summit… Sr.   5-10  OH      106   560    5.28 2017-…\n4     4 Carlyle Nus… \" Lip… ASUN)   Jr.   5-10  OH      100   522    5.22 2017-…\n5     5 Veronica Jo… \" BYU… WCC)    Jr.   6-0   OH      118   569    4.82 2017-…\n6     6 Torrey Van … \" Cal… Big We… So.   6-3   OH      101   477    4.72 2017-…\n# … with abbreviated variable names ¹​Conference, ²​`Per Set`\n\n\nOne last thing: see the trailing paren?\n\nkills %>% \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>% \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) %>%\n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") %>% \n  mutate(Conference=gsub(\")\", \"\", Conference)) %>%\n  head()\n\n# A tibble: 6 × 11\n   Rank Player       School Confe…¹ Cl    Ht    Pos       S Kills Per S…² Season\n  <dbl> <chr>        <chr>  <chr>   <chr> <chr> <chr> <dbl> <dbl>   <dbl> <chr> \n1     1 Lindsey Rud… \" UC … Big We… So.   6-2   OH       90   526    5.84 2017-…\n2     2 Pilar Victo… \" Ark… SEC     Sr.   5-11  OH      116   634    5.47 2017-…\n3     3 Laura Milos  \" Ora… Summit… Sr.   5-10  OH      106   560    5.28 2017-…\n4     4 Carlyle Nus… \" Lip… ASUN    Jr.   5-10  OH      100   522    5.22 2017-…\n5     5 Veronica Jo… \" BYU… WCC     Jr.   6-0   OH      118   569    4.82 2017-…\n6     6 Torrey Van … \" Cal… Big We… So.   6-3   OH      101   477    4.72 2017-…\n# … with abbreviated variable names ¹​Conference, ²​`Per Set`\n\n\nLooking good, no errors.\nNow, what should we do about Ht? 6-2 is not going to tell me much when I want to run a regression of height to kills per set. And it’s a character field. So we need to convert it to numbers.\nSeparate again comes to the rescue.\n\nkills %>% \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>% \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) %>%\n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") %>% \n  mutate(Conference=gsub(\")\", \"\", Conference)) %>%\n  separate(Ht, into=c(\"Feet\", \"Inches\"), sep=\"-\") %>%\n  mutate(Feet = as.numeric(Feet), Inches = as.numeric(Inches)) %>%\n  head()\n\n# A tibble: 6 × 12\n   Rank Player       School Confe…¹ Cl     Feet Inches Pos       S Kills Per S…²\n  <dbl> <chr>        <chr>  <chr>   <chr> <dbl>  <dbl> <chr> <dbl> <dbl>   <dbl>\n1     1 Lindsey Rud… \" UC … Big We… So.       6      2 OH       90   526    5.84\n2     2 Pilar Victo… \" Ark… SEC     Sr.       5     11 OH      116   634    5.47\n3     3 Laura Milos  \" Ora… Summit… Sr.       5     10 OH      106   560    5.28\n4     4 Carlyle Nus… \" Lip… ASUN    Jr.       5     10 OH      100   522    5.22\n5     5 Veronica Jo… \" BYU… WCC     Jr.       6      0 OH      118   569    4.82\n6     6 Torrey Van … \" Cal… Big We… So.       6      3 OH      101   477    4.72\n# … with 1 more variable: Season <chr>, and abbreviated variable names\n#   ¹​Conference, ²​`Per Set`\n\n\nBut how do we turn that into a height? Math!\n\nkills %>% \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>% \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) %>%\n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") %>% \n  mutate(Conference=gsub(\")\", \"\", Conference)) %>%\n  separate(Ht, into=c(\"Feet\", \"Inches\"), sep=\"-\") %>%\n  mutate(Feet = as.numeric(Feet), Inches = as.numeric(Inches)) %>%\n  mutate(Height = (Feet*12)+Inches) %>%\n  head()\n\n# A tibble: 6 × 13\n   Rank Player       School Confe…¹ Cl     Feet Inches Pos       S Kills Per S…²\n  <dbl> <chr>        <chr>  <chr>   <chr> <dbl>  <dbl> <chr> <dbl> <dbl>   <dbl>\n1     1 Lindsey Rud… \" UC … Big We… So.       6      2 OH       90   526    5.84\n2     2 Pilar Victo… \" Ark… SEC     Sr.       5     11 OH      116   634    5.47\n3     3 Laura Milos  \" Ora… Summit… Sr.       5     10 OH      106   560    5.28\n4     4 Carlyle Nus… \" Lip… ASUN    Jr.       5     10 OH      100   522    5.22\n5     5 Veronica Jo… \" BYU… WCC     Jr.       6      0 OH      118   569    4.82\n6     6 Torrey Van … \" Cal… Big We… So.       6      3 OH      101   477    4.72\n# … with 2 more variables: Season <chr>, Height <dbl>, and abbreviated variable\n#   names ¹​Conference, ²​`Per Set`\n\n\nAnd now, in 10 lines of code, using separate, mutate and gsub, we’ve turned the mess that is the NCAA’s data into actually useful data we can analyze.\nThese patterns of thought come in handy when facing messed up data."
  },
  {
    "objectID": "headlines.html",
    "href": "headlines.html",
    "title": "30  Headlines",
    "section": "",
    "text": "Headline\nChatter\nThe main body\nAnnotations\nLabels\nSource line\nCredit line\n\nThe first on that list is the first for a reason. The headline is an incredibly important part of any graphic: it’s often the first thing a reader will see. It’s got to entice people in, tell them a little bit about what they’re going to see, and help tell the story.\nThe second item is the chatter – the text underneath that headline. It needs to work with the headline to further the story, drive people toward the point, maybe add some context.\nThe two bits of text are extremely important. Let’s set up a chart and talk about how to do it wrong and how to do it better.\n\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nThe data and the chart code isn’t important for you to follow along. The code is nothing special. The issues will be with the words that you’ll see below.\n\nscoring <- read_csv(\"data/scoringoffense.csv\")\n\nRows: 1253 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (9): G, TD, FG, 1XP, 2XP, Safety, Points, Points/G, Year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntotal <- read_csv(\"data/totaloffense.csv\")\n\nRows: 1253 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (8): G, Rush Yards, Pass Yards, Plays, Total Yards, Yards/Play, Yards/G,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\noffense <- total %>% left_join(scoring, by=c(\"Name\", \"Year\"))\n\numd <- offense %>% filter(Name == \"Maryland\") %>% filter(Year == 2018)\n\n\nggplot(offense, aes(x=`Yards/G`, y=`Points/G`)) + \n  geom_point(color=\"grey\") + geom_smooth(method=lm, se=FALSE) + \n  labs(x=\"Total yards per game\", y=\"Points per game\", title=\"Headline here\", subtitle=\"This is the chatter. It is chatter. Chatter.\", caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFirst, let’s start with some headline basics:\n\nYour headline should be about what the chart is about, not what makes up the chart. What story is the chart telling? What made it interesting to you? Don’t tell me what the stats are, tell me what it says.\nYour headline should be specific. Generic headlines are boring and ignored.\nYour headline should, most often, have a verb. It’s not a 100 percent requirement, but a headline without a verb means you’re trying to be cute and …\nYour headline shouldn’t be overly cute. Trying to get away with slang, a very Of The Moment cultural reference that will be forgotten soon, or some inside joke is asking for trouble.\nYour headline should provoke a reaction.\n\nGiven our graph, here’s a few that don’t work.\n\nggplot(offense, aes(x=`Yards/G`, y=`Points/G`)) + \n  geom_point(color=\"grey\") + geom_smooth(method=lm, se=FALSE) + \n  labs(x=\"Total yards per game\", y=\"Points per game\", title=\"Maryland's offense\", subtitle=\"Maryland's 2018 offense is the red dot.\", caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nThe problems here:\n\nNo verb.\nGeneric, forgettable, doesn’t say anything.\nWhat is this chart about? What does it say? We have no idea from the headline and chatter.\nDon’t repeat words from the headline in the chatter. Nebraska Nebraska looks bad. Make one of the Huskers if you’re going to do this.\n\nAnother example:\n\nggplot(offense, aes(x=`Yards/G`, y=`Points/G`)) + \n  geom_point(color=\"grey\") + geom_smooth(method=lm, se=FALSE) + \n  labs(x=\"Total yards per game\", y=\"Points per game\", title=\"Points per game vs total yards per game\", subtitle=\"Maryland's 2018 offense is above the blue line, which is good.\", caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nWhat’s wrong here?\n\nThe headline is about the stats, not the story.\nThe headline lacks a verb.\nThe headline lacks any interest, really.\nThe headline at least moves in the direction of what this chart is about, but see the previous two.\nThe chatter adds more flavor to it, but what does “below the blue line” even mean? We’re leaving the reader with a lot of questions and no real answers. That;s bad.\n\nLet’s try to do this better.\n\nggplot(offense, aes(x=`Yards/G`, y=`Points/G`)) + \n  geom_point(color=\"grey\") + geom_smooth(method=lm, se=FALSE) + \n  labs(x=\"Total yards per game\", y=\"Points per game\", title=\"Maryland's strength\", subtitle=\"The Terps' offense was supposed to power the team, and it did.\", caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nWhat works here:\n\nProvokes a reaction by asking a question. Drives at what the story is about.\nThe chatter answers the question in the headline without talking about the blue line, a model, anything. A reader can see it.\nSimple, precise, direct language.\n\nOne more, same chart.\n\nggplot(offense, aes(x=`Yards/G`, y=`Points/G`)) + \n  geom_point(color=\"grey\") + geom_smooth(method=lm, se=FALSE) + \n  labs(x=\"Total yards per game\", y=\"Points per game\", title=\"Maryland's offense overperformed\", subtitle=\"The Terps' offense fared better than many given their output.\", caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nWhat works here:\n\nStrong verb: overperformed.\nHeadline tells the story. Chatter bolsters it.\nDoesn’t repeat Maryland or Terps\n\nTaking time to sharpen your headlines will make your graphics better."
  },
  {
    "objectID": "annotations.html",
    "href": "annotations.html",
    "title": "31  Annotations",
    "section": "",
    "text": "For this, we’re going to go back to some code we started in Bubble Charts and we’re going to add some annotations to it. Annotations help us draw attention to things, or help the reader understand what they’re looking at. They’re labels on things, be that the teams we want to highlight or regions of the chart or lines or all of those things.\nFor this, we’ll need to add a new library to the mix called ggrepel. You’ll need to install it in the console with install.packages(\"ggrepel\").\n\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nNow we’ll grab the data, each football game in 2021.\nFor this walkthrough:\n   Download csv file\n\nNow load it.\n\nlogs <- read_csv(\"data/footballlogs21.csv\")\n\nRows: 1655 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nI’m going to set up a point chart that places teams on two-axes – yards per play on offense on the x axis, and yards per play on defense. We did this in the bubble charts example.\n\nlogs %>% \n  group_by(Team, Conference) %>% \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards)) %>% \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -> ypp\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nTo build the annotations, I want the average for offensive yards per play and defensive yards per play. We’re going to use those as a proxy for quality. If your team averages more yards per play on offense, that’s good. If they average fewer yards per play on defense, that too is good. So that sets up a situation where we have four corners, anchored by good at both and bad at both. The averages will create lines to divide those four corners up.\n\naverages <- ypp %>% ungroup() %>% summarise(AvgOffYardsPer = mean(OffensiveYPP), AvgDefYardsPer = mean(DefensiveYPP))\n\naverages\n\n# A tibble: 1 × 2\n  AvgOffYardsPer AvgDefYardsPer\n           <dbl>          <dbl>\n1           5.79           5.66\n\n\nI also want to highlight playoff teams.\n\nplayoff_teams <- c(\"Cincinnati\", \"Alabama\", \"Michigan\", \"Ohio State\")\n\nplayoffs <- ypp %>% filter(Team %in% playoff_teams)\n\nNow we create the plot. We have two geom_points, starting with everyone, then playoff teams. I alter the colors on each to separate them. Next, I add a geom_hline to add the horizontal line of my defensive average and a geom_vline for my offensive average. Next, I want to add some text annotations, labeling two corners of my chart (the other two, in my opinion, become obvious). Then, I want to label all the playoff teams. I use geom_text_repel to do that – it’s using the ggrepel library to push the text away from the dots, respective of other labels and other dots. It means you don’t have to move them around so you can read them, or so they don’t cover up the dots.\nThe rest is just adding labels and messing with the theme.\n\nggplot() + \n  geom_point(data=ypp, aes(x=OffensiveYPP, y=DefensiveYPP), color=\"light grey\") +\n  geom_point(data=playoffs, aes(x=OffensiveYPP, y=DefensiveYPP)) +\n  geom_hline(yintercept=5.7, color=\"dark grey\") + \n  geom_vline(xintercept=5.7, color=\"dark grey\") + \n  geom_text(aes(x=7, y=5.5, label=\"Good Offense, Good Defense\"), color=\"blue\") +\n  geom_text(aes(x=5, y=6, label=\"Bad Defense, Bad Offense\"), color=\"blue\") +\n  geom_text_repel(data=playoffs, aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)) +\n  labs(x=\"Offensive Yards Per Play\", y=\"Defensive Points Per Play\", title=\"All four playoff teams are good\", subtitle=\"Each of the four have above average offenses and defenses.\", caption=\"Source: Sports-Reference.com | By Derek Willis\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 7),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank()\n  )"
  },
  {
    "objectID": "finishingtouches.html",
    "href": "finishingtouches.html",
    "title": "32  Finishing touches",
    "section": "",
    "text": "The output from ggplot is good, but not great. We need to add some pieces to it. The elements of a good graphic are:\nThat looks like:"
  },
  {
    "objectID": "finishingtouches.html#graphics-vs-visual-stories",
    "href": "finishingtouches.html#graphics-vs-visual-stories",
    "title": "32  Finishing touches",
    "section": "32.1 Graphics vs visual stories",
    "text": "32.1 Graphics vs visual stories\nWhile the elements above are nearly required in every chart, they aren’t when you are making visual stories.\n\nWhen you have a visual story, things like credit lines can become a byline.\nIn visual stories, source lines are often a note at the end of the story.\nGraphics don’t always get headlines – sometimes just labels, letting the visual story headline carry the load.\n\nAn example from The Upshot. Note how the charts don’t have headlines, source or credit lines."
  },
  {
    "objectID": "finishingtouches.html#getting-ggplot-closer-to-output",
    "href": "finishingtouches.html#getting-ggplot-closer-to-output",
    "title": "32  Finishing touches",
    "section": "32.2 Getting ggplot closer to output",
    "text": "32.2 Getting ggplot closer to output\nLet’s explore fixing up ggplot’s output before we send it to a finishing program like Adobe Illustrator. We’ll need a graphic to work with first.\n\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nHere’s the data we’ll use:\nFor this walkthrough:\n   Download csv file\n\n   Download csv file\n\nLet’s load them and join them together.\n\nscoring <- read_csv(\"data/scoringoffense.csv\")\n\nRows: 1253 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (9): G, TD, FG, 1XP, 2XP, Safety, Points, Points/G, Year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntotal <- read_csv(\"data/totaloffense.csv\")\n\nRows: 1253 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (8): G, Rush Yards, Pass Yards, Plays, Total Yards, Yards/Play, Yards/G,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\noffense <- total %>% left_join(scoring, by=c(\"Name\", \"Year\"))\n\nWe’re going to need this later, so let’s grab Maryland’s 2018 stats from this dataframe.\n\numd <- offense %>% \n  filter(Name == \"Maryland\") %>% \n  filter(Year == 2018)\n\nWe’ll start with the basics.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\")\n\n\n\n\nLet’s take changing things one by one. The first thing we can do is change the figure size. Sometimes you don’t want a square. We can use the knitr output settings in our chunk to do this easily in our notebooks.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\")\n\n\n\n\nNow let’s add a fit line.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") +\n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE)\n\n\n\n\nAnd now some labels.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\"\n    )\n\n\n\n\nLet’s get rid of the default plot look and drop the grey background.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\"\n    ) + \n  theme_minimal()\n\n\n\n\nOff to a good start, but our text has no real heirarchy. We’d want our headline to stand out more. So let’s change that. When it comes to changing text, the place to do that is in the theme element. There are a lot of ways to modify the theme. We’ll start easy. Let’s make the headline bigger and bold.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\")\n    ) \n\n\n\n\nNow let’s fix a few other things – like the axis labels being too big, the subtitle could be bigger and lets drop some grid lines.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) \n\n\n\n\nMissing from this graph is the context that the headline promises. Where is Maryland? We haven’t added it yet. So let’s add a point and a label for it.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\nIf we’re happy with this output – if it meets all of our needs for publication – then we can simply export it as a png file. We do that by adding + ggsave(\"plot.png\", width=5, height=2) to the end of our code. Note the width and the height are from our knitr parameters at the top – you have to repeat them or the graph will export at the default 7x7.\nIf there’s more work you want to do with this graph that isn’t easy or possible in R but is in Illustrator, simply change the file extension to pdf instead of png. The pdf will open as a vector file in Illustrator with everything being fully editable."
  },
  {
    "objectID": "finishingtouches.html#waffle-charts-require-special-attention",
    "href": "finishingtouches.html#waffle-charts-require-special-attention",
    "title": "32  Finishing touches",
    "section": "32.3 Waffle charts require special attention",
    "text": "32.3 Waffle charts require special attention\nFrequently in my classes, students use the waffle charts library quite extensively to make graphics. This is a quick walkthough on how to get a waffle chart into a publication ready state.\n\nlibrary(waffle)\n\nLet’s look at the offensive numbers from the 2021 Maryland v. Illinois football game. Maryland won 20-17, even though the Terps outgained the Illini by 113 yards. You can find the official stats on the NCAA’s website.\nI’m going to make two vectors for each team and record rushing yards and passing yards.\n\nmd <- c(\"Rushing\"=131, \"Passing\"=350, 113)\nil <- c(\"Rushing\"=183, \"Passing\"=185, 0)\n\nSo what does the breakdown of Maryland’s night look like? How balanced was the offense?\nThe waffle library can break this down in a way that’s easier on the eyes than a pie chart. We call the library, add the data, specify the number of rows, give it a title and an x value label, and to clean up a quirk of the library, we’ve got to specify colors.\nADDITIONALLY\nWe can add labels and themes, but you have to be careful. The waffle library is applying it’s own theme, but if we override something they are using in their theme, some things that are hidden come back and make it worse. So here is an example of how to use ggplot’s labs and the theme to make a fully publication ready graphic.\n\nwaffle(md/10, rows = 5, xlab=\"1 square = 10 yards\", colors = c(\"black\", \"red\", \"white\")) + \n  labs(\n    title=\"Maryland vs Illinois on offense\", \n    subtitle=\"The Terps couldn't get much of a running game going.\",\n    caption=\"Source: NCAA | Graphic by Derek Willis\") + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank()\n  )\n\n\n\n\nBut what if we’re using a waffle iron? And what if we want to change the output size? It gets tougher.\nTruth is, I’m not sure what is going on with the sizing. You can try it and you’ll find that the outputs are … unpredictable.\nThings you need to know about waffle irons:\n\nThey’re a convenience method, but all they’re really doing is executing two waffle charts together. If you don’t apply the theme to both waffle charts, it breaks.\nYou will have to get creative about applying headline and subtitle to the top waffle chart and the caption to the bottom.\nUsing ggsave doesn’t work either. So you’ll have to use R’s pdf output.\n\nHere is a full example. I start with my waffle iron code, but note that each waffle is pretty much a self contained thing. That’s because a waffle iron isn’t really a thing. It’s just a way to group waffles together, so you have to make each waffle individually. My first waffle has the title and subtitle but no x axis labels and the bottom one has not title or subtitle but the axis labels and the caption.\n\niron(\n waffle(\n   md/10, \n   rows = 2, \n   xlab=\"Maryland\",\n   colors = c(\"black\", \"red\", \"white\")) + \n   labs(\n     title=\"Maryland vs Illinois: By the numbers\", \n     subtitle=\"The Terps couldn't run, the Illini could.\") + \n   theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank()\n  ),\n waffle(\n   il/10, \n   rows = 2, \n   xlab=\"Illinois\\n1 square = 10 yards\", \n   colors = c(\"black\", \"red\", \"white\")) + \n   labs(caption=\"Source: NCAA | Graphic by Derek Willis\")\n)"
  },
  {
    "objectID": "finishingtouches.html#advanced-text-wrangling",
    "href": "finishingtouches.html#advanced-text-wrangling",
    "title": "32  Finishing touches",
    "section": "32.4 Advanced text wrangling",
    "text": "32.4 Advanced text wrangling\nSometimes, you need a little more help with text than what is easily available. Sometimes you want a little more in your finishing touches. Let’s work on some issues common in projects that can be fixed with new new libraries: multi-line chatter, axis labels that need more than just a word, axis labels that don’t fit, and additional text boxes.\nFirst things first, we’ll need to install ggtext with install.packages. Then we’ll load it.\n\nlibrary(ggtext)\n\nLet’s go back to our scatterplot above. As created, it’s very simple, and the chatter doesn’t say much. Let’s write chatter that instead of being super spare is more verbose.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop opponents. If you compare the offense to every other offense and how many points they score vs the number of yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\nYou can see the problem right away – it’s too long and gets cut off. One way to fix this is to put \\n where you think the line break should be. That’s a newline character, so it would add a return there. But with ggtext, you can use simple HTML to style the text, which opens up a lot of options. We can use a  to break the line. The other thing we need to do is in the theme element, change the element_text for plot.subtitle to element_markdown.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop<br/>opponents. If you compare the offense to every other offense and how many points they score vs the number of<br/> yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\nWith ggtext, there’s a lot more you can do with CSS, like change the color of text, that I don’t recommend. Also, there’s only a few HTML tags that have been implemented. For example, you can’t add links because the a tag hasn’t been added.\nAnother sometimes useful thing you can do is add much more explanation to your axis labels. This is going to be a silly example because “Points per game” is pretty self-explanatory, but roll with it. First, we create an unusually long y axis label, then, in theme, we add some code to axis.title.y.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game is an imperfect metric of offensive efficiency because defenses and special teams score points as well.\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop<br/>opponents. If you compare the offense to every other offense and how many points they score vs the number of<br/> yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank(),\n    axis.title.y = element_textbox_simple(\n      orientation = \"left-rotated\",\n      width = grid::unit(2.5, \"in\")\n    )\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\nOne last advanced trick: Adding a text box explainer in the graphic. This should be used in somewhat rare circumstances – you don’t want to pollute your data space with lots of text. If your graphic needs so much explainer text, you should be asking yourself hard questions about if your chart is clearly telling a story.\nTo add a text box explainer, you need to add a geom_textbox to your chart. The code below does that, and also adds a geom_point to anchor the box to a spot.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  geom_textbox(\n    aes(x=225, \n        y=50, \n        label=\"Dots above the blue line indicate offenses that scored more points than their yards per game would suggest they should.\", \n        orientation = \"upright\", \n        hjust=0, \n        vjust=1), width = unit(2.8, \"in\")) +\n  geom_point(aes(x=225, y=50), size=2) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop<br/>opponents. If you compare the offense to every other offense and how many points they score vs the number of<br/> yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))"
  },
  {
    "objectID": "rvest.html",
    "href": "rvest.html",
    "title": "33  Intro to rvest",
    "section": "",
    "text": "All the way back in Chapter 2, we used Google Sheets and importHTML to get our own data out of a website. For me, that’s a lot of pointing and clicking and copying and pasting. R has a library that can automate the harvesting of data from HTML on the internet. It’s called rvest.\nLet’s grab a simple, basic HTML table from College Football Stats. There’s nothing particularly strange about this table – it’s simply formatted and easy to scrape.\nFirst we’ll need some libraries. We’re going to use a library called rvest, which you can get by running install.packages('rvest') in the console.\nThe rvest package has functions that make fetching, reading and parsing HTML simple. The first thing we need to do is specify a url that we’re going to scrape.\nNow, the most difficult part of scraping data from any website is knowing what exact HTML tag you need to grab. In this case, we want a <table> tag that has all of our data table in it. But how do you tell R which one that is? Well, it’s easy, once you know what to do. But it’s not simple. So I’ve made a short video to show you how to find it.\nWhen you have simple tables, the code is very simple. You create a variable to receive the data, then pass it the url, read the html that was fetched, find the node you need using your XPath value you just copied and you tell rvest that it’s a table.\nWhat we get from this is … not a dataframe. It’s a list with one element in it, which just so happens to be our dataframe. When you get this, the solution is simple: just overwrite the variable you created with the first list element.\nAnd what do we have?\nWe have data, ready for analysis."
  },
  {
    "objectID": "rvest.html#a-slightly-more-complicated-example",
    "href": "rvest.html#a-slightly-more-complicated-example",
    "title": "33  Intro to rvest",
    "section": "33.1 A slightly more complicated example",
    "text": "33.1 A slightly more complicated example\nWhat if we want more than one year in our dataframe?\nThis is a common problem. What if we want to look at every scoring offense going back several years? The website has them going back to 2009. How can we combine them?\nFirst, we should note, that the data does not have anything in it to indicate what year it comes from. So we’re going to have to add that. And we’re going to have to figure out a way to stack two dataframes on top of each other.\nSo let’s grab 2020.\n\nscoringoffenseurl20 <- \"http://www.cfbstats.com/2020/leader/national/team/offense/split01/category09/sort01.html\"\n\nscoringoffense20 <- scoringoffenseurl20 %>%\n  read_html() %>%\n  html_nodes(xpath = '//*[@id=\"content\"]/div[2]/table') %>%\n  html_table()\n\nscoringoffense20 <- scoringoffense20[[1]]\n\nFirst, how are we going to know, in the data, which year our data is from? We can use mutate.\n\nscoringoffense20 <- scoringoffense %>% mutate(YEAR = 2020)\n\nError in initialize(...): attempt to use zero-length variable name\n\n\nUh oh. Error. What does it say? It’s … not clear, but a hint is that our first column doesn’t have a name. Each column must be named. If you look at our data in the environment tab in the upper right corner, you’ll see that indeed, the first column has no name. It’s the FBS rank of each team. So we can fix that and mutate in the same step. We’ll do that using rename and since the field doesn’t have a name to rename it, we’ll use a position argument. We’ll say rename column 1 as Rank.\n\nscoringoffense21 <- scoringoffense %>% rename(Rank = 1) %>% mutate(YEAR = 2021)\nscoringoffense20 <- scoringoffense20 %>% rename(Rank = 1) %>% mutate(YEAR = 2020)\n\nAnd now, to combine the two tables together length-wise – we need to make long data – we’ll use a dpylr function called bind_rows. The good thing is bind_rows is simple.\n\ncombined <- bind_rows(scoringoffense21, scoringoffense20)\n\nNote in the environment tab we now have a data frame called combined that has 257 observations – which just so happens to be what 127 from 2020 and 130 from 2021 add up to.\n\nhead(combined)\n\n# A tibble: 6 × 11\n   Rank Name               G    TD    FG `1XP` `2XP` Safety Points Point…¹  YEAR\n  <int> <chr>          <int> <int> <int> <int> <int>  <int>  <int>   <dbl> <dbl>\n1     1 Ohio State        13    76    20    76     0      1    594    45.7  2021\n2     2 Western Kentu…    14    79    23    72     2      0    619    44.2  2021\n3     3 Pittsburgh        14    76    17    71     0      1    580    41.4  2021\n4     4 Wake Forest       14    72    23    65     4      0    574    41    2021\n5     5 Coastal Carol…    13    72     9    65     2      2    532    40.9  2021\n6     6 Alabama           15    75    23    71     4      0    598    39.9  2021\n# … with abbreviated variable name ¹​`Points/G`"
  },
  {
    "objectID": "rvest.html#an-even-more-complicated-example",
    "href": "rvest.html#an-even-more-complicated-example",
    "title": "33  Intro to rvest",
    "section": "33.2 An even more complicated example",
    "text": "33.2 An even more complicated example\nWhat do you do when the table has non-standard headers?\nUnfortunately, non-standard means there’s no one way to do it – it’s going to depend on the table and the headers. But here’s one idea: Don’t try to make it work.\nI’ll explain.\nLet’s try to get season team stats from Sports Reference. If you look at that page, you’ll see the problem right away – the headers span two rows, and they repeat. That’s going to be all kinds of no good. You can’t import that. Dataframes must have names all in one row. If you have two-line headers, you have a problem you have to fix before you can do anything else with it.\nFirst we’ll grab the page.\n\nurl <- \"https://www.sports-reference.com/cbb/seasons/2022-school-stats.html\"\n\nNow, similar to our example above, we’ll read the html, use XPath to find the table, and then read that table with a directive passed to it setting the header to FALSE. That tells rvest that there isn’t a header row. Just import it as data.\n\nstats <- url %>%\n  read_html() %>%\n  html_nodes(xpath = '//*[@id=\"basic_school_stats\"]') %>%\n  html_table(header=FALSE)\n\nWhat we get back is a list of one element (similar to above). So let’s pop it out into a data frame.\n\nstats <- stats[[1]]\n\nAnd we’ll take a look at what we have.\n\nhead(stats)\n\n# A tibble: 6 × 38\n  X1    X2     X3    X4    X5    X6    X7    X8    X9    X10   X11   X12   X13  \n  <chr> <chr>  <chr> <chr> <chr> <chr> <chr> <chr> <lgl> <chr> <chr> <lgl> <chr>\n1 \"\"    \"\"     Over… Over… Over… Over… Over… Over… NA    Conf. Conf. NA    Home \n2 \"Rk\"  \"Scho… G     W     L     W-L%  SRS   SOS   NA    W     L     NA    W    \n3 \"1\"   \"Abil… 36    25    11    .694  2.25  -2.09 NA    11    7     NA    14   \n4 \"2\"   \"Air … 29    11    18    .379  -5.67 1.33  NA    4     13    NA    7    \n5 \"3\"   \"Akro… 34    24    10    .706  0.91  -3.93 NA    14    6     NA    12   \n6 \"4\"   \"Alab… 30    12    18    .400  -14.… -8.86 NA    10    8     NA    7    \n# … with 25 more variables: X14 <chr>, X15 <lgl>, X16 <chr>, X17 <chr>,\n#   X18 <lgl>, X19 <chr>, X20 <chr>, X21 <lgl>, X22 <chr>, X23 <chr>,\n#   X24 <chr>, X25 <chr>, X26 <chr>, X27 <chr>, X28 <chr>, X29 <chr>,\n#   X30 <chr>, X31 <chr>, X32 <chr>, X33 <chr>, X34 <chr>, X35 <chr>,\n#   X36 <chr>, X37 <chr>, X38 <chr>\n\n\nSo, that’s not ideal. We have headers and data mixed together, and our columns are named X1 to X38. Also note: They’re all character fields. Because the headers are interspersed with data, it all gets called character data. So we’ve got to first rename each field.\n\nstats <- stats %>% rename(Rank=X1, School=X2, Games=X3, OverallWins=X4, OverallLosses=X5, WinPct=X6, OverallSRS=X7, OverallSOS=X8, Blank1=X9, ConferenceWins=X10, ConferenceLosses=X11, Blank2=X12, HomeWins=X13, HomeLosses=X14, Blank3=X15, AwayWins=X16, AwayLosses=X17, Blank4=X18, ForPoints=X19, OppPoints=X20, Blank5=X21, Minutes=X22, FieldGoalsMade=X23, FieldGoalsAttempted=X24, FieldGoalPCT=X25, ThreePointMade=X26, ThreePointAttempts=X27, ThreePointPct=X28, FreeThrowsMade=X29, FreeThrowsAttempted=X30, FreeThrowPCT=X31, OffensiveRebounds=X32, TotalRebounds=X33, Assists=X34, Steals=X35, Blocks=X36, Turnovers=X37, PersonalFouls=X38)\n\nNow we have to get rid of those headers interspersed in the data. We can do that with filter that say keep all the stuff that isn’t this.\n\nstats <- stats %>% filter(Rank != \"Rk\" & Games != \"Overall\") \n\nAnd finally, we need to change the file type of all the fields that need it. We’re going to use a clever little trick, which goes like this: We’re going to use mutate_at, which means mutate these fields. The pattern for mutate_at is mutate_at these variables and do this thing to them. But instead of specifying which of 38 variables we’re going to mutate, we’re going to specify the one we don’t want to change, which is the name of the school. And we just want to convert them to numeric, which is simple. Here’s what it looks like:\n\nstats <- stats %>% mutate_at(vars(-School), as.numeric)\n\nOne last thing: Who needs columns called Blank1, Blank2, Blank3, etc?\n\nstats <- stats %>% select(-starts_with(\"Blank\"))\n\nAnd just like that, we have a method for getting up to the minute season stats for every team in Division I.\n\nhead(stats)\n\n# A tibble: 6 × 33\n   Rank School      Games Overa…¹ Overa…² WinPct Overa…³ Overa…⁴ Confe…⁵ Confe…⁶\n  <dbl> <chr>       <dbl>   <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1     1 Abilene Ch…    36      25      11  0.694    2.25   -2.09      11       7\n2     2 Air Force      29      11      18  0.379   -5.67    1.33       4      13\n3     3 Akron NCAA     34      24      10  0.706    0.91   -3.93      14       6\n4     4 Alabama A&M    30      12      18  0.4    -14.4    -8.86      10       8\n5     5 UAB NCAA       35      27       8  0.771   10.9    -0.14      14       4\n6     6 Alabama St…    31      10      21  0.323  -12.0    -5.45       8      10\n# … with 23 more variables: HomeWins <dbl>, HomeLosses <dbl>, AwayWins <dbl>,\n#   AwayLosses <dbl>, ForPoints <dbl>, OppPoints <dbl>, Minutes <dbl>,\n#   FieldGoalsMade <dbl>, FieldGoalsAttempted <dbl>, FieldGoalPCT <dbl>,\n#   ThreePointMade <dbl>, ThreePointAttempts <dbl>, ThreePointPct <dbl>,\n#   FreeThrowsMade <dbl>, FreeThrowsAttempted <dbl>, FreeThrowPCT <dbl>,\n#   OffensiveRebounds <dbl>, TotalRebounds <dbl>, Assists <dbl>, Steals <dbl>,\n#   Blocks <dbl>, Turnovers <dbl>, PersonalFouls <dbl>, and abbreviated …"
  },
  {
    "objectID": "advancedrvest.html",
    "href": "advancedrvest.html",
    "title": "34  Advanced rvest",
    "section": "",
    "text": "With the chapter, we learned how to grab one table from one page. But what if you needed more than that? What if you needed hundreds of tables from hundreds of pages? What if you needed to combine one table on one page into a bigger table, but hundreds of times. There’s a way to do this, it just takes patience, a lot of logic, a lot of debugging and, for me, a fair bit of swearing.\nSo what we are after are game by game stats for each college basketball team in America.\nWe can see from this page that each team is linked. If we follow each link, we get a ton of tables. But they aren’t what we need. There’s a link to gamelogs underneath the team names.\nSo we can see from this that we’ve got some problems.\nSo let’s start with that last question first and grab libraries we need.\nFirst things first, we need to grab the url to each team from that first link.\nBut notice first, we don’t want to grab the table. The table doesn’t help us. We need to grab the only link in the table. So we can do that by using the table xpath node, then grabbing the anchor tags in the table, then get only the link out of them (instead of the linked text).\nNotice we now have a list called schools with … 353 elements. That’s the number of teams in college basketball, so we’re off to a good start. Here’s what the fourth element is.\nSo note, that’s the relative path to Alabama A&M’s team page. By relative path, I mean it doesn’t have the root domain. So we need to add that to each request or we’ll get no where.\nSo that’s a problem to note.\nBefore we solve that, let’s just make sure we can get one page and get what we need.\nWe’ll scrape Abilene Christian.\nTo merge all this into one big table, we need to grab the team name and their conference and merge it into the table. But those values come from somewhere else. The scraping works just about the same, but instead of html_table you use html_text.\nSo the first part of this is reading the html of the page so we don’t do that for each element – we just do it once so as to not overwhelm their servers.\nThe second part is we’re grabbing the team name based on it’s location in the page.\nThird: The conference.\nFourth is the table itself, noting to ignore the headers. The last bit fixes the headers, removes the garbage header data from the table, converts the data to numbers, fixes the date and mutates a team and conference value. It looks like a lot, and it took a bit of twiddling to get it done, but it’s no different from what you did for your last homework.\nNow what we’re left with is how do we do this for ALL the teams. We need to send 353 requests to their servers to get each page. And each url is not the one we have – we need to alter it.\nFirst we have to add the root domain to each request. And, each request needs to go to /2019-gamelogs.html instead of /2019.html. If you look at the urls two the page we have and the page we need, that’s all that changes.\nWhat we’re going to use is what is known in programming as a loop. We can loop through a list and have it do something to each element in the loop. And once it’s done, we can move on to the next thing.\nThink of it like a program that will go though a list of your classmates and ask each one of them for their year in school. It will start at one end of the list and move through asking each one “What year in school are you?” and will move on after getting an answer.\nExcept we want to take a url, add something to it, alter it, then request it and grab a bunch of data from it. Once we’re done doing all that, we’ll take all that info and cram it into a bigger dataset and then move on to the next one. Here’s what that looks like:\nThe magic here is in for (i in schools){. What that says is for each iterator in schools – for each school in schools – do what follows each time. So we take the code we wrote for one school and use it for every school.\nThis part:\nlog_url is what changes our school page url to our logs url, and school_url is taking that log url and the root domain and merging them together to create the complete url. Then, page just reads that url we created.\nWhat follows that is taken straight from our example of just doing one.\nThe last bits are using bind_rows to take our data and mash it into a bigger table, over and over and over again until we have them all in a single table. Then, we tell our scraper to wait a few seconds because we don’t want our script to machine gun requests at their server as fast as it can go. That’s a guaranteed way to get them to block scrapers, and could knock them off the internet. Aggressive scrapers aren’t cool. Don’t do it.\nLastly, we write it out to a csv file.\nSo with a little programming knowhow, a little bit of problem solving and the stubbornness not to quit on it, you can get a whole lot of data scattered all over the place with not a lot of code."
  },
  {
    "objectID": "advancedrvest.html#one-last-bit",
    "href": "advancedrvest.html#one-last-bit",
    "title": "34  Advanced rvest",
    "section": "34.1 One last bit",
    "text": "34.1 One last bit\nMost tables that Sports Reference sites have are in plain vanilla HTML. But some of them – particularly player based stuff – are hidden with a little trick. The site puts the data in a comment – where a browser will ignore it – and then uses javascript to interpret the commented data. To a human on the page, it looks the same. To a browswer or a scraper, it’s invisible. You’ll get errors. How do you get around it?\n\nScrape the comments.\nTurn the comment into text.\nThen read that text as html.\nProceed as normal.\n\n\nh <- read_html('https://www.baseball-reference.com/leagues/MLB/2017-standard-pitching.shtml')\n\ndf <- h %>% html_nodes(xpath = '//comment()') %>%    # select comment nodes\n    html_text() %>%    # extract comment text\n    paste(collapse = '') %>%    # collapse to a single string\n    read_html() %>%    # reparse to HTML\n    html_node('table') %>%    # select the desired table\n    html_table()"
  },
  {
    "objectID": "blogging.html",
    "href": "blogging.html",
    "title": "35  Building your own blog with blogdown",
    "section": "",
    "text": "If you listen to the Measurables Podcast for about two episodes, you’ll detect a pattern. The host asks each guest how they got started in sports analytics. To a one, they’ll say they found public data and started blogging about their analysis of it. For nearly every single guest, this is their path into the field. They started messing around with data in a toolset, found something interesting and wrote a post about what they found and how they found it. Other analysts noticed it, or a hiring manager liked what they read, and the rest is history, as they say.\nSo, let’s do that. Let’s get you a blog so you can post your work.\nHere’s our requirements:"
  },
  {
    "objectID": "blogging.html#setup",
    "href": "blogging.html#setup",
    "title": "35  Building your own blog with blogdown",
    "section": "35.1 Setup",
    "text": "35.1 Setup\nWith those requirements in mind, we’re going to use a library called Blogdown, which creates blog posts from R Markdown files, similar to what you’ve been working with in this book.\nIt installs how you think it should. Go into the console and run this:\n\ninstall.packages('blogdown') \n\nAfter that, run this:\n\nblogdown::install_hugo()\n\nAfter that, we’re ready to start making a blog. To do that, go to File > New Project and select New Directory (or Version Control if you know what you’re doing).\n\n\n\n\n\nIn the Project Type view, you may have to scroll down to find “Website using blogdown” but that’s your choice. Mine will probably look different than yours, but below is what the line you’re looking for looks like.\n\n\n\n\n\nAnd now we’ve come to our first decision point.\nFirst, name the directory you’re going to put this into. Keep it simple. Blog is fine. Then decide where on your computer you’re going to put it. Put it somewhere you’re going to remember. Don’t put it on your Desktop. Put it in a folder. Remember what folder because you’re going to need this later.\nNow for the big decision: What theme to use. There’s four choices, but the default theme is the most fully documented. If you want to use another theme, you’ll be better off creating two projects: the one you’re going to publish, and the lithium theme you can steal stuff from.\nHere’s the easiest themes to work with:\n\nyihui/hugo-lithium\nyihui/hugo-prose\nyihui/hugo-ivy\nyihui/hugo-xmin\n\n\n\n\n\n\nWhen you hit Create Project, you should get an R Studio screen. You might have a file open called config.yaml. If you don’t, open it (you can use the files pane in the bottom right). This file will look different depending on which theme you used. This configuration file needs to have a few things in it. This is the config.yaml for my website, but you should use it as a guide for what yours will need:\nbaseurl: https://dwillis.github.io/\nlanguageCode: en-us\ntitle: Derek Willis' GitHub Site\ntheme: hugo-lithium\ngoogleAnalytics: ''\ndisqusShortname: ''\n\nignoreFiles:\n  - \\.Rmd$\n  - \\.Rmarkdown$\n  - _cache$\n  - \\.knit\\.md$\n  - \\.utf8\\.md$\npermalinks:\n  post: /:year/:month/:day/:slug/\nmenu:\n  main:\n    - name: About\n      url: /about/\n    - name: GitHub\n      url: https://github.com/dwillis\n    - name: Twitter\n      url: https://twitter.com/derekwillis\nparams:\n  \n  MathJaxCDN: //cdnjs.cloudflare.com/ajax/libs\n  MathJaxVersion: 2.7.5\n  description: Tools and teaching materials made by Derek Willis of the University of Maryland\n  favicon: favicon.ico\n  highlightjsCDN: //cdnjs.cloudflare.com/ajax/libs\n  highlightjsLang:\n    - r\n    - yaml\n  highlightjsTheme: GitHub\n  highlightjsVersion: 9.12.0\n  logo:\n    alt: Logo\n    height: 50\n    url: logo.png\n    width: 50\nThe top parts are generally filled in regardless of the theme. You’ll obviously want to change the base url and the title. For Google Analytics, you’ll add your tracking id there if and when you want to set that up. Leave ignorefiles and permalinks alone. For your menu – that is up to you. If someone wanting to hire you came across your site, what would you include here? Another thing to change? The description. It will be the text that appears below the name in Google."
  },
  {
    "objectID": "blogging.html#seeing-your-site",
    "href": "blogging.html#seeing-your-site",
    "title": "35  Building your own blog with blogdown",
    "section": "35.2 Seeing your site",
    "text": "35.2 Seeing your site\nWhile you are creating your site, you’re going to want to see it. Now’s a good time to introduce serving your site in R Studio so you can see it before you deploy it.\nIn the console, type this: blogdown:: serve_site() or you can go to Addins > Serve Site.\nNow, in the viewer tab on the right, you should see your site."
  },
  {
    "objectID": "blogging.html#editing-existing-markdown-content",
    "href": "blogging.html#editing-existing-markdown-content",
    "title": "35  Building your own blog with blogdown",
    "section": "35.3 Editing existing Markdown content",
    "text": "35.3 Editing existing Markdown content\nThere’s two types of files you can work with – plain Markdown files or R Markdown files. Plain Markdown are generally pages without code. R Markdown are the ones with the code.\nLet’s start with a simple Markdown file – the homepage of the site. To edit files, use the Files tab. All of the material you’ll be editing is in the content folder.\n\n\n\n\n\nLet’s start with editing the about.md file. Some templates also have a _index.md file, which is the static part of the homepage.\n\n\n\n\n\nAt the top, you will have something called a yaml header, which are things that set up the page. They are quite simple to figure out. Here’s the yaml header the Ivy theme generates. Obviously, I need to change the author, the date and the title for my site.\n---\nauthor: Yihui Xie\ndate: \"2017-08-06\"\ntitle: About Hugo Ivy\n---\nChange yours, then change the text below the yaml header, and then save it. Click on the Viewer tab and check out your work."
  },
  {
    "objectID": "blogging.html#creating-a-new-post-in-r-markdown",
    "href": "blogging.html#creating-a-new-post-in-r-markdown",
    "title": "35  Building your own blog with blogdown",
    "section": "35.4 Creating a new post in R Markdown",
    "text": "35.4 Creating a new post in R Markdown\nYou’ll notice in your content folder that there is a folder called post, and in there are multiple posts. Depending on your theme, you might just have folders in post, and you might have some markdown files. They work mostly the same way.\nThe magic here is how you name them. You’ll remember from config.yaml that we have a post url format that goes post / year / month / day / slug. The reason for that is that urls matter for Google. Clean urls with meaningful information in them rank higher.\nSo in post, you’ll see the folders are named similarly – a date separated by dashes followed by a slug – the headline of your post in all lower case with dashes instead of spaces. So if I were writing a post called “I love sports data”, the slug version of that would be i-love-sports-data. If I were writing it on December 15, which I am, my folder would be 2020-12-15-i-love-sports-data.\nNOTE: CAPITALIZATION MATTERS. AS IN, DON’T. You don’t see capitals in URLs, so don’t use them.\nSo let’s create a post.\nThe easiest way to do this is to click Addins > New Post. You need to fill out four things on the page: The Title, Author, Date (if you’re changing it) and the Format. Be smart about the title – don’t but TEST TEST TEST or TITLE HERE because it will build with that and it’s hard to change later. Give some thought to the headline on your post before you hit done.\n\n\n\n\n\nWhen you’re done, hit Done and an RMarkdown file will appear, just as you have been using throughout this book.\nThe first thing you’ll see is the yaml header. Typically, if we’ve filled out the previous screen correctly, we should be good. But if you need to fix something, you can do it here.\n---\ntitle: \"Sports Data Analysis and Visualization\"\nauthor: \"Matt Waite\"\ndate: 2019-07-29T21:13:14-05:00\ncategories: [\"Books\"]\ntags: [\"R\", \"data\", \"sports\"]\n---\nBelow the yaml header? That’s up to you. Go do some of that writing stuff you do."
  },
  {
    "objectID": "blogging.html#publishing-your-site",
    "href": "blogging.html#publishing-your-site",
    "title": "35  Building your own blog with blogdown",
    "section": "35.5 Publishing your site",
    "text": "35.5 Publishing your site\nBlogdown is built on top of the Hugo static site generator. What that means is that Blogdown is going to take your Markdown files and create static html. What does static html mean? It means there’s no server creating it on the fly – that’s called dynamic html – so this can be hosted on the simplest of servers.\nPublishing takes a lot of steps to get set up, but once it is, it’s easy.\nStep 1: Get a GitHub account\nGo to GitHub and sign up for an account. NOTE: Your username will be part of your website address, and you could potentially be sending this to employers. I’m sure blaze420rryday has been your handle since middle school, but do you want an employer to see that? My GitHub user name is mattwaite. See what I’m getting at here?\nStep 2: Set up your website repository\nFor the low low price of nothing, GitHub will host a website for you, and we are going to take them up on that bargain. There’s several tricks to getting this to work, but none of them are hard. They just require you to be specific.\nTo start, you can click on the plus sign in the top right corner or hit the green new button, depending on what your page looks like vs mine (I’m reasonably active GitHub user, so mine will look different from yours).\n\n\n\n\n\nIn the create a new repository page, the name of your respository needs to follow this pattern: yourusernamehere.github.io where yourusernamehere is … your username. So my site is mattwaite.github.io because my username is mattwaite. This is why you do not want to select swaggylovedoctor as your username, no matter how attached to it you are. Your employment chances are zero with something dumb like that.\nAfter you’ve named the repository correctly, leave it public, check add .gitignore, and then select a gitignore template. Type R into the search, select it, and the create repository button will become active. Click create repository.\nStep 3:\nDon’t close your GitHub window.\nIn a new tab, download the GitHub Desktop App and install it.\nGitHub is a version control system and a social network mixed together. Version control is like Track Changes in Word, but on steroids. If you plan on a career in analytics or data science, GitHub is a skill you will have to learn, but it’s beyond the scope of this book.\nTo work around this, we’re going to use GitHub Desktop to manage our interactions with GitHub. Open GitHub Desktop and log into your GitHub account in the app.\nTo get your repository into GitHub Desktop, go back to your tab with your GitHub repository in it. Find the Code button and click it. Click on the Open With GitHub Desktop button.\nIn the window that pops up, we need to set the Local Path. This path needs to be the same place your blog project is located. Click the Choose button and navigate to where your blog project is located. Then, just click Clone.\n\n\n\n\n\nStep 4:\nLet’s get your site on the internet.\nSwitch back to your blog project in R Studio. We’re going to output your site and upload it to GitHub.\nTo do this, we need to change config.yaml. We need to tell your website project that you want to publish to your GitHub folder, not the default.\nOpen config.yaml in your blog project. Near the top, above ignoreFiles, add this line, replacing yourusername with … your user name. This says publish to your GitHub project that you put in the same folder as your blog project:\npublishDir: \"../yourusername.github.io\"\nSave config.yaml.\nOnce you are ready to build your site, you need to click on the Build tab and then on Build Website.\n\n\n\n\n\nIf it worked, you should see output in the window that looks something like this (yours will be different from mine):\n\n\n\n\n\nStep 5\nNow go to the GitHub Desktop App. You should see something that looks like this, though yours will be different from mine.\n\n\n\n\n\nThis is where you will commit files to your repository. GitHub is a two-step process for getting files from your computer to GitHub. The first is committing the files. To do that, add a message in the box next to your avatar (where it says update index.html in the screenshot above). Then click Commit to main (mine says master because it’s an older repository before GitHub switched to using main by default). The second step is to push it to GitHub. You do that on the screen that appears after you have committed your files. It should say you have No Local Changes, which is good because you sent them to GitHub. Now click Push origin.\n\n\n\n\n\nIn a few minutes, you should be able to go to username.github.io in a browser and you’ll see your site. Here’s mine."
  },
  {
    "objectID": "checklist.html",
    "href": "checklist.html",
    "title": "36  Project Checklist",
    "section": "",
    "text": "The main projects in JOUR479X Sports Data Analysis and Visualization involve writing a blog post, created on GitHub pages, about a sports topic that uses code, data and three graphics to tell a story. The assignment is worth 20 percent of the semester grade.\nAn example of a B+/A- post: Is Nebraska the best worst team in college basketball?"
  },
  {
    "objectID": "checklist.html#writing-checklist",
    "href": "checklist.html#writing-checklist",
    "title": "36  Project Checklist",
    "section": "36.1 Writing checklist",
    "text": "36.1 Writing checklist\n\nHave you spell checked your writing?\nHave you read what you have written out loud? Reading it out loud will help you find bad writing.\nNo really. Read it out loud. It makes a huge difference. If you stumble over your own words, you should rewrite it.\nIf what you read out loud doesn’t sound like you, rewrite it.\nDo you have complete sentences? Do you have active verbs?"
  },
  {
    "objectID": "checklist.html#headline-checklist",
    "href": "checklist.html#headline-checklist",
    "title": "36  Project Checklist",
    "section": "36.2 Headline checklist",
    "text": "36.2 Headline checklist\n\nAre your headlines just labels? Example: Maryland’s offense. NBA’s Best Shooters. The best NFL punters. Those are labels, not headlines.\nDo your headlines tell a story, or attempt to draw me into one?\nDo your headlines include words that are what the chart is about?\nDo your headlines point me toward what I should see in the chart?"
  },
  {
    "objectID": "checklist.html#graphics-checklist",
    "href": "checklist.html#graphics-checklist",
    "title": "36  Project Checklist",
    "section": "36.3 Graphics checklist",
    "text": "36.3 Graphics checklist\n\nDo you have the required parts? They are: headline, chatter, credit line, source line.\nDo your graphics have annotations that help me determine what is going on? Example: Are important dots labeled on a scatterplot?\nAre there lines to show me averages? Are those lines labeled?\nCan I read bar chart axis text?\n\nDo each one of your charts tell a story? Can I tell what that story is in a glance?\nDo you use color sparingly to draw my attention to something specific?\nIs there separation between your headline size and your chatter size?\nDoes your typography have a hierarchy? Does your headline stand out from your chatter? Are your axis labels smaller than your data labels?\nHave you simplified the theme (i.e. dropped the default grey background)?\nAre your axis labels something anyone can understand?"
  },
  {
    "objectID": "checklist.html#code-checklist",
    "href": "checklist.html#code-checklist",
    "title": "36  Project Checklist",
    "section": "36.4 Code checklist",
    "text": "36.4 Code checklist\n\nAre your variables named what they are? Meaning, did you call your data logs when it’s made up of players? That’s bad.\nIs spaced out so it’s one line per command? Look at the example post for guidance.\nIs your code in the proper order? Libraries at the top. Data preparation before the graphics?\nDid you add message=FALSE, warning=FALSE to any {r} blocks that spit out large amounts of automated text? Your library step doesn’t need all that gibberish spitting out in your blog."
  },
  {
    "objectID": "checklist.html#last-thing",
    "href": "checklist.html#last-thing",
    "title": "36  Project Checklist",
    "section": "36.5 Last thing",
    "text": "36.5 Last thing\nCan you see your blog post on the internet?\nThe link you are turning in starts with YourGitHubUserNameHere.github.io. If you are turning in a GitHub.com url, you are turning in the wrong thing."
  },
  {
    "objectID": "usingpackages.html",
    "href": "usingpackages.html",
    "title": "37  Using packages to get data",
    "section": "",
    "text": "There is a growing number of packages and repositories of sports data, largely because there’s a growing number of people who want to analyze that data. We’ve done it ourselves with simple Google Sheets tricks. Then there’s RVest, which is a method of scraping the data yourself from websites. But with these packages, someone has done the work of gathering the data for you. All you have to learn are the commands to get it.\nOne very promising collection of libraries is something called the SportsDataverse, which has a collection of packages covering specific sports, all of which are in various stages of development. Some are more complete than others, but they are all being actively worked on by developers. Packages of interest in this class are:\nNot part of the SportsDataverse, but in the same neighborhood, is nflfastR, which can provide NFL play-by-play data.\nBecause they’re all under development, not all of them can be installed with just a simple install.packages(\"something\"). Some require a little work, some require API keys.\nThe main issue for you is to read the documentation carefully."
  },
  {
    "objectID": "usingpackages.html#using-cfbfastr-as-a-cautionary-tale",
    "href": "usingpackages.html#using-cfbfastr-as-a-cautionary-tale",
    "title": "37  Using packages to get data",
    "section": "37.1 Using cfbfastR as a cautionary tale",
    "text": "37.1 Using cfbfastR as a cautionary tale\ncfbfastR presents us a good view into the promise and peril of libraries like this.\nFirst, to make this work, follow the installation instructions and then follow how to get an API key from College Football Data and how to add that to your environment. But maybe wait to do that until you read the whole section.\nAfter installations, we can load it up.\n\nlibrary(tidyverse)\nlibrary(cfbfastR)\n\nYou might be thinking, “Oh wow, I can get play by play data for college football. Let’s look at what are the five most heartbreaking plays of last year’s Maryland season.” Because what better way to determine doom than by looking at the steepest drop-off in win probability, which is included in the data.\nGreat idea. Let’s do it. You’ll need to make sure that your API key has been added to your environment.\nThe first thing to do is read the documentation. You’ll see that you can request data for each week. For example, here’s week 2, which is actually Maryland’s third game (the week 0 game is lumped in with week 1).\n\nmaryland <- cfbd_pbp_data(\n 2021,\n  week=2, \n  season_type = \"regular\",\n  team = \"Maryland\",\n  epa_wpa = TRUE,\n)\n\n• 11:27:09 | Start processing of 1 game...\n\n\nThere’s not an easy way to get all of a single team’s games. A way to do it that’s not very pretty but it works is like this:\n\nwk1 <- cfbd_pbp_data(2021, week=1, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk2 <- cfbd_pbp_data(2021, week=2, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk3 <- cfbd_pbp_data(2021, week=3, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk4 <- cfbd_pbp_data(2021, week=4, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk5 <- cfbd_pbp_data(2021, week=5, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk6 <- cfbd_pbp_data(2021, week=6, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk8 <- cfbd_pbp_data(2021, week=8, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk9 <- cfbd_pbp_data(2021, week=9, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk10 <- cfbd_pbp_data(2021, week=10, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk11 <- cfbd_pbp_data(2021, week=11, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk12 <- cfbd_pbp_data(2021, week=12, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\n\numplays <- bind_rows(wk1, wk2, wk3, wk4, wk5, wk6, wk8, wk9, wk10, wk11, wk12)\n\nThe sys.sleep bits just pauses for two seconds before running the next block. Since we’re requesting data from someone else’s computer, we want to be kind. Week 7 was a bye week for Maryland, so if you request it, you’ll get an empty request and a warning. The bind_rows parts puts all the dataframes into a single dataframe.\nNow you’re ready to look at heartbreak. How do we define heartbreak? How about like this: you first have to lose the game, it comes in the third or fourth quarter, it involves a play (i.e. not a timeout), and it results in the biggest drop in win probability.\n\numplays %>% \n  filter(pos_team == \"Maryland\" & wk > 4 & play_type != \"Timeout\") %>% \n  filter(period == 3 | period == 4) %>% \n  mutate(HeartbreakLevel = wp_before - wp_after) %>% \n  arrange(desc(HeartbreakLevel)) %>% \n  top_n(5, wt=HeartbreakLevel) %>%\n  select(period, clock.minutes, def_pos_team, play_type, play_text)\n\n── play-by-play data from CollegeFootballData.com ──────────── cfbfastR 1.9.0 ──\n\n\nℹ Data updated: 2022-09-29 11:27:11 EDT\n\n\n# A tibble: 5 × 5\n  period clock.minutes def_pos_team   play_type                  play_text      \n   <int>         <int> <chr>          <chr>                      <chr>          \n1      3             0 Penn State     Rush                       Challen Faamat…\n2      3            12 Michigan State Interception Return        Taulia Tagovai…\n3      3            15 Penn State     Pass Incompletion          Taulia Tagovai…\n4      3             4 Penn State     Fumble Recovery (Opponent) Taulia Tagovai…\n5      4            11 Penn State     Pass Incompletion          Taulia Tagovai…\n\n\nThe most heartbreaking play of the season? A third quarter run for no yards against Penn State Next up: A lot of other plays against Penn State."
  },
  {
    "objectID": "usingpackages.html#another-example",
    "href": "usingpackages.html#another-example",
    "title": "37  Using packages to get data",
    "section": "37.2 Another example",
    "text": "37.2 Another example\nThe wehoop package is mature enough to have a version on CRAN, so you can install it the usual way with install.packages(\"wehoop\"). Another helpful library to install is progressr with install.packages(\"progressr\")\n\nlibrary(wehoop)\n\nMany of these libraries have more than play-by-play data. For example, wehoop has box scores and player data for both the WNBA and college basketball. From personal experience, WNBA data isn’t hard to get, but women’s college basketball is a giant pain.\nSo, who is Maryland’s single season points champion over the last five seasons?\n\nprogressr::with_progress({\n  wbb_player_box <- wehoop::load_wbb_player_box(2018:2022)\n})\n\nWith progressr, you’ll see a progress bar in the console, which lets you know that your command is still working, since some of these requests take minutes to complete. Player box scores is quicker – five seasons was a matter of seconds.\nIf you look at the wbb_player_box data we now have, we have each player in each game over each season – more than 300,000 records. Finding out who Maryland’s top 10 single-season scoring leaders are is a matter of grouping, summing and filtering.\n\nwbb_player_box %>% \n  filter(team_short_display_name == \"Maryland\") %>% \n  group_by(athlete_display_name, season) %>% \n  summarise(totalPoints = sum(as.numeric(pts))) %>% \n  arrange(desc(totalPoints)) %>%\n  ungroup() %>%\n  top_n(10, wt=totalPoints)\n\n# A tibble: 11 × 3\n   athlete_display_name season totalPoints\n   <chr>                 <int>       <dbl>\n 1 Kaila Charles          2018         610\n 2 Angel Reese            2022         569\n 3 Kaila Charles          2019         557\n 4 Ashley Owusu           2021         518\n 5 Diamond Miller         2021         501\n 6 Taylor Mikesell        2019         448\n 7 Kaila Charles          2020         433\n 8 Stephanie Jones        2019         425\n 9 Ashley Owusu           2022         385\n10 Chloe Bibby            2021         382\n11 Chloe Bibby            2022         382\n\n\nThis just in: Kaila Charles is good at basketball."
  }
]