[
  {
    "objectID": "blogging.html",
    "href": "blogging.html",
    "title": "36  Building your own blog with blogdown",
    "section": "",
    "text": "If you listen to the Measurables Podcast for about two episodes, you’ll detect a pattern. The host asks each guest how they got started in sports analytics. To a one, they’ll say they found public data and started blogging about their analysis of it. For nearly every single guest, this is their path into the field. They started messing around with data in a toolset, found something interesting and wrote a post about what they found and how they found it. Other analysts noticed it, or a hiring manager liked what they read, and the rest is history, as they say.\nSo, let’s do that. Let’s get you a blog so you can post your work.\nHere’s our requirements:"
  },
  {
    "objectID": "blogging.html#setup",
    "href": "blogging.html#setup",
    "title": "36  Building your own blog with blogdown",
    "section": "36.1 Setup",
    "text": "36.1 Setup\nWith those requirements in mind, we’re going to use a library called Blogdown, which creates blog posts from R Markdown files, similar to what you’ve been working with in this book.\nIt installs how you think it should. Go into the console and run this:\n\ninstall.packages('blogdown') \n\nAfter that, run this:\n\nblogdown::install_hugo()\n\nAfter that, we’re ready to start making a blog. To do that, go to File > New Project and select New Directory (or Version Control if you know what you’re doing).\n\n\n\n\n\nIn the Project Type view, you may have to scroll down to find “Website using blogdown” but that’s your choice. Mine will probably look different than yours, but below is what the line you’re looking for looks like.\n\n\n\n\n\nAnd now we’ve come to our first decision point.\nFirst, name the directory you’re going to put this into. Keep it simple. Blog is fine. Then decide where on your computer you’re going to put it. Put it somewhere you’re going to remember. Don’t put it on your Desktop. Put it in a folder. Remember what folder because you’re going to need this later.\nNow for the big decision: What theme to use. There’s four choices, but the default theme is the most fully documented. If you want to use another theme, you’ll be better off creating two projects: the one you’re going to publish, and the lithium theme you can steal stuff from.\nHere’s the easiest themes to work with:\n\nyihui/hugo-lithium\nyihui/hugo-prose\nyihui/hugo-ivy\nyihui/hugo-xmin\n\n\n\n\n\n\nWhen you hit Create Project, you should get an R Studio screen. You might have a file open called config.yaml. If you don’t, open it (you can use the files pane in the bottom right). This file will look different depending on which theme you used. This configuration file needs to have a few things in it. This is the config.yaml for my website, but you should use it as a guide for what yours will need:\nbaseurl: https://dwillis.github.io/\nlanguageCode: en-us\ntitle: Derek Willis' GitHub Site\ntheme: hugo-lithium\ngoogleAnalytics: ''\ndisqusShortname: ''\n\nignoreFiles:\n  - \\.Rmd$\n  - \\.Rmarkdown$\n  - _cache$\n  - \\.knit\\.md$\n  - \\.utf8\\.md$\npermalinks:\n  post: /:year/:month/:day/:slug/\nmenu:\n  main:\n    - name: About\n      url: /about/\n    - name: GitHub\n      url: https://github.com/dwillis\n    - name: Twitter\n      url: https://twitter.com/derekwillis\nparams:\n  \n  MathJaxCDN: //cdnjs.cloudflare.com/ajax/libs\n  MathJaxVersion: 2.7.5\n  description: Tools and teaching materials made by Derek Willis of the University of Maryland\n  favicon: favicon.ico\n  highlightjsCDN: //cdnjs.cloudflare.com/ajax/libs\n  highlightjsLang:\n    - r\n    - yaml\n  highlightjsTheme: GitHub\n  highlightjsVersion: 9.12.0\n  logo:\n    alt: Logo\n    height: 50\n    url: logo.png\n    width: 50\nThe top parts are generally filled in regardless of the theme. You’ll obviously want to change the base url and the title. For Google Analytics, you’ll add your tracking id there if and when you want to set that up. Leave ignorefiles and permalinks alone. For your menu – that is up to you. If someone wanting to hire you came across your site, what would you include here? Another thing to change? The description. It will be the text that appears below the name in Google."
  },
  {
    "objectID": "blogging.html#seeing-your-site",
    "href": "blogging.html#seeing-your-site",
    "title": "36  Building your own blog with blogdown",
    "section": "36.2 Seeing your site",
    "text": "36.2 Seeing your site\nWhile you are creating your site, you’re going to want to see it. Now’s a good time to introduce serving your site in R Studio so you can see it before you deploy it.\nIn the console, type this: blogdown:: serve_site() or you can go to Addins > Serve Site.\nNow, in the viewer tab on the right, you should see your site."
  },
  {
    "objectID": "blogging.html#editing-existing-markdown-content",
    "href": "blogging.html#editing-existing-markdown-content",
    "title": "36  Building your own blog with blogdown",
    "section": "36.3 Editing existing Markdown content",
    "text": "36.3 Editing existing Markdown content\nThere’s two types of files you can work with – plain Markdown files or R Markdown files. Plain Markdown are generally pages without code. R Markdown are the ones with the code.\nLet’s start with a simple Markdown file – the homepage of the site. To edit files, use the Files tab. All of the material you’ll be editing is in the content folder.\n\n\n\n\n\nLet’s start with editing the about.md file. Some templates also have a _index.md file, which is the static part of the homepage.\n\n\n\n\n\nAt the top, you will have something called a yaml header, which are things that set up the page. They are quite simple to figure out. Here’s the yaml header the Ivy theme generates. Obviously, I need to change the author, the date and the title for my site.\n---\nauthor: Yihui Xie\ndate: \"2017-08-06\"\ntitle: About Hugo Ivy\n---\nChange yours, then change the text below the yaml header, and then save it. Click on the Viewer tab and check out your work."
  },
  {
    "objectID": "blogging.html#creating-a-new-post-in-r-markdown",
    "href": "blogging.html#creating-a-new-post-in-r-markdown",
    "title": "36  Building your own blog with blogdown",
    "section": "36.4 Creating a new post in R Markdown",
    "text": "36.4 Creating a new post in R Markdown\nYou’ll notice in your content folder that there is a folder called post, and in there are multiple posts. Depending on your theme, you might just have folders in post, and you might have some markdown files. They work mostly the same way.\nThe magic here is how you name them. You’ll remember from config.yaml that we have a post url format that goes post / year / month / day / slug. The reason for that is that urls matter for Google. Clean urls with meaningful information in them rank higher.\nSo in post, you’ll see the folders are named similarly – a date separated by dashes followed by a slug – the headline of your post in all lower case with dashes instead of spaces. So if I were writing a post called “I love sports data”, the slug version of that would be i-love-sports-data. If I were writing it on December 15, which I am, my folder would be 2020-12-15-i-love-sports-data.\nNOTE: CAPITALIZATION MATTERS. AS IN, DON’T. You don’t see capitals in URLs, so don’t use them.\nSo let’s create a post.\nThe easiest way to do this is to click Addins > New Post. You need to fill out four things on the page: The Title, Author, Date (if you’re changing it) and the Format. Be smart about the title – don’t but TEST TEST TEST or TITLE HERE because it will build with that and it’s hard to change later. Give some thought to the headline on your post before you hit done.\n\n\n\n\n\nWhen you’re done, hit Done and an RMarkdown file will appear, just as you have been using throughout this book.\nThe first thing you’ll see is the yaml header. Typically, if we’ve filled out the previous screen correctly, we should be good. But if you need to fix something, you can do it here.\n---\ntitle: \"Sports Data Analysis and Visualization\"\nauthor: \"Matt Waite\"\ndate: 2019-07-29T21:13:14-05:00\ncategories: [\"Books\"]\ntags: [\"R\", \"data\", \"sports\"]\n---\nBelow the yaml header? That’s up to you. Go do some of that writing stuff you do."
  },
  {
    "objectID": "blogging.html#publishing-your-site",
    "href": "blogging.html#publishing-your-site",
    "title": "36  Building your own blog with blogdown",
    "section": "36.5 Publishing your site",
    "text": "36.5 Publishing your site\nBlogdown is built on top of the Hugo static site generator. What that means is that Blogdown is going to take your Markdown files and create static html. What does static html mean? It means there’s no server creating it on the fly – that’s called dynamic html – so this can be hosted on the simplest of servers.\nPublishing takes a lot of steps to get set up, but once it is, it’s easy.\nStep 1: Get a GitHub account\nGo to GitHub and sign up for an account. NOTE: Your username will be part of your website address, and you could potentially be sending this to employers. I’m sure blaze420rryday has been your handle since middle school, but do you want an employer to see that? My GitHub user name is mattwaite. See what I’m getting at here?\nStep 2: Set up your website repository\nFor the low low price of nothing, GitHub will host a website for you, and we are going to take them up on that bargain. There’s several tricks to getting this to work, but none of them are hard. They just require you to be specific.\nTo start, you can click on the plus sign in the top right corner or hit the green new button, depending on what your page looks like vs mine (I’m reasonably active GitHub user, so mine will look different from yours).\n\n\n\n\n\nIn the create a new repository page, the name of your respository needs to follow this pattern: yourusernamehere.github.io where yourusernamehere is … your username. So my site is mattwaite.github.io because my username is mattwaite. This is why you do not want to select swaggylovedoctor as your username, no matter how attached to it you are. Your employment chances are zero with something dumb like that.\nAfter you’ve named the repository correctly, leave it public, check add .gitignore, and then select a gitignore template. Type R into the search, select it, and the create repository button will become active. Click create repository.\nStep 3:\nDon’t close your GitHub window.\nIn a new tab, download the GitHub Desktop App and install it.\nGitHub is a version control system and a social network mixed together. Version control is like Track Changes in Word, but on steroids. If you plan on a career in analytics or data science, GitHub is a skill you will have to learn, but it’s beyond the scope of this book.\nTo work around this, we’re going to use GitHub Desktop to manage our interactions with GitHub. Open GitHub Desktop and log into your GitHub account in the app.\nTo get your repository into GitHub Desktop, go back to your tab with your GitHub repository in it. Find the Code button and click it. Click on the Open With GitHub Desktop button.\nIn the window that pops up, we need to set the Local Path. This path needs to be the same place your blog project is located. Click the Choose button and navigate to where your blog project is located. Then, just click Clone.\n\n\n\n\n\nStep 4:\nLet’s get your site on the internet.\nSwitch back to your blog project in R Studio. We’re going to output your site and upload it to GitHub.\nTo do this, we need to change config.yaml. We need to tell your website project that you want to publish to your GitHub folder, not the default.\nOpen config.yaml in your blog project. Near the top, above ignoreFiles, add this line, replacing yourusername with … your user name. This says publish to your GitHub project that you put in the same folder as your blog project:\npublishDir: \"../yourusername.github.io\"\nSave config.yaml.\nOnce you are ready to build your site, you need to click on the Build tab and then on Build Website.\n\n\n\n\n\nIf it worked, you should see output in the window that looks something like this (yours will be different from mine):\n\n\n\n\n\nStep 5\nNow go to the GitHub Desktop App. You should see something that looks like this, though yours will be different from mine.\n\n\n\n\n\nThis is where you will commit files to your repository. GitHub is a two-step process for getting files from your computer to GitHub. The first is committing the files. To do that, add a message in the box next to your avatar (where it says update index.html in the screenshot above). Then click Commit to main (mine says master because it’s an older repository before GitHub switched to using main by default). The second step is to push it to GitHub. You do that on the screen that appears after you have committed your files. It should say you have No Local Changes, which is good because you sent them to GitHub. Now click Push origin.\n\n\n\n\n\nIn a few minutes, you should be able to go to username.github.io in a browser and you’ll see your site. Here’s mine."
  },
  {
    "objectID": "wafflecharts.html",
    "href": "wafflecharts.html",
    "title": "18  Waffle charts",
    "section": "",
    "text": "Pie charts are the devil. They should be an instant F in any data visualization class. The problem? How carefully can you evaluate angles and area? Unless they are blindingly obvious and only a few categories, not well. If you’ve got 25 categories, how can you tell the difference between 7 and 9 percent? You can’t.\nSo let’s introduce a better way: The Waffle Chart. Some call it a square pie chart. I personally hate that. Waffles it is.\nA waffle chart is designed to show you parts of the whole – proportionality. How many yards on offense come from rushing or passing. How many singles, doubles, triples and home runs make up a teams hits. How many shots a basketball team takes are two pointers versus three pointers.\nFirst, install the library in the console. We want a newer version of the waffle library than is in CRAN – where you normally get libraries from – so copy and paste this into your console:\ninstall.packages(\"waffle\")\nNow load it:"
  },
  {
    "objectID": "wafflecharts.html#making-waffles-with-vectors",
    "href": "wafflecharts.html#making-waffles-with-vectors",
    "title": "18  Waffle charts",
    "section": "18.1 Making waffles with vectors",
    "text": "18.1 Making waffles with vectors\nLet’s look at Maryland’s football game against Michigan State this season. Here’s the box score, which we’ll use for this part of the walkthrough.\nMaybe the easiest way to do waffle charts, at least at first, is to make vectors of your data and plug them in. To make a vector, we use the c or concatenate function.\nSo let’s look at offense. Net rushing vs passing.\n\nmd <- c(\"Rushing\"=175, \"Passing\"=314)\nms <- c(\"Rushing\"=100, \"Passing\"=221)\n\nSo what does the breakdown of the night look like?\nThe waffle library can break this down in a way that’s easier on the eyes than a pie chart. We call the library, add the data, specify the number of rows, give it a title and an x value label, and to clean up a quirk of the library, we’ve got to specify colors.\n\nwaffle(\n        md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n)\n\n\n\n\nOr, we could make this two teams in the same chart.\n\npassing <- c(\"Maryland\"=314, \"Michigan State\"=221)\n\n\nwaffle(\n        passing, \n        rows = 10, \n        title=\"Maryland vs Michigan State: passing\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"red\", \"green\")\n)\n\n\n\n\nSo what does it look like if we compare the two teams using the two vectors in the same chart? To do that – and I am not making this up – you have to create a waffle iron. Get it? Waffle charts? Iron?\n\niron(\n waffle(md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"green\")\n        )\n)\n\n\n\n\nWhat do you notice about this chart? Notice how the squares aren’t the same size? Well, Maryland out-gained Michigan State by a long way. So the squares aren’t the same size because the numbers aren’t the same. We can fix that by adding an unnamed padding number so the number of yards add up to the same thing. Let’s make the total for everyone be 489, Maryland’s total yards of offense. So to do that, we need to add a padding of 168 to Michigan State. REMEMBER: Don’t name it or it’ll show up in the legend.\n\nmd <- c(\"Rushing\"=175, \"Passing\"=314)\nms <- c(\"Rushing\"=100, \"Passing\"=221, 168)\n\nNow, in our waffle iron, if we don’t give that padding a color, we’ll get an error. So we need to make it white. Which, given our white background, means it will disappear.\n\niron(\n waffle(md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 1 yard\",\n        colors = c(\"black\", \"green\", \"white\")\n        )\n)\n\n\n\n\nOne last thing we can do is change the 1 square = 1 yard bit – which makes the squares really small in this case – by dividing our vector. Look, it’s math on vectors!\n\niron(\n waffle(md/2, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms/2, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 1 yard\",\n        colors = c(\"black\", \"green\", \"white\")\n        )\n)\n\n\n\n\nNews flash: Michigan State is changing its fight song to “Everybody Hurts” by REM."
  },
  {
    "objectID": "linecharts.html",
    "href": "linecharts.html",
    "title": "19  Line charts",
    "section": "",
    "text": "So far, we’ve talked about bar charts – stacked or otherwise – are good for showing relative size of a thing compared to another thing. Stacked Bars and Waffle charts are good at showing proportions of a whole.\nLine charts are good for showing change over time.\nLet’s look at how we can answer this question: Why did Maryland struggle at basketball last season?\nWe’ll need the logs of every game in college basketball for this.\nLet’s start getting all that we need. We can use the tidyverse shortcut.\nAnd now load the data.\nThis data has every game from every team in it, so we need to use filtering to limit it, because we just want to look at Maryland. If you don’t remember, flip back to chapter 6.\nBecause this data has just Maryland data in it, the dates are formatted correctly, and the data is long data (instead of wide), we have what we need to make line charts.\nLine charts, unlike bar charts, do have a y-axis. So in our ggplot step, we have to define what our x and y axes are. In this case, the x axis is our Date – the most common x axis in line charts is going to be a date of some variety – and y in this case is up to us. We’ve seen from previous walkthroughs that how well a team shoots the ball has a lot to do with how well a team does in a season, so let’s chart that.\nThe problem here is that the Y axis doesn’t start with zero. That makes this look more dramatic than it is. To make the axis what you want, you can use scale_x_continuous or scale_y_continuous and pass in a list with the bottom and top value you want. You do that like this:\nNote also that our X axis labels are automated. It knows it’s a date and it just labels it by month."
  },
  {
    "objectID": "linecharts.html#this-is-too-simple.",
    "href": "linecharts.html#this-is-too-simple.",
    "title": "19  Line charts",
    "section": "19.1 This is too simple.",
    "text": "19.1 This is too simple.\nWith datasets, we want to invite comparison. So let’s answer the question visually. Let’s put two lines on the same chart. How does Maryland compare to Illinois, for example?\n\nill <- logs %>% filter(Team == \"Illinois\")\n\nIn this case, because we have two different datasets, we’re going to put everything in the geom instead of the ggplot step. We also have to explicitly state what dataset we’re using by saying data= in the geom step.\nFirst, let’s chart Maryland. Read carefully. First we set the data. Then we set our aesthetic. Unlike bars, we need an X and a Y variable. In this case, our X is the date of the game, Y is the thing we want the lines to move with. In this case, the Team Field Goal Percentage – TeamFGPCT.\n\nggplot() + geom_line(data=umd, aes(x=Date, y=TeamFGPCT), color=\"red\")\n\n\n\n\nNow, by using +, we can add Illinois to it. REMEMBER COPY AND PASTE IS A THING. Nothing changes except what data you are using.\n\nggplot() + \n  geom_line(data=umd, aes(x=Date, y=TeamFGPCT), color=\"red\") + \n  geom_line(data=ill, aes(x=Date, y=TeamFGPCT), color=\"orange\")\n\n\n\n\nLet’s flatten our lines out by zeroing the Y axis. We’ll set the upper limit of the y-axis to 0.70 because Illinois shot fantastically well in one December game.\n\nggplot() + \n  geom_line(data=umd, aes(x=Date, y=TeamFGPCT), color=\"red\") + \n  geom_line(data=ill, aes(x=Date, y=TeamFGPCT), color=\"orange\") + \n  scale_y_continuous(limits = c(0, .70))\n\n\n\n\nSo visually speaking, the difference between Maryland and Illinois’ season is that while both had some significant variations shooting the ball, Illinois’ positive outliers were greater and Maryland’s low points were lower - especially after conference play started."
  },
  {
    "objectID": "linecharts.html#but-what-if-i-wanted-to-add-a-lot-of-lines.",
    "href": "linecharts.html#but-what-if-i-wanted-to-add-a-lot-of-lines.",
    "title": "19  Line charts",
    "section": "19.2 But what if I wanted to add a lot of lines.",
    "text": "19.2 But what if I wanted to add a lot of lines.\nFine. How about all Power Five Schools? This data for example purposes. You don’t have to do it.\n\npowerfive <- c(\"SEC\", \"Big Ten\", \"Pac-12\", \"Big 12\", \"ACC\")\n\np5conf <- logs %>% filter(Conference %in% powerfive)\n\nI can keep layering on layers all day if I want. And if my dataset has more than one team in it, I need to use the group command. And, the layering comes in order – so if you’re going to layer a bunch of lines with a smaller group of lines, you want the bunch on the bottom. So to do that, your code stacks from the bottom. The first geom in the code gets rendered first. The second gets layered on top of that. The third gets layered on that and so on.\n\nggplot() + \n  geom_line(data=p5conf, aes(x=Date, y=TeamFGPCT, group=Team), color=\"grey\") + \n  geom_line(data=umd, aes(x=Date, y=TeamFGPCT), color=\"red\") + \n  geom_line(data=ill, aes(x=Date, y=TeamFGPCT), color=\"orange\") + \n  scale_y_continuous(limits = c(0, .65))\n\n\n\n\nWhat do we see here? How have Maryland’s and Illinois’ seasons evolved against all the rest of the teams in college basketball?\nBut how does that compare to the average? We can add that pretty easily by creating a new dataframe with it and add another geom_line.\n\naverage <- logs %>% group_by(Date) %>% summarise(mean_shooting=mean(TeamFGPCT))\n\n\nggplot() + \n  geom_line(data=p5conf, aes(x=Date, y=TeamFGPCT, group=Team), color=\"grey\") + \n  geom_line(data=umd, aes(x=Date, y=TeamFGPCT), color=\"red\") + \n  geom_line(data=ill, aes(x=Date, y=TeamFGPCT), color=\"orange\") + \n  geom_line(data=average, aes(x=Date, y=mean_shooting), color=\"black\") + \n  scale_y_continuous(limits = c(0, .70))"
  },
  {
    "objectID": "stepcharts.html",
    "href": "stepcharts.html",
    "title": "20  Step charts",
    "section": "",
    "text": "There’s great examples out there. First is the Washington Post looking at Lebron passing Jordan’s career point total. Another is John Burn-Murdoch’s work at the Financial Times (which is paywalled) about soccer stars. Here’s an example of his work outside the paywall.\nTo replicate this, we need cumulative data – data that is the running total of data at a given point. So think of it this way – Maryland scores 50 points in a basketball game and then 50 more the next, their cumulative total at two games is 100 points.\nStep charts can be used for all kinds of things – showing how a player’s career has evolved over time, how a team fares over a season, or franchise history. Let’s walk through an example.\nLet’s look at Maryland’s women basketball team last season.\nFor this walkthrough:\n   Download csv file\n\nWe’ll need the tidyverse.\n\nlibrary(tidyverse)\n\nAnd we need to load our logs data we just downloaded.\n\nlogs <- read_csv(\"data/wbb_game_logs_2022.csv\")\n\nRows: 30438 Columns: 110\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr    (7): away_team_name, home_team_name, league, season_type, neutral_sit...\ndbl  (101): end_year, neutral_site, ncaa_game_id, win, mp, pts, fgm, fga, fg...\ndate   (1): date\ntime   (1): gametime_east\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHere we’re going to look at the scoring differential of teams. If you score more than your opponent, you win. So it stands to reason that if you score a lot more than your opponent over the course of a season, you should be very good, right? Let’s see.\nThe first thing we’re going to do is calculate that differential. Then, we’ll group it by the team. After that, we’re going to summarize using a new function called cumsum or cumulative sum – the sum for each game as we go forward. So game 1’s cumsum is the differential of that game. Game 2’s cumsum is Game 1 + Game 2. Game 3 is Game 1 + 2 + 3 and so on.\n\ndifflogs <- logs %>% \n  mutate(Differential = pts - opp_pts) %>% \n  group_by(team) %>% \n  mutate(CumDiff = cumsum(Differential))\n\nNow that we have the cumulative sum for each, let’s filter it down to just Big Ten teams.\n\nbigdiff <- difflogs %>% filter(conference == \"Big Ten\")\n\nThe step chart is it’s own geom, so we can employ it just like we have the others. It works almost exactly the same as a line chart, but it uses the cumulative sum instead of a regular value and, as the name implies, creates a step like shape to the line instead of a curve.\n\nggplot() + geom_step(data=bigdiff, aes(x=date, y=CumDiff, group=team))\n\n\n\n\nLet’s try a different element of the aesthetic: color, but this time inside the aesthetic. Last time, we did the color outside. When you put it inside, you pass it a column name and ggplot will color each line based on what thing that is, and it will create a legend that labels each line that thing.\n\nggplot() + geom_step(data=bigdiff, aes(x=date, y=CumDiff, group=team, color=team))\n\n\n\n\nFrom this, we can see a handful of teams in the Big Ten had negative point differentials last season. But which is which? And which one is Maryland? Too many colors and it’s too hard to tell. How to sort that out? Let’s add some helpers beyond layering.\nLet’s look at Maryland, plus another team: Purdue.\n\numd <- bigdiff %>% filter(team == \"Maryland\")\npu <- bigdiff %>% filter(team == \"Purdue\")\n\nLet’s introduce a couple of new things here. First, note when I take the color OUT of the aesthetic, the legend disappears.\nThe second thing I’m going to add is the annotation layer. In this case, I am adding a text annotation layer, and I can specify where by adding in a x and a y value where I want to put it. This takes some finesse. After that, I’m going to add labels and a theme.\n\nggplot() + \n  geom_step(data=bigdiff, aes(x=date, y=CumDiff, group=team), color=\"light grey\") +\n  geom_step(data=umd, aes(x=date, y=CumDiff, group=team), color=\"red\") + \n  geom_step(data=pu, aes(x=date, y=CumDiff, group=team), color=\"gold\") +\n  annotate(\"text\", x=(as.Date(\"2021-11-10\")), y=70, label=\"Purdue\") +\n  annotate(\"text\", x=(as.Date(\"2022-02-01\")), y=330, label=\"Maryland\") +\n  labs(\n    x=\"Date\", \n    y=\"Cumulative Point Differential\", \n    title=\"Ups and Downs for Maryland, Purdue Steadier\", \n    subtitle=\"The Terps had some big swings in point differential in an inconsistent season.\", \n    caption=\"Source: Sports-Reference.com | By Derek Willis\") +\n  theme_minimal()"
  }
]