# Building your own blog with Quarto

If you listen to the [Measurables Podcast](https://www.measurablespod.com/podcast) for about two episodes, you'll detect a pattern. The host asks each guest how they got started in sports analytics. To a one, they'll say they found public data and started blogging about their analysis of it. For nearly every single guest, this is their path into the field. They started messing around with data in a toolset, found something interesting and wrote a post about what they found and how they found it. Other analysts noticed it, or a hiring manager liked what they read, and the rest is history, as they say.

So, let's do that. Let's get you a blog so you can post your work.

Here's our requirements:

1.  This doesn't cost you anything.
2.  There's zero maintenance work or upkeep. No servers to manage. No account to pay for.
3.  Since you're going to be writing about your code, you should be able to create your blog posts in R Studio.

## Setup

With those requirements in mind, we're going to use a library called Quarto, which creates blog posts from files that are very similar to the R Markdown files you've been working with in this book.

It installs how you think it should. Go into the console and run this:

```{r}
#| eval: false
install.packages('quarto') 
```

After that, we're ready to start making a blog. To do that, go to File \> New Project and select New Directory, and follow the instructions [here](https://quarto.org/docs/websites/website-blog.html). In the Project Type view, you may have to scroll down to find "Quarto blog" but that's your choice.

And now we've come to our first decision point.

First, name the directory you're going to put this into. Keep it simple. Blog is fine. Then decide where on your computer you're going to put it. Put it somewhere you're going to remember. Don't put it on your Desktop. Put it in a folder. Remember what folder because you're going to need this later. Choose "None" as your engine and check the "Open in new session" box. Do NOT create a new repository at this point, then create the project. That should open another RStudio instance.

Now for the big decision: What theme to use. There are [lots of choices](https://quarto.org/docs/websites/website-blog.html#themes), and the default is called `cosmo`.

When you hit Create Project, you should get an R Studio screen. You might have a file open called _quarto.yaml. If you don't, open it (you can use the files pane in the bottom right). This file will look different depending on which theme you used. This configuration file needs to have a few things in it. This is the _quarto.yml for my website, but you should use it as a guide for what yours will need:

    project:
      type: website

    website:
      title: "Sports Blog"
      navbar:
        right:
          - about.qmd
          - icon: github
          href: https://github.com/dwillis
          - icon: twitter
          href: https://twitter.com/derekwillis
    format:
      html:
        theme: cosmo
        css: styles.css


## Seeing your site

While you are creating your site, you're going to want to see it. Now's a good time to introduce serving your site in R Studio so you can see it before you deploy it.

You can use the Render button in your editor to do that, and if you want to see it inside RStudio you can check the "Preview in Viewer Pane" from the drop-down menu just to the right of the Render button. Otherwise, the site will render in your browser locally.

```{r}
#| echo: false
knitr::include_graphics(rep("images/quartoblogpreview.png"))
```

## Editing files

You'll be working with the same Quarto files (.qmd) that we've been working with all semester. Same structure as the exercise files, just with some metadata at the top of each post - title, date, etc. Each of your files is a blog post that will reside in the `posts` directory:


```{r}
#| echo: false
knitr::include_graphics(rep("images/quartopost.png"))
```

But there are other files associated with your blog. Let's start with editing the about.qmd file.

At the top, you will have something called a yaml header, which are things that set up the page. They are quite simple to figure out. Here's the yaml header it generates. Here's mine; you can change yours to update the Twitter and GitHub values.

		---
		title: "About"
		image: profile.jpg
		about:
		  template: jolla
		  links:
			- icon: twitter
			  text: Twitter
			  href: https://twitter.com/derekwillis
			- icon: github
			  text: Github
			  href: https://github.com/dwillis
		---

Change yours, then change the text below the yaml header, and then save it. Click on the Render button and then check out the result in the Viewer tab on the right.

## Creating a new post

You'll notice in your `posts` folder that there are multiple posts. Depending on your theme, you might just have folders in post, and you might have some markdown files. They work mostly the same way.

The magic here is how you name them. You'll want to give the folders containing your posts a clean, meaningful name. The reason for that is that urls matter for Google. Clean urls with meaningful information in them rank higher.

So in `posts`, you'll see the folders are named similarly -- the headline of your post in all lower case with dashes instead of spaces. So if I were writing a post called "I love sports data", the slug version of that would be i-love-sports-data. Inside each folder is a file called `index.qmd` - that's where your actual post will go.

**NOTE: CAPITALIZATION MATTERS. AS IN, DON'T.** You don't see capitals in URLs, so don't use them.

So let's create a post. 

Using the Files pane, you can create a new folder, name it and inside that create an `index.qmd` file. But that seems kinda repetitive. So that's install a library that will make that task easier. We'll be installing it directly from GitHub:

```{r}
install.packages('remotes', repos = "http://cran.us.r-project.org")
remotes::install_github("smach/newpost", build_vignettes = TRUE)
```

Now, let's load our library:

```{r}
library(newpost)
```

From here, we can create a new post by editing and copying this into the console:

```
newpost("this is a test", description="does this work?", author="put your name here")
```

You should see a new folder in your `posts` directory with today's date followed by "this-is-a-test", and inside will be an index.qmd file. So you'll want to give some thought to the names of your posts, although you can change them after you make one.

The first thing you'll see in the index.qmd file is the yaml header. Typically, if we've filled out the previous block correctly, we should be good. But if you need to fix something, you can do it here.

    ---
    title: "this-is-a-test"
    author: "Derek Willis"
    description: "does this work?"
    date: "2023-08-18"
    categories: []
    ---

Below the yaml header? That's up to you. Go do some of that writing stuff you do, and you can mix code and words just like we've done with the exercises.

## Publishing your site

Quarto will take your .qmd files and create static html. What does static html mean? It means there's no server creating it on the fly -- that's called dynamic html -- so this can be hosted on the simplest of servers.

Publishing takes a lot of steps to get set up, but once it is, it's easy.

**Step 1: Get a GitHub account**

Go to [GitHub](https://GitHub.com/) and sign up for an account. NOTE: Your username will be part of your website address, and you could potentially be sending this to employers. I'm sure blaze420rryday has been your handle since middle school, but do you want an employer to see that? My GitHub user name is dwillis See what I'm getting at here?

**Step 2: Set up your website repository**

For the low low price of nothing, GitHub will host a website for you, and we are going to take them up on that bargain. There's several tricks to getting this to work, but none of them are hard. They just require you to be specific.

To start, you can click on the plus sign in the top right corner or hit the green new button, depending on what your page looks like vs mine (I'm reasonably active GitHub user, so mine will look different from yours).

```{r}
#| echo: false
knitr::include_graphics(rep("images/blog7.png"))
```

In the create a new repository page, **the name of your respository needs to follow this pattern**: yourusernamehere.github.io where yourusernamehere is ... your username. So my site is dwillis.github.io because my username is dwillis This is why you do not want to select swaggylovedoctor as your username, no matter how attached to it you are. Your employment chances are zero with something dumb like that.

After you've named the repository correctly, leave it public, check add .gitignore, and then select a gitignore template. Type R into the search, select it, and the create repository button will become active. Click create repository.

Finally, setup your repository so that it will publish your site every time you push updated or new files from the `main` branch. You can do that under "Settings":

```{r}
#| echo: false
knitr::include_graphics("images/gh-pages-docs-dir.png")
```

**Step 3:** (optional if you're fine using the command line interface)

Don't close your GitHub window.

In a new tab, [download the GitHub Desktop App](https://desktop.github.com/) and install it.

GitHub is a version control system and a social network mixed together. Version control is like Track Changes in Word, but on steroids. If you plan on a career in analytics or data science, GitHub is a skill you will have to learn, but it's beyond the scope of this book.

To work around this, we're going to use GitHub Desktop to manage our interactions with GitHub. Open GitHub Desktop and log into your GitHub account in the app. 

To get your repository into GitHub Desktop, go back to your tab with your GitHub repository in it. Find the Code button and click it. Click on the Open With GitHub Desktop button.

In the window that pops up, we need to set the Local Path. **This path needs to be the same place your blog project is located.** Click the Choose button and navigate to where your blog project is located. Then, just click Clone.

```{r}
#| echo: false
knitr::include_graphics(rep("images/blog9.png"))
```

**Step 4:**

Let's get your site on the internet.

Switch back to your blog project in R Studio. We're going to output your site and upload it to GitHub.

To do this, we need to change config.yaml. We need to tell your website project that you want to publish to your GitHub folder, not the default.

Open `_quarto.yml` in your blog project. Near the top, below type: website, add this line:

    output-dir: docs

Save _quarto.yml.

Then, add a .nojekyll file to the root of your repository that tells GitHub Pages not to do additional processing of your published site using Jekyll (the GitHub default site generation tool). You can [follow these instructions](https://quarto.org/docs/publishing/github-pages.html#render-to-docs) on how to do that.

Once you are ready to build your site, you can do so using the `quarto render` command via the Terminal and then git push (or using GitHub Desktop).

**Step 5** (GitHub Desktop only)

Now go to the GitHub Desktop App. You should see something that looks like this, though yours will be different from mine.

```{r}
#| echo: false
knitr::include_graphics(rep("images/blog12.png"))
```

This is where you will commit files to your repository. GitHub is a two-step process for getting files from your computer to GitHub. The first is committing the files. To do that, add a message in the box next to your avatar (where it says update index.html in the screenshot above). Then click Commit to main (mine says master because it's an older repository before GitHub switched to using main by default). The second step is to push it to GitHub. You do that on the screen that appears after you have committed your files. It should say you have No Local Changes, which is good because you sent them to GitHub. Now click Push origin.

```{r}
#| echo: false
knitr::include_graphics(rep("images/blog13.png"))
```

In a few minutes, you should be able to go to username.github.io in a browser and you'll see your site.
